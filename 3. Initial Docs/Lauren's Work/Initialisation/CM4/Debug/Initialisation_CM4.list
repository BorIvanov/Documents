
Initialisation_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0810a050  0810a050  0001a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810a0e8  0810a0e8  0001a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810a0f0  0810a0f0  0001a0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810a0f4  0810a0f4  0001a0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  10000000  0810a0f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d0  10000078  0810a170  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10000348  0810a170  00020348  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c6bc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000354e  00000000  00000000  0003c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001758  00000000  00000000  0003fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001600  00000000  00000000  00041410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e986  00000000  00000000  00042a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001df5e  00000000  00000000  00081396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a0496  00000000  00000000  0009f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023f78a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067ec  00000000  00000000  0023f7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810a038 	.word	0x0810a038

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	0810a038 	.word	0x0810a038

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_drsub>:
 8100380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100384:	e002      	b.n	810038c <__adddf3>
 8100386:	bf00      	nop

08100388 <__aeabi_dsub>:
 8100388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810038c <__adddf3>:
 810038c:	b530      	push	{r4, r5, lr}
 810038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100396:	ea94 0f05 	teq	r4, r5
 810039a:	bf08      	it	eq
 810039c:	ea90 0f02 	teqeq	r0, r2
 81003a0:	bf1f      	itttt	ne
 81003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003b2:	f000 80e2 	beq.w	810057a <__adddf3+0x1ee>
 81003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003be:	bfb8      	it	lt
 81003c0:	426d      	neglt	r5, r5
 81003c2:	dd0c      	ble.n	81003de <__adddf3+0x52>
 81003c4:	442c      	add	r4, r5
 81003c6:	ea80 0202 	eor.w	r2, r0, r2
 81003ca:	ea81 0303 	eor.w	r3, r1, r3
 81003ce:	ea82 0000 	eor.w	r0, r2, r0
 81003d2:	ea83 0101 	eor.w	r1, r3, r1
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	2d36      	cmp	r5, #54	; 0x36
 81003e0:	bf88      	it	hi
 81003e2:	bd30      	pophi	{r4, r5, pc}
 81003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 81003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81003f4:	d002      	beq.n	81003fc <__adddf3+0x70>
 81003f6:	4240      	negs	r0, r0
 81003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100408:	d002      	beq.n	8100410 <__adddf3+0x84>
 810040a:	4252      	negs	r2, r2
 810040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100410:	ea94 0f05 	teq	r4, r5
 8100414:	f000 80a7 	beq.w	8100566 <__adddf3+0x1da>
 8100418:	f1a4 0401 	sub.w	r4, r4, #1
 810041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100420:	db0d      	blt.n	810043e <__adddf3+0xb2>
 8100422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100426:	fa22 f205 	lsr.w	r2, r2, r5
 810042a:	1880      	adds	r0, r0, r2
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	fa03 f20e 	lsl.w	r2, r3, lr
 8100434:	1880      	adds	r0, r0, r2
 8100436:	fa43 f305 	asr.w	r3, r3, r5
 810043a:	4159      	adcs	r1, r3
 810043c:	e00e      	b.n	810045c <__adddf3+0xd0>
 810043e:	f1a5 0520 	sub.w	r5, r5, #32
 8100442:	f10e 0e20 	add.w	lr, lr, #32
 8100446:	2a01      	cmp	r2, #1
 8100448:	fa03 fc0e 	lsl.w	ip, r3, lr
 810044c:	bf28      	it	cs
 810044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100452:	fa43 f305 	asr.w	r3, r3, r5
 8100456:	18c0      	adds	r0, r0, r3
 8100458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100460:	d507      	bpl.n	8100472 <__adddf3+0xe6>
 8100462:	f04f 0e00 	mov.w	lr, #0
 8100466:	f1dc 0c00 	rsbs	ip, ip, #0
 810046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100476:	d31b      	bcc.n	81004b0 <__adddf3+0x124>
 8100478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810047c:	d30c      	bcc.n	8100498 <__adddf3+0x10c>
 810047e:	0849      	lsrs	r1, r1, #1
 8100480:	ea5f 0030 	movs.w	r0, r0, rrx
 8100484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100488:	f104 0401 	add.w	r4, r4, #1
 810048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100494:	f080 809a 	bcs.w	81005cc <__adddf3+0x240>
 8100498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810049c:	bf08      	it	eq
 810049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004a2:	f150 0000 	adcs.w	r0, r0, #0
 81004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004aa:	ea41 0105 	orr.w	r1, r1, r5
 81004ae:	bd30      	pop	{r4, r5, pc}
 81004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004b4:	4140      	adcs	r0, r0
 81004b6:	eb41 0101 	adc.w	r1, r1, r1
 81004ba:	3c01      	subs	r4, #1
 81004bc:	bf28      	it	cs
 81004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004c2:	d2e9      	bcs.n	8100498 <__adddf3+0x10c>
 81004c4:	f091 0f00 	teq	r1, #0
 81004c8:	bf04      	itt	eq
 81004ca:	4601      	moveq	r1, r0
 81004cc:	2000      	moveq	r0, #0
 81004ce:	fab1 f381 	clz	r3, r1
 81004d2:	bf08      	it	eq
 81004d4:	3320      	addeq	r3, #32
 81004d6:	f1a3 030b 	sub.w	r3, r3, #11
 81004da:	f1b3 0220 	subs.w	r2, r3, #32
 81004de:	da0c      	bge.n	81004fa <__adddf3+0x16e>
 81004e0:	320c      	adds	r2, #12
 81004e2:	dd08      	ble.n	81004f6 <__adddf3+0x16a>
 81004e4:	f102 0c14 	add.w	ip, r2, #20
 81004e8:	f1c2 020c 	rsb	r2, r2, #12
 81004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 81004f0:	fa21 f102 	lsr.w	r1, r1, r2
 81004f4:	e00c      	b.n	8100510 <__adddf3+0x184>
 81004f6:	f102 0214 	add.w	r2, r2, #20
 81004fa:	bfd8      	it	le
 81004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8100500:	fa01 f102 	lsl.w	r1, r1, r2
 8100504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100508:	bfdc      	itt	le
 810050a:	ea41 010c 	orrle.w	r1, r1, ip
 810050e:	4090      	lslle	r0, r2
 8100510:	1ae4      	subs	r4, r4, r3
 8100512:	bfa2      	ittt	ge
 8100514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100518:	4329      	orrge	r1, r5
 810051a:	bd30      	popge	{r4, r5, pc}
 810051c:	ea6f 0404 	mvn.w	r4, r4
 8100520:	3c1f      	subs	r4, #31
 8100522:	da1c      	bge.n	810055e <__adddf3+0x1d2>
 8100524:	340c      	adds	r4, #12
 8100526:	dc0e      	bgt.n	8100546 <__adddf3+0x1ba>
 8100528:	f104 0414 	add.w	r4, r4, #20
 810052c:	f1c4 0220 	rsb	r2, r4, #32
 8100530:	fa20 f004 	lsr.w	r0, r0, r4
 8100534:	fa01 f302 	lsl.w	r3, r1, r2
 8100538:	ea40 0003 	orr.w	r0, r0, r3
 810053c:	fa21 f304 	lsr.w	r3, r1, r4
 8100540:	ea45 0103 	orr.w	r1, r5, r3
 8100544:	bd30      	pop	{r4, r5, pc}
 8100546:	f1c4 040c 	rsb	r4, r4, #12
 810054a:	f1c4 0220 	rsb	r2, r4, #32
 810054e:	fa20 f002 	lsr.w	r0, r0, r2
 8100552:	fa01 f304 	lsl.w	r3, r1, r4
 8100556:	ea40 0003 	orr.w	r0, r0, r3
 810055a:	4629      	mov	r1, r5
 810055c:	bd30      	pop	{r4, r5, pc}
 810055e:	fa21 f004 	lsr.w	r0, r1, r4
 8100562:	4629      	mov	r1, r5
 8100564:	bd30      	pop	{r4, r5, pc}
 8100566:	f094 0f00 	teq	r4, #0
 810056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810056e:	bf06      	itte	eq
 8100570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100574:	3401      	addeq	r4, #1
 8100576:	3d01      	subne	r5, #1
 8100578:	e74e      	b.n	8100418 <__adddf3+0x8c>
 810057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810057e:	bf18      	it	ne
 8100580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100584:	d029      	beq.n	81005da <__adddf3+0x24e>
 8100586:	ea94 0f05 	teq	r4, r5
 810058a:	bf08      	it	eq
 810058c:	ea90 0f02 	teqeq	r0, r2
 8100590:	d005      	beq.n	810059e <__adddf3+0x212>
 8100592:	ea54 0c00 	orrs.w	ip, r4, r0
 8100596:	bf04      	itt	eq
 8100598:	4619      	moveq	r1, r3
 810059a:	4610      	moveq	r0, r2
 810059c:	bd30      	pop	{r4, r5, pc}
 810059e:	ea91 0f03 	teq	r1, r3
 81005a2:	bf1e      	ittt	ne
 81005a4:	2100      	movne	r1, #0
 81005a6:	2000      	movne	r0, #0
 81005a8:	bd30      	popne	{r4, r5, pc}
 81005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005ae:	d105      	bne.n	81005bc <__adddf3+0x230>
 81005b0:	0040      	lsls	r0, r0, #1
 81005b2:	4149      	adcs	r1, r1
 81005b4:	bf28      	it	cs
 81005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ba:	bd30      	pop	{r4, r5, pc}
 81005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005c0:	bf3c      	itt	cc
 81005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005c6:	bd30      	popcc	{r4, r5, pc}
 81005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005d4:	f04f 0000 	mov.w	r0, #0
 81005d8:	bd30      	pop	{r4, r5, pc}
 81005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005de:	bf1a      	itte	ne
 81005e0:	4619      	movne	r1, r3
 81005e2:	4610      	movne	r0, r2
 81005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005e8:	bf1c      	itt	ne
 81005ea:	460b      	movne	r3, r1
 81005ec:	4602      	movne	r2, r0
 81005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 81005f2:	bf06      	itte	eq
 81005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81005f8:	ea91 0f03 	teqeq	r1, r3
 81005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100600:	bd30      	pop	{r4, r5, pc}
 8100602:	bf00      	nop

08100604 <__aeabi_ui2d>:
 8100604:	f090 0f00 	teq	r0, #0
 8100608:	bf04      	itt	eq
 810060a:	2100      	moveq	r1, #0
 810060c:	4770      	bxeq	lr
 810060e:	b530      	push	{r4, r5, lr}
 8100610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100618:	f04f 0500 	mov.w	r5, #0
 810061c:	f04f 0100 	mov.w	r1, #0
 8100620:	e750      	b.n	81004c4 <__adddf3+0x138>
 8100622:	bf00      	nop

08100624 <__aeabi_i2d>:
 8100624:	f090 0f00 	teq	r0, #0
 8100628:	bf04      	itt	eq
 810062a:	2100      	moveq	r1, #0
 810062c:	4770      	bxeq	lr
 810062e:	b530      	push	{r4, r5, lr}
 8100630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810063c:	bf48      	it	mi
 810063e:	4240      	negmi	r0, r0
 8100640:	f04f 0100 	mov.w	r1, #0
 8100644:	e73e      	b.n	81004c4 <__adddf3+0x138>
 8100646:	bf00      	nop

08100648 <__aeabi_f2d>:
 8100648:	0042      	lsls	r2, r0, #1
 810064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100656:	bf1f      	itttt	ne
 8100658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100664:	4770      	bxne	lr
 8100666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810066a:	bf08      	it	eq
 810066c:	4770      	bxeq	lr
 810066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100672:	bf04      	itt	eq
 8100674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100678:	4770      	bxeq	lr
 810067a:	b530      	push	{r4, r5, lr}
 810067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100688:	e71c      	b.n	81004c4 <__adddf3+0x138>
 810068a:	bf00      	nop

0810068c <__aeabi_ul2d>:
 810068c:	ea50 0201 	orrs.w	r2, r0, r1
 8100690:	bf08      	it	eq
 8100692:	4770      	bxeq	lr
 8100694:	b530      	push	{r4, r5, lr}
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	e00a      	b.n	81006b2 <__aeabi_l2d+0x16>

0810069c <__aeabi_l2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006aa:	d502      	bpl.n	81006b2 <__aeabi_l2d+0x16>
 81006ac:	4240      	negs	r0, r0
 81006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006be:	f43f aed8 	beq.w	8100472 <__adddf3+0xe6>
 81006c2:	f04f 0203 	mov.w	r2, #3
 81006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006ca:	bf18      	it	ne
 81006cc:	3203      	addne	r2, #3
 81006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006d2:	bf18      	it	ne
 81006d4:	3203      	addne	r2, #3
 81006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006da:	f1c2 0320 	rsb	r3, r2, #32
 81006de:	fa00 fc03 	lsl.w	ip, r0, r3
 81006e2:	fa20 f002 	lsr.w	r0, r0, r2
 81006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006ea:	ea40 000e 	orr.w	r0, r0, lr
 81006ee:	fa21 f102 	lsr.w	r1, r1, r2
 81006f2:	4414      	add	r4, r2
 81006f4:	e6bd      	b.n	8100472 <__adddf3+0xe6>
 81006f6:	bf00      	nop

081006f8 <__aeabi_dmul>:
 81006f8:	b570      	push	{r4, r5, r6, lr}
 81006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100706:	bf1d      	ittte	ne
 8100708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810070c:	ea94 0f0c 	teqne	r4, ip
 8100710:	ea95 0f0c 	teqne	r5, ip
 8100714:	f000 f8de 	bleq	81008d4 <__aeabi_dmul+0x1dc>
 8100718:	442c      	add	r4, r5
 810071a:	ea81 0603 	eor.w	r6, r1, r3
 810071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810072a:	bf18      	it	ne
 810072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100738:	d038      	beq.n	81007ac <__aeabi_dmul+0xb4>
 810073a:	fba0 ce02 	umull	ip, lr, r0, r2
 810073e:	f04f 0500 	mov.w	r5, #0
 8100742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810074e:	f04f 0600 	mov.w	r6, #0
 8100752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100756:	f09c 0f00 	teq	ip, #0
 810075a:	bf18      	it	ne
 810075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810076c:	d204      	bcs.n	8100778 <__aeabi_dmul+0x80>
 810076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100772:	416d      	adcs	r5, r5
 8100774:	eb46 0606 	adc.w	r6, r6, r6
 8100778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100790:	bf88      	it	hi
 8100792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100796:	d81e      	bhi.n	81007d6 <__aeabi_dmul+0xde>
 8100798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 810079c:	bf08      	it	eq
 810079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007a2:	f150 0000 	adcs.w	r0, r0, #0
 81007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007aa:	bd70      	pop	{r4, r5, r6, pc}
 81007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007b0:	ea46 0101 	orr.w	r1, r6, r1
 81007b4:	ea40 0002 	orr.w	r0, r0, r2
 81007b8:	ea81 0103 	eor.w	r1, r1, r3
 81007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007c0:	bfc2      	ittt	gt
 81007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007ca:	bd70      	popgt	{r4, r5, r6, pc}
 81007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007d0:	f04f 0e00 	mov.w	lr, #0
 81007d4:	3c01      	subs	r4, #1
 81007d6:	f300 80ab 	bgt.w	8100930 <__aeabi_dmul+0x238>
 81007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007de:	bfde      	ittt	le
 81007e0:	2000      	movle	r0, #0
 81007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007e6:	bd70      	pople	{r4, r5, r6, pc}
 81007e8:	f1c4 0400 	rsb	r4, r4, #0
 81007ec:	3c20      	subs	r4, #32
 81007ee:	da35      	bge.n	810085c <__aeabi_dmul+0x164>
 81007f0:	340c      	adds	r4, #12
 81007f2:	dc1b      	bgt.n	810082c <__aeabi_dmul+0x134>
 81007f4:	f104 0414 	add.w	r4, r4, #20
 81007f8:	f1c4 0520 	rsb	r5, r4, #32
 81007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8100800:	fa20 f004 	lsr.w	r0, r0, r4
 8100804:	fa01 f205 	lsl.w	r2, r1, r5
 8100808:	ea40 0002 	orr.w	r0, r0, r2
 810080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100818:	fa21 f604 	lsr.w	r6, r1, r4
 810081c:	eb42 0106 	adc.w	r1, r2, r6
 8100820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100824:	bf08      	it	eq
 8100826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810082a:	bd70      	pop	{r4, r5, r6, pc}
 810082c:	f1c4 040c 	rsb	r4, r4, #12
 8100830:	f1c4 0520 	rsb	r5, r4, #32
 8100834:	fa00 f304 	lsl.w	r3, r0, r4
 8100838:	fa20 f005 	lsr.w	r0, r0, r5
 810083c:	fa01 f204 	lsl.w	r2, r1, r4
 8100840:	ea40 0002 	orr.w	r0, r0, r2
 8100844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810084c:	f141 0100 	adc.w	r1, r1, #0
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 0520 	rsb	r5, r4, #32
 8100860:	fa00 f205 	lsl.w	r2, r0, r5
 8100864:	ea4e 0e02 	orr.w	lr, lr, r2
 8100868:	fa20 f304 	lsr.w	r3, r0, r4
 810086c:	fa01 f205 	lsl.w	r2, r1, r5
 8100870:	ea43 0302 	orr.w	r3, r3, r2
 8100874:	fa21 f004 	lsr.w	r0, r1, r4
 8100878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810087c:	fa21 f204 	lsr.w	r2, r1, r4
 8100880:	ea20 0002 	bic.w	r0, r0, r2
 8100884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810088c:	bf08      	it	eq
 810088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100892:	bd70      	pop	{r4, r5, r6, pc}
 8100894:	f094 0f00 	teq	r4, #0
 8100898:	d10f      	bne.n	81008ba <__aeabi_dmul+0x1c2>
 810089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 810089e:	0040      	lsls	r0, r0, #1
 81008a0:	eb41 0101 	adc.w	r1, r1, r1
 81008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008a8:	bf08      	it	eq
 81008aa:	3c01      	subeq	r4, #1
 81008ac:	d0f7      	beq.n	810089e <__aeabi_dmul+0x1a6>
 81008ae:	ea41 0106 	orr.w	r1, r1, r6
 81008b2:	f095 0f00 	teq	r5, #0
 81008b6:	bf18      	it	ne
 81008b8:	4770      	bxne	lr
 81008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008be:	0052      	lsls	r2, r2, #1
 81008c0:	eb43 0303 	adc.w	r3, r3, r3
 81008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008c8:	bf08      	it	eq
 81008ca:	3d01      	subeq	r5, #1
 81008cc:	d0f7      	beq.n	81008be <__aeabi_dmul+0x1c6>
 81008ce:	ea43 0306 	orr.w	r3, r3, r6
 81008d2:	4770      	bx	lr
 81008d4:	ea94 0f0c 	teq	r4, ip
 81008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008dc:	bf18      	it	ne
 81008de:	ea95 0f0c 	teqne	r5, ip
 81008e2:	d00c      	beq.n	81008fe <__aeabi_dmul+0x206>
 81008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008e8:	bf18      	it	ne
 81008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008ee:	d1d1      	bne.n	8100894 <__aeabi_dmul+0x19c>
 81008f0:	ea81 0103 	eor.w	r1, r1, r3
 81008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008f8:	f04f 0000 	mov.w	r0, #0
 81008fc:	bd70      	pop	{r4, r5, r6, pc}
 81008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100902:	bf06      	itte	eq
 8100904:	4610      	moveq	r0, r2
 8100906:	4619      	moveq	r1, r3
 8100908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810090c:	d019      	beq.n	8100942 <__aeabi_dmul+0x24a>
 810090e:	ea94 0f0c 	teq	r4, ip
 8100912:	d102      	bne.n	810091a <__aeabi_dmul+0x222>
 8100914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100918:	d113      	bne.n	8100942 <__aeabi_dmul+0x24a>
 810091a:	ea95 0f0c 	teq	r5, ip
 810091e:	d105      	bne.n	810092c <__aeabi_dmul+0x234>
 8100920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100924:	bf1c      	itt	ne
 8100926:	4610      	movne	r0, r2
 8100928:	4619      	movne	r1, r3
 810092a:	d10a      	bne.n	8100942 <__aeabi_dmul+0x24a>
 810092c:	ea81 0103 	eor.w	r1, r1, r3
 8100930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810093c:	f04f 0000 	mov.w	r0, #0
 8100940:	bd70      	pop	{r4, r5, r6, pc}
 8100942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810094a:	bd70      	pop	{r4, r5, r6, pc}

0810094c <__aeabi_ddiv>:
 810094c:	b570      	push	{r4, r5, r6, lr}
 810094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810095a:	bf1d      	ittte	ne
 810095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100960:	ea94 0f0c 	teqne	r4, ip
 8100964:	ea95 0f0c 	teqne	r5, ip
 8100968:	f000 f8a7 	bleq	8100aba <__aeabi_ddiv+0x16e>
 810096c:	eba4 0405 	sub.w	r4, r4, r5
 8100970:	ea81 0e03 	eor.w	lr, r1, r3
 8100974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810097c:	f000 8088 	beq.w	8100a90 <__aeabi_ddiv+0x144>
 8100980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8100990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8100994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 810099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009a4:	429d      	cmp	r5, r3
 81009a6:	bf08      	it	eq
 81009a8:	4296      	cmpeq	r6, r2
 81009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009b2:	d202      	bcs.n	81009ba <__aeabi_ddiv+0x6e>
 81009b4:	085b      	lsrs	r3, r3, #1
 81009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ba:	1ab6      	subs	r6, r6, r2
 81009bc:	eb65 0503 	sbc.w	r5, r5, r3
 81009c0:	085b      	lsrs	r3, r3, #1
 81009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 81009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009d6:	bf22      	ittt	cs
 81009d8:	1ab6      	subcs	r6, r6, r2
 81009da:	4675      	movcs	r5, lr
 81009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 81009e0:	085b      	lsrs	r3, r3, #1
 81009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009ee:	bf22      	ittt	cs
 81009f0:	1ab6      	subcs	r6, r6, r2
 81009f2:	4675      	movcs	r5, lr
 81009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 81009f8:	085b      	lsrs	r3, r3, #1
 81009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a2c:	d018      	beq.n	8100a60 <__aeabi_ddiv+0x114>
 8100a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a4a:	d1c0      	bne.n	81009ce <__aeabi_ddiv+0x82>
 8100a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a50:	d10b      	bne.n	8100a6a <__aeabi_ddiv+0x11e>
 8100a52:	ea41 0100 	orr.w	r1, r1, r0
 8100a56:	f04f 0000 	mov.w	r0, #0
 8100a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a5e:	e7b6      	b.n	81009ce <__aeabi_ddiv+0x82>
 8100a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a64:	bf04      	itt	eq
 8100a66:	4301      	orreq	r1, r0
 8100a68:	2000      	moveq	r0, #0
 8100a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a6e:	bf88      	it	hi
 8100a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a74:	f63f aeaf 	bhi.w	81007d6 <__aeabi_dmul+0xde>
 8100a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a7c:	bf04      	itt	eq
 8100a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a86:	f150 0000 	adcs.w	r0, r0, #0
 8100a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a8e:	bd70      	pop	{r4, r5, r6, pc}
 8100a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a9c:	bfc2      	ittt	gt
 8100a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8100aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100aac:	f04f 0e00 	mov.w	lr, #0
 8100ab0:	3c01      	subs	r4, #1
 8100ab2:	e690      	b.n	81007d6 <__aeabi_dmul+0xde>
 8100ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ab8:	e68d      	b.n	81007d6 <__aeabi_dmul+0xde>
 8100aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100abe:	ea94 0f0c 	teq	r4, ip
 8100ac2:	bf08      	it	eq
 8100ac4:	ea95 0f0c 	teqeq	r5, ip
 8100ac8:	f43f af3b 	beq.w	8100942 <__aeabi_dmul+0x24a>
 8100acc:	ea94 0f0c 	teq	r4, ip
 8100ad0:	d10a      	bne.n	8100ae8 <__aeabi_ddiv+0x19c>
 8100ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ad6:	f47f af34 	bne.w	8100942 <__aeabi_dmul+0x24a>
 8100ada:	ea95 0f0c 	teq	r5, ip
 8100ade:	f47f af25 	bne.w	810092c <__aeabi_dmul+0x234>
 8100ae2:	4610      	mov	r0, r2
 8100ae4:	4619      	mov	r1, r3
 8100ae6:	e72c      	b.n	8100942 <__aeabi_dmul+0x24a>
 8100ae8:	ea95 0f0c 	teq	r5, ip
 8100aec:	d106      	bne.n	8100afc <__aeabi_ddiv+0x1b0>
 8100aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100af2:	f43f aefd 	beq.w	81008f0 <__aeabi_dmul+0x1f8>
 8100af6:	4610      	mov	r0, r2
 8100af8:	4619      	mov	r1, r3
 8100afa:	e722      	b.n	8100942 <__aeabi_dmul+0x24a>
 8100afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b00:	bf18      	it	ne
 8100b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b06:	f47f aec5 	bne.w	8100894 <__aeabi_dmul+0x19c>
 8100b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b0e:	f47f af0d 	bne.w	810092c <__aeabi_dmul+0x234>
 8100b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b16:	f47f aeeb 	bne.w	81008f0 <__aeabi_dmul+0x1f8>
 8100b1a:	e712      	b.n	8100942 <__aeabi_dmul+0x24a>

08100b1c <__gedf2>:
 8100b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b20:	e006      	b.n	8100b30 <__cmpdf2+0x4>
 8100b22:	bf00      	nop

08100b24 <__ledf2>:
 8100b24:	f04f 0c01 	mov.w	ip, #1
 8100b28:	e002      	b.n	8100b30 <__cmpdf2+0x4>
 8100b2a:	bf00      	nop

08100b2c <__cmpdf2>:
 8100b2c:	f04f 0c01 	mov.w	ip, #1
 8100b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b40:	bf18      	it	ne
 8100b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b46:	d01b      	beq.n	8100b80 <__cmpdf2+0x54>
 8100b48:	b001      	add	sp, #4
 8100b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b4e:	bf0c      	ite	eq
 8100b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b54:	ea91 0f03 	teqne	r1, r3
 8100b58:	bf02      	ittt	eq
 8100b5a:	ea90 0f02 	teqeq	r0, r2
 8100b5e:	2000      	moveq	r0, #0
 8100b60:	4770      	bxeq	lr
 8100b62:	f110 0f00 	cmn.w	r0, #0
 8100b66:	ea91 0f03 	teq	r1, r3
 8100b6a:	bf58      	it	pl
 8100b6c:	4299      	cmppl	r1, r3
 8100b6e:	bf08      	it	eq
 8100b70:	4290      	cmpeq	r0, r2
 8100b72:	bf2c      	ite	cs
 8100b74:	17d8      	asrcs	r0, r3, #31
 8100b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b7a:	f040 0001 	orr.w	r0, r0, #1
 8100b7e:	4770      	bx	lr
 8100b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b88:	d102      	bne.n	8100b90 <__cmpdf2+0x64>
 8100b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b8e:	d107      	bne.n	8100ba0 <__cmpdf2+0x74>
 8100b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d1d6      	bne.n	8100b48 <__cmpdf2+0x1c>
 8100b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b9e:	d0d3      	beq.n	8100b48 <__cmpdf2+0x1c>
 8100ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100ba4:	4770      	bx	lr
 8100ba6:	bf00      	nop

08100ba8 <__aeabi_cdrcmple>:
 8100ba8:	4684      	mov	ip, r0
 8100baa:	4610      	mov	r0, r2
 8100bac:	4662      	mov	r2, ip
 8100bae:	468c      	mov	ip, r1
 8100bb0:	4619      	mov	r1, r3
 8100bb2:	4663      	mov	r3, ip
 8100bb4:	e000      	b.n	8100bb8 <__aeabi_cdcmpeq>
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdcmpeq>:
 8100bb8:	b501      	push	{r0, lr}
 8100bba:	f7ff ffb7 	bl	8100b2c <__cmpdf2>
 8100bbe:	2800      	cmp	r0, #0
 8100bc0:	bf48      	it	mi
 8100bc2:	f110 0f00 	cmnmi.w	r0, #0
 8100bc6:	bd01      	pop	{r0, pc}

08100bc8 <__aeabi_dcmpeq>:
 8100bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bcc:	f7ff fff4 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100bd0:	bf0c      	ite	eq
 8100bd2:	2001      	moveq	r0, #1
 8100bd4:	2000      	movne	r0, #0
 8100bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bda:	bf00      	nop

08100bdc <__aeabi_dcmplt>:
 8100bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100be0:	f7ff ffea 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100be4:	bf34      	ite	cc
 8100be6:	2001      	movcc	r0, #1
 8100be8:	2000      	movcs	r0, #0
 8100bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bee:	bf00      	nop

08100bf0 <__aeabi_dcmple>:
 8100bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf4:	f7ff ffe0 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100bf8:	bf94      	ite	ls
 8100bfa:	2001      	movls	r0, #1
 8100bfc:	2000      	movhi	r0, #0
 8100bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c02:	bf00      	nop

08100c04 <__aeabi_dcmpge>:
 8100c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c08:	f7ff ffce 	bl	8100ba8 <__aeabi_cdrcmple>
 8100c0c:	bf94      	ite	ls
 8100c0e:	2001      	movls	r0, #1
 8100c10:	2000      	movhi	r0, #0
 8100c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c16:	bf00      	nop

08100c18 <__aeabi_dcmpgt>:
 8100c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c1c:	f7ff ffc4 	bl	8100ba8 <__aeabi_cdrcmple>
 8100c20:	bf34      	ite	cc
 8100c22:	2001      	movcc	r0, #1
 8100c24:	2000      	movcs	r0, #0
 8100c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c2a:	bf00      	nop

08100c2c <__aeabi_d2iz>:
 8100c2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c34:	d215      	bcs.n	8100c62 <__aeabi_d2iz+0x36>
 8100c36:	d511      	bpl.n	8100c5c <__aeabi_d2iz+0x30>
 8100c38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c40:	d912      	bls.n	8100c68 <__aeabi_d2iz+0x3c>
 8100c42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c52:	fa23 f002 	lsr.w	r0, r3, r2
 8100c56:	bf18      	it	ne
 8100c58:	4240      	negne	r0, r0
 8100c5a:	4770      	bx	lr
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c66:	d105      	bne.n	8100c74 <__aeabi_d2iz+0x48>
 8100c68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100c6c:	bf08      	it	eq
 8100c6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100c72:	4770      	bx	lr
 8100c74:	f04f 0000 	mov.w	r0, #0
 8100c78:	4770      	bx	lr
 8100c7a:	bf00      	nop

08100c7c <__aeabi_d2f>:
 8100c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100c84:	bf24      	itt	cs
 8100c86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100c8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100c8e:	d90d      	bls.n	8100cac <__aeabi_d2f+0x30>
 8100c90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100c94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100c98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100c9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100ca0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ca4:	bf08      	it	eq
 8100ca6:	f020 0001 	biceq.w	r0, r0, #1
 8100caa:	4770      	bx	lr
 8100cac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100cb0:	d121      	bne.n	8100cf6 <__aeabi_d2f+0x7a>
 8100cb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100cb6:	bfbc      	itt	lt
 8100cb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100cbc:	4770      	bxlt	lr
 8100cbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100cc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100cc6:	f1c2 0218 	rsb	r2, r2, #24
 8100cca:	f1c2 0c20 	rsb	ip, r2, #32
 8100cce:	fa10 f30c 	lsls.w	r3, r0, ip
 8100cd2:	fa20 f002 	lsr.w	r0, r0, r2
 8100cd6:	bf18      	it	ne
 8100cd8:	f040 0001 	orrne.w	r0, r0, #1
 8100cdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ce0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100ce4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100ce8:	ea40 000c 	orr.w	r0, r0, ip
 8100cec:	fa23 f302 	lsr.w	r3, r3, r2
 8100cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100cf4:	e7cc      	b.n	8100c90 <__aeabi_d2f+0x14>
 8100cf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100cfa:	d107      	bne.n	8100d0c <__aeabi_d2f+0x90>
 8100cfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d00:	bf1e      	ittt	ne
 8100d02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d0a:	4770      	bxne	lr
 8100d0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d18:	4770      	bx	lr
 8100d1a:	bf00      	nop

08100d1c <__aeabi_uldivmod>:
 8100d1c:	b953      	cbnz	r3, 8100d34 <__aeabi_uldivmod+0x18>
 8100d1e:	b94a      	cbnz	r2, 8100d34 <__aeabi_uldivmod+0x18>
 8100d20:	2900      	cmp	r1, #0
 8100d22:	bf08      	it	eq
 8100d24:	2800      	cmpeq	r0, #0
 8100d26:	bf1c      	itt	ne
 8100d28:	f04f 31ff 	movne.w	r1, #4294967295
 8100d2c:	f04f 30ff 	movne.w	r0, #4294967295
 8100d30:	f000 b974 	b.w	810101c <__aeabi_idiv0>
 8100d34:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d3c:	f000 f806 	bl	8100d4c <__udivmoddi4>
 8100d40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d48:	b004      	add	sp, #16
 8100d4a:	4770      	bx	lr

08100d4c <__udivmoddi4>:
 8100d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100d50:	9d08      	ldr	r5, [sp, #32]
 8100d52:	4604      	mov	r4, r0
 8100d54:	468e      	mov	lr, r1
 8100d56:	2b00      	cmp	r3, #0
 8100d58:	d14d      	bne.n	8100df6 <__udivmoddi4+0xaa>
 8100d5a:	428a      	cmp	r2, r1
 8100d5c:	4694      	mov	ip, r2
 8100d5e:	d969      	bls.n	8100e34 <__udivmoddi4+0xe8>
 8100d60:	fab2 f282 	clz	r2, r2
 8100d64:	b152      	cbz	r2, 8100d7c <__udivmoddi4+0x30>
 8100d66:	fa01 f302 	lsl.w	r3, r1, r2
 8100d6a:	f1c2 0120 	rsb	r1, r2, #32
 8100d6e:	fa20 f101 	lsr.w	r1, r0, r1
 8100d72:	fa0c fc02 	lsl.w	ip, ip, r2
 8100d76:	ea41 0e03 	orr.w	lr, r1, r3
 8100d7a:	4094      	lsls	r4, r2
 8100d7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100d80:	0c21      	lsrs	r1, r4, #16
 8100d82:	fbbe f6f8 	udiv	r6, lr, r8
 8100d86:	fa1f f78c 	uxth.w	r7, ip
 8100d8a:	fb08 e316 	mls	r3, r8, r6, lr
 8100d8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100d92:	fb06 f107 	mul.w	r1, r6, r7
 8100d96:	4299      	cmp	r1, r3
 8100d98:	d90a      	bls.n	8100db0 <__udivmoddi4+0x64>
 8100d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8100d9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8100da2:	f080 811f 	bcs.w	8100fe4 <__udivmoddi4+0x298>
 8100da6:	4299      	cmp	r1, r3
 8100da8:	f240 811c 	bls.w	8100fe4 <__udivmoddi4+0x298>
 8100dac:	3e02      	subs	r6, #2
 8100dae:	4463      	add	r3, ip
 8100db0:	1a5b      	subs	r3, r3, r1
 8100db2:	b2a4      	uxth	r4, r4
 8100db4:	fbb3 f0f8 	udiv	r0, r3, r8
 8100db8:	fb08 3310 	mls	r3, r8, r0, r3
 8100dbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100dc0:	fb00 f707 	mul.w	r7, r0, r7
 8100dc4:	42a7      	cmp	r7, r4
 8100dc6:	d90a      	bls.n	8100dde <__udivmoddi4+0x92>
 8100dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8100dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8100dd0:	f080 810a 	bcs.w	8100fe8 <__udivmoddi4+0x29c>
 8100dd4:	42a7      	cmp	r7, r4
 8100dd6:	f240 8107 	bls.w	8100fe8 <__udivmoddi4+0x29c>
 8100dda:	4464      	add	r4, ip
 8100ddc:	3802      	subs	r0, #2
 8100dde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100de2:	1be4      	subs	r4, r4, r7
 8100de4:	2600      	movs	r6, #0
 8100de6:	b11d      	cbz	r5, 8100df0 <__udivmoddi4+0xa4>
 8100de8:	40d4      	lsrs	r4, r2
 8100dea:	2300      	movs	r3, #0
 8100dec:	e9c5 4300 	strd	r4, r3, [r5]
 8100df0:	4631      	mov	r1, r6
 8100df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100df6:	428b      	cmp	r3, r1
 8100df8:	d909      	bls.n	8100e0e <__udivmoddi4+0xc2>
 8100dfa:	2d00      	cmp	r5, #0
 8100dfc:	f000 80ef 	beq.w	8100fde <__udivmoddi4+0x292>
 8100e00:	2600      	movs	r6, #0
 8100e02:	e9c5 0100 	strd	r0, r1, [r5]
 8100e06:	4630      	mov	r0, r6
 8100e08:	4631      	mov	r1, r6
 8100e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e0e:	fab3 f683 	clz	r6, r3
 8100e12:	2e00      	cmp	r6, #0
 8100e14:	d14a      	bne.n	8100eac <__udivmoddi4+0x160>
 8100e16:	428b      	cmp	r3, r1
 8100e18:	d302      	bcc.n	8100e20 <__udivmoddi4+0xd4>
 8100e1a:	4282      	cmp	r2, r0
 8100e1c:	f200 80f9 	bhi.w	8101012 <__udivmoddi4+0x2c6>
 8100e20:	1a84      	subs	r4, r0, r2
 8100e22:	eb61 0303 	sbc.w	r3, r1, r3
 8100e26:	2001      	movs	r0, #1
 8100e28:	469e      	mov	lr, r3
 8100e2a:	2d00      	cmp	r5, #0
 8100e2c:	d0e0      	beq.n	8100df0 <__udivmoddi4+0xa4>
 8100e2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8100e32:	e7dd      	b.n	8100df0 <__udivmoddi4+0xa4>
 8100e34:	b902      	cbnz	r2, 8100e38 <__udivmoddi4+0xec>
 8100e36:	deff      	udf	#255	; 0xff
 8100e38:	fab2 f282 	clz	r2, r2
 8100e3c:	2a00      	cmp	r2, #0
 8100e3e:	f040 8092 	bne.w	8100f66 <__udivmoddi4+0x21a>
 8100e42:	eba1 010c 	sub.w	r1, r1, ip
 8100e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e4a:	fa1f fe8c 	uxth.w	lr, ip
 8100e4e:	2601      	movs	r6, #1
 8100e50:	0c20      	lsrs	r0, r4, #16
 8100e52:	fbb1 f3f7 	udiv	r3, r1, r7
 8100e56:	fb07 1113 	mls	r1, r7, r3, r1
 8100e5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100e5e:	fb0e f003 	mul.w	r0, lr, r3
 8100e62:	4288      	cmp	r0, r1
 8100e64:	d908      	bls.n	8100e78 <__udivmoddi4+0x12c>
 8100e66:	eb1c 0101 	adds.w	r1, ip, r1
 8100e6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8100e6e:	d202      	bcs.n	8100e76 <__udivmoddi4+0x12a>
 8100e70:	4288      	cmp	r0, r1
 8100e72:	f200 80cb 	bhi.w	810100c <__udivmoddi4+0x2c0>
 8100e76:	4643      	mov	r3, r8
 8100e78:	1a09      	subs	r1, r1, r0
 8100e7a:	b2a4      	uxth	r4, r4
 8100e7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8100e80:	fb07 1110 	mls	r1, r7, r0, r1
 8100e84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100e88:	fb0e fe00 	mul.w	lr, lr, r0
 8100e8c:	45a6      	cmp	lr, r4
 8100e8e:	d908      	bls.n	8100ea2 <__udivmoddi4+0x156>
 8100e90:	eb1c 0404 	adds.w	r4, ip, r4
 8100e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8100e98:	d202      	bcs.n	8100ea0 <__udivmoddi4+0x154>
 8100e9a:	45a6      	cmp	lr, r4
 8100e9c:	f200 80bb 	bhi.w	8101016 <__udivmoddi4+0x2ca>
 8100ea0:	4608      	mov	r0, r1
 8100ea2:	eba4 040e 	sub.w	r4, r4, lr
 8100ea6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100eaa:	e79c      	b.n	8100de6 <__udivmoddi4+0x9a>
 8100eac:	f1c6 0720 	rsb	r7, r6, #32
 8100eb0:	40b3      	lsls	r3, r6
 8100eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8100eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8100eba:	fa20 f407 	lsr.w	r4, r0, r7
 8100ebe:	fa01 f306 	lsl.w	r3, r1, r6
 8100ec2:	431c      	orrs	r4, r3
 8100ec4:	40f9      	lsrs	r1, r7
 8100ec6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100eca:	fa00 f306 	lsl.w	r3, r0, r6
 8100ece:	fbb1 f8f9 	udiv	r8, r1, r9
 8100ed2:	0c20      	lsrs	r0, r4, #16
 8100ed4:	fa1f fe8c 	uxth.w	lr, ip
 8100ed8:	fb09 1118 	mls	r1, r9, r8, r1
 8100edc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100ee0:	fb08 f00e 	mul.w	r0, r8, lr
 8100ee4:	4288      	cmp	r0, r1
 8100ee6:	fa02 f206 	lsl.w	r2, r2, r6
 8100eea:	d90b      	bls.n	8100f04 <__udivmoddi4+0x1b8>
 8100eec:	eb1c 0101 	adds.w	r1, ip, r1
 8100ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100ef4:	f080 8088 	bcs.w	8101008 <__udivmoddi4+0x2bc>
 8100ef8:	4288      	cmp	r0, r1
 8100efa:	f240 8085 	bls.w	8101008 <__udivmoddi4+0x2bc>
 8100efe:	f1a8 0802 	sub.w	r8, r8, #2
 8100f02:	4461      	add	r1, ip
 8100f04:	1a09      	subs	r1, r1, r0
 8100f06:	b2a4      	uxth	r4, r4
 8100f08:	fbb1 f0f9 	udiv	r0, r1, r9
 8100f0c:	fb09 1110 	mls	r1, r9, r0, r1
 8100f10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100f14:	fb00 fe0e 	mul.w	lr, r0, lr
 8100f18:	458e      	cmp	lr, r1
 8100f1a:	d908      	bls.n	8100f2e <__udivmoddi4+0x1e2>
 8100f1c:	eb1c 0101 	adds.w	r1, ip, r1
 8100f20:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f24:	d26c      	bcs.n	8101000 <__udivmoddi4+0x2b4>
 8100f26:	458e      	cmp	lr, r1
 8100f28:	d96a      	bls.n	8101000 <__udivmoddi4+0x2b4>
 8100f2a:	3802      	subs	r0, #2
 8100f2c:	4461      	add	r1, ip
 8100f2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100f32:	fba0 9402 	umull	r9, r4, r0, r2
 8100f36:	eba1 010e 	sub.w	r1, r1, lr
 8100f3a:	42a1      	cmp	r1, r4
 8100f3c:	46c8      	mov	r8, r9
 8100f3e:	46a6      	mov	lr, r4
 8100f40:	d356      	bcc.n	8100ff0 <__udivmoddi4+0x2a4>
 8100f42:	d053      	beq.n	8100fec <__udivmoddi4+0x2a0>
 8100f44:	b15d      	cbz	r5, 8100f5e <__udivmoddi4+0x212>
 8100f46:	ebb3 0208 	subs.w	r2, r3, r8
 8100f4a:	eb61 010e 	sbc.w	r1, r1, lr
 8100f4e:	fa01 f707 	lsl.w	r7, r1, r7
 8100f52:	fa22 f306 	lsr.w	r3, r2, r6
 8100f56:	40f1      	lsrs	r1, r6
 8100f58:	431f      	orrs	r7, r3
 8100f5a:	e9c5 7100 	strd	r7, r1, [r5]
 8100f5e:	2600      	movs	r6, #0
 8100f60:	4631      	mov	r1, r6
 8100f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f66:	f1c2 0320 	rsb	r3, r2, #32
 8100f6a:	40d8      	lsrs	r0, r3
 8100f6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100f70:	fa21 f303 	lsr.w	r3, r1, r3
 8100f74:	4091      	lsls	r1, r2
 8100f76:	4301      	orrs	r1, r0
 8100f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f7c:	fa1f fe8c 	uxth.w	lr, ip
 8100f80:	fbb3 f0f7 	udiv	r0, r3, r7
 8100f84:	fb07 3610 	mls	r6, r7, r0, r3
 8100f88:	0c0b      	lsrs	r3, r1, #16
 8100f8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100f8e:	fb00 f60e 	mul.w	r6, r0, lr
 8100f92:	429e      	cmp	r6, r3
 8100f94:	fa04 f402 	lsl.w	r4, r4, r2
 8100f98:	d908      	bls.n	8100fac <__udivmoddi4+0x260>
 8100f9a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8100fa2:	d22f      	bcs.n	8101004 <__udivmoddi4+0x2b8>
 8100fa4:	429e      	cmp	r6, r3
 8100fa6:	d92d      	bls.n	8101004 <__udivmoddi4+0x2b8>
 8100fa8:	3802      	subs	r0, #2
 8100faa:	4463      	add	r3, ip
 8100fac:	1b9b      	subs	r3, r3, r6
 8100fae:	b289      	uxth	r1, r1
 8100fb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8100fb4:	fb07 3316 	mls	r3, r7, r6, r3
 8100fb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fbc:	fb06 f30e 	mul.w	r3, r6, lr
 8100fc0:	428b      	cmp	r3, r1
 8100fc2:	d908      	bls.n	8100fd6 <__udivmoddi4+0x28a>
 8100fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8100fcc:	d216      	bcs.n	8100ffc <__udivmoddi4+0x2b0>
 8100fce:	428b      	cmp	r3, r1
 8100fd0:	d914      	bls.n	8100ffc <__udivmoddi4+0x2b0>
 8100fd2:	3e02      	subs	r6, #2
 8100fd4:	4461      	add	r1, ip
 8100fd6:	1ac9      	subs	r1, r1, r3
 8100fd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100fdc:	e738      	b.n	8100e50 <__udivmoddi4+0x104>
 8100fde:	462e      	mov	r6, r5
 8100fe0:	4628      	mov	r0, r5
 8100fe2:	e705      	b.n	8100df0 <__udivmoddi4+0xa4>
 8100fe4:	4606      	mov	r6, r0
 8100fe6:	e6e3      	b.n	8100db0 <__udivmoddi4+0x64>
 8100fe8:	4618      	mov	r0, r3
 8100fea:	e6f8      	b.n	8100dde <__udivmoddi4+0x92>
 8100fec:	454b      	cmp	r3, r9
 8100fee:	d2a9      	bcs.n	8100f44 <__udivmoddi4+0x1f8>
 8100ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8100ff4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8100ff8:	3801      	subs	r0, #1
 8100ffa:	e7a3      	b.n	8100f44 <__udivmoddi4+0x1f8>
 8100ffc:	4646      	mov	r6, r8
 8100ffe:	e7ea      	b.n	8100fd6 <__udivmoddi4+0x28a>
 8101000:	4620      	mov	r0, r4
 8101002:	e794      	b.n	8100f2e <__udivmoddi4+0x1e2>
 8101004:	4640      	mov	r0, r8
 8101006:	e7d1      	b.n	8100fac <__udivmoddi4+0x260>
 8101008:	46d0      	mov	r8, sl
 810100a:	e77b      	b.n	8100f04 <__udivmoddi4+0x1b8>
 810100c:	3b02      	subs	r3, #2
 810100e:	4461      	add	r1, ip
 8101010:	e732      	b.n	8100e78 <__udivmoddi4+0x12c>
 8101012:	4630      	mov	r0, r6
 8101014:	e709      	b.n	8100e2a <__udivmoddi4+0xde>
 8101016:	4464      	add	r4, ip
 8101018:	3802      	subs	r0, #2
 810101a:	e742      	b.n	8100ea2 <__udivmoddi4+0x156>

0810101c <__aeabi_idiv0>:
 810101c:	4770      	bx	lr
 810101e:	bf00      	nop

08101020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101020:	b480      	push	{r7}
 8101022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101024:	4b09      	ldr	r3, [pc, #36]	; (810104c <SystemInit+0x2c>)
 8101026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810102a:	4a08      	ldr	r2, [pc, #32]	; (810104c <SystemInit+0x2c>)
 810102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101034:	4b05      	ldr	r3, [pc, #20]	; (810104c <SystemInit+0x2c>)
 8101036:	691b      	ldr	r3, [r3, #16]
 8101038:	4a04      	ldr	r2, [pc, #16]	; (810104c <SystemInit+0x2c>)
 810103a:	f043 0310 	orr.w	r3, r3, #16
 810103e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101040:	bf00      	nop
 8101042:	46bd      	mov	sp, r7
 8101044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101048:	4770      	bx	lr
 810104a:	bf00      	nop
 810104c:	e000ed00 	.word	0xe000ed00

08101050 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101050:	b580      	push	{r7, lr}
 8101052:	b08a      	sub	sp, #40	; 0x28
 8101054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101056:	f107 031c 	add.w	r3, r7, #28
 810105a:	2200      	movs	r2, #0
 810105c:	601a      	str	r2, [r3, #0]
 810105e:	605a      	str	r2, [r3, #4]
 8101060:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101062:	463b      	mov	r3, r7
 8101064:	2200      	movs	r2, #0
 8101066:	601a      	str	r2, [r3, #0]
 8101068:	605a      	str	r2, [r3, #4]
 810106a:	609a      	str	r2, [r3, #8]
 810106c:	60da      	str	r2, [r3, #12]
 810106e:	611a      	str	r2, [r3, #16]
 8101070:	615a      	str	r2, [r3, #20]
 8101072:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8101074:	4b2f      	ldr	r3, [pc, #188]	; (8101134 <MX_ADC1_Init+0xe4>)
 8101076:	4a30      	ldr	r2, [pc, #192]	; (8101138 <MX_ADC1_Init+0xe8>)
 8101078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810107a:	4b2e      	ldr	r3, [pc, #184]	; (8101134 <MX_ADC1_Init+0xe4>)
 810107c:	2200      	movs	r2, #0
 810107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8101080:	4b2c      	ldr	r3, [pc, #176]	; (8101134 <MX_ADC1_Init+0xe4>)
 8101082:	2208      	movs	r2, #8
 8101084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101086:	4b2b      	ldr	r3, [pc, #172]	; (8101134 <MX_ADC1_Init+0xe4>)
 8101088:	2200      	movs	r2, #0
 810108a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810108c:	4b29      	ldr	r3, [pc, #164]	; (8101134 <MX_ADC1_Init+0xe4>)
 810108e:	2204      	movs	r2, #4
 8101090:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101092:	4b28      	ldr	r3, [pc, #160]	; (8101134 <MX_ADC1_Init+0xe4>)
 8101094:	2200      	movs	r2, #0
 8101096:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101098:	4b26      	ldr	r3, [pc, #152]	; (8101134 <MX_ADC1_Init+0xe4>)
 810109a:	2200      	movs	r2, #0
 810109c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810109e:	4b25      	ldr	r3, [pc, #148]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010a0:	2201      	movs	r2, #1
 81010a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81010a4:	4b23      	ldr	r3, [pc, #140]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010a6:	2200      	movs	r2, #0
 81010a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81010aa:	4b22      	ldr	r3, [pc, #136]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010ac:	2200      	movs	r2, #0
 81010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81010b0:	4b20      	ldr	r3, [pc, #128]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010b2:	2200      	movs	r2, #0
 81010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81010b6:	4b1f      	ldr	r3, [pc, #124]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010b8:	2200      	movs	r2, #0
 81010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81010bc:	4b1d      	ldr	r3, [pc, #116]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010be:	2200      	movs	r2, #0
 81010c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81010c2:	4b1c      	ldr	r3, [pc, #112]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010c4:	2200      	movs	r2, #0
 81010c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81010c8:	4b1a      	ldr	r3, [pc, #104]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010ca:	2200      	movs	r2, #0
 81010cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81010d0:	4818      	ldr	r0, [pc, #96]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010d2:	f001 ffe9 	bl	81030a8 <HAL_ADC_Init>
 81010d6:	4603      	mov	r3, r0
 81010d8:	2b00      	cmp	r3, #0
 81010da:	d001      	beq.n	81010e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 81010dc:	f000 fbce 	bl	810187c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81010e0:	2300      	movs	r3, #0
 81010e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81010e4:	f107 031c 	add.w	r3, r7, #28
 81010e8:	4619      	mov	r1, r3
 81010ea:	4812      	ldr	r0, [pc, #72]	; (8101134 <MX_ADC1_Init+0xe4>)
 81010ec:	f003 f9a4 	bl	8104438 <HAL_ADCEx_MultiModeConfigChannel>
 81010f0:	4603      	mov	r3, r0
 81010f2:	2b00      	cmp	r3, #0
 81010f4:	d001      	beq.n	81010fa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81010f6:	f000 fbc1 	bl	810187c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 81010fa:	4b10      	ldr	r3, [pc, #64]	; (810113c <MX_ADC1_Init+0xec>)
 81010fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81010fe:	2306      	movs	r3, #6
 8101100:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101102:	2300      	movs	r3, #0
 8101104:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101106:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810110a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810110c:	2304      	movs	r3, #4
 810110e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101110:	2300      	movs	r3, #0
 8101112:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101114:	2300      	movs	r3, #0
 8101116:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101118:	463b      	mov	r3, r7
 810111a:	4619      	mov	r1, r3
 810111c:	4805      	ldr	r0, [pc, #20]	; (8101134 <MX_ADC1_Init+0xe4>)
 810111e:	f002 fb65 	bl	81037ec <HAL_ADC_ConfigChannel>
 8101122:	4603      	mov	r3, r0
 8101124:	2b00      	cmp	r3, #0
 8101126:	d001      	beq.n	810112c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8101128:	f000 fba8 	bl	810187c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 810112c:	bf00      	nop
 810112e:	3728      	adds	r7, #40	; 0x28
 8101130:	46bd      	mov	sp, r7
 8101132:	bd80      	pop	{r7, pc}
 8101134:	10000098 	.word	0x10000098
 8101138:	40022000 	.word	0x40022000
 810113c:	4b840000 	.word	0x4b840000

08101140 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8101140:	b580      	push	{r7, lr}
 8101142:	b0b8      	sub	sp, #224	; 0xe0
 8101144:	af00      	add	r7, sp, #0
 8101146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101148:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810114c:	2200      	movs	r2, #0
 810114e:	601a      	str	r2, [r3, #0]
 8101150:	605a      	str	r2, [r3, #4]
 8101152:	609a      	str	r2, [r3, #8]
 8101154:	60da      	str	r2, [r3, #12]
 8101156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101158:	f107 0310 	add.w	r3, r7, #16
 810115c:	22bc      	movs	r2, #188	; 0xbc
 810115e:	2100      	movs	r1, #0
 8101160:	4618      	mov	r0, r3
 8101162:	f008 fae5 	bl	8109730 <memset>
  if(adcHandle->Instance==ADC1)
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	681b      	ldr	r3, [r3, #0]
 810116a:	4a2a      	ldr	r2, [pc, #168]	; (8101214 <HAL_ADC_MspInit+0xd4>)
 810116c:	4293      	cmp	r3, r2
 810116e:	d14c      	bne.n	810120a <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101170:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101174:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8101176:	2301      	movs	r3, #1
 8101178:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 810117a:	2313      	movs	r3, #19
 810117c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 128;
 810117e:	2380      	movs	r3, #128	; 0x80
 8101180:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101182:	2302      	movs	r3, #2
 8101184:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101186:	2302      	movs	r3, #2
 8101188:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 810118a:	23c0      	movs	r3, #192	; 0xc0
 810118c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 810118e:	2320      	movs	r3, #32
 8101190:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101192:	2300      	movs	r3, #0
 8101194:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101196:	2300      	movs	r3, #0
 8101198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810119c:	f107 0310 	add.w	r3, r7, #16
 81011a0:	4618      	mov	r0, r3
 81011a2:	f003 ffc7 	bl	8105134 <HAL_RCCEx_PeriphCLKConfig>
 81011a6:	4603      	mov	r3, r0
 81011a8:	2b00      	cmp	r3, #0
 81011aa:	d001      	beq.n	81011b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 81011ac:	f000 fb66 	bl	810187c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81011b0:	4b19      	ldr	r3, [pc, #100]	; (8101218 <HAL_ADC_MspInit+0xd8>)
 81011b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011b6:	4a18      	ldr	r2, [pc, #96]	; (8101218 <HAL_ADC_MspInit+0xd8>)
 81011b8:	f043 0320 	orr.w	r3, r3, #32
 81011bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81011c0:	4b15      	ldr	r3, [pc, #84]	; (8101218 <HAL_ADC_MspInit+0xd8>)
 81011c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011c6:	f003 0320 	and.w	r3, r3, #32
 81011ca:	60fb      	str	r3, [r7, #12]
 81011cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81011ce:	4b12      	ldr	r3, [pc, #72]	; (8101218 <HAL_ADC_MspInit+0xd8>)
 81011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011d4:	4a10      	ldr	r2, [pc, #64]	; (8101218 <HAL_ADC_MspInit+0xd8>)
 81011d6:	f043 0301 	orr.w	r3, r3, #1
 81011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011de:	4b0e      	ldr	r3, [pc, #56]	; (8101218 <HAL_ADC_MspInit+0xd8>)
 81011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011e4:	f003 0301 	and.w	r3, r3, #1
 81011e8:	60bb      	str	r3, [r7, #8]
 81011ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = Vaccuum_Sensor_Pin;
 81011ec:	2310      	movs	r3, #16
 81011ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81011f2:	2303      	movs	r3, #3
 81011f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011f8:	2300      	movs	r3, #0
 81011fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(Vaccuum_Sensor_GPIO_Port, &GPIO_InitStruct);
 81011fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101202:	4619      	mov	r1, r3
 8101204:	4805      	ldr	r0, [pc, #20]	; (810121c <HAL_ADC_MspInit+0xdc>)
 8101206:	f003 fb1d 	bl	8104844 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 810120a:	bf00      	nop
 810120c:	37e0      	adds	r7, #224	; 0xe0
 810120e:	46bd      	mov	sp, r7
 8101210:	bd80      	pop	{r7, pc}
 8101212:	bf00      	nop
 8101214:	40022000 	.word	0x40022000
 8101218:	58024400 	.word	0x58024400
 810121c:	58020000 	.word	0x58020000

08101220 <GetVAC>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint32_t GetVAC(){
 8101220:	b580      	push	{r7, lr}
 8101222:	b088      	sub	sp, #32
 8101224:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8101226:	4811      	ldr	r0, [pc, #68]	; (810126c <GetVAC+0x4c>)
 8101228:	f002 f8e0 	bl	81033ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 810122c:	2101      	movs	r1, #1
 810122e:	480f      	ldr	r0, [pc, #60]	; (810126c <GetVAC+0x4c>)
 8101230:	f002 f9da 	bl	81035e8 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 8101234:	480d      	ldr	r0, [pc, #52]	; (810126c <GetVAC+0x4c>)
 8101236:	f002 facb 	bl	81037d0 <HAL_ADC_GetValue>
 810123a:	4603      	mov	r3, r0
 810123c:	4a0c      	ldr	r2, [pc, #48]	; (8101270 <GetVAC+0x50>)
 810123e:	6013      	str	r3, [r2, #0]

	uint8_t send[30];
	sprintf(send, "VAC: %lu \r\n", value);
 8101240:	4b0b      	ldr	r3, [pc, #44]	; (8101270 <GetVAC+0x50>)
 8101242:	681a      	ldr	r2, [r3, #0]
 8101244:	463b      	mov	r3, r7
 8101246:	490b      	ldr	r1, [pc, #44]	; (8101274 <GetVAC+0x54>)
 8101248:	4618      	mov	r0, r3
 810124a:	f008 fa79 	bl	8109740 <siprintf>
	ST_LINK_WRITE(send, sizeof(send));
 810124e:	463b      	mov	r3, r7
 8101250:	211e      	movs	r1, #30
 8101252:	4618      	mov	r0, r3
 8101254:	f001 fbd6 	bl	8102a04 <ST_LINK_WRITE>
	HAL_ADC_Stop(&hadc1);
 8101258:	4804      	ldr	r0, [pc, #16]	; (810126c <GetVAC+0x4c>)
 810125a:	f002 f991 	bl	8103580 <HAL_ADC_Stop>

	return value;
 810125e:	4b04      	ldr	r3, [pc, #16]	; (8101270 <GetVAC+0x50>)
 8101260:	681b      	ldr	r3, [r3, #0]
}
 8101262:	4618      	mov	r0, r3
 8101264:	3720      	adds	r7, #32
 8101266:	46bd      	mov	sp, r7
 8101268:	bd80      	pop	{r7, pc}
 810126a:	bf00      	nop
 810126c:	10000098 	.word	0x10000098
 8101270:	10000094 	.word	0x10000094
 8101274:	0810a050 	.word	0x0810a050

08101278 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101278:	b580      	push	{r7, lr}
 810127a:	b08c      	sub	sp, #48	; 0x30
 810127c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810127e:	f107 031c 	add.w	r3, r7, #28
 8101282:	2200      	movs	r2, #0
 8101284:	601a      	str	r2, [r3, #0]
 8101286:	605a      	str	r2, [r3, #4]
 8101288:	609a      	str	r2, [r3, #8]
 810128a:	60da      	str	r2, [r3, #12]
 810128c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810128e:	4bb0      	ldr	r3, [pc, #704]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101294:	4aae      	ldr	r2, [pc, #696]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101296:	f043 0310 	orr.w	r3, r3, #16
 810129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810129e:	4bac      	ldr	r3, [pc, #688]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a4:	f003 0310 	and.w	r3, r3, #16
 81012a8:	61bb      	str	r3, [r7, #24]
 81012aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012ac:	4ba8      	ldr	r3, [pc, #672]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b2:	4aa7      	ldr	r2, [pc, #668]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012b4:	f043 0304 	orr.w	r3, r3, #4
 81012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012bc:	4ba4      	ldr	r3, [pc, #656]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c2:	f003 0304 	and.w	r3, r3, #4
 81012c6:	617b      	str	r3, [r7, #20]
 81012c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81012ca:	4ba1      	ldr	r3, [pc, #644]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d0:	4a9f      	ldr	r2, [pc, #636]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012d2:	f043 0320 	orr.w	r3, r3, #32
 81012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012da:	4b9d      	ldr	r3, [pc, #628]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e0:	f003 0320 	and.w	r3, r3, #32
 81012e4:	613b      	str	r3, [r7, #16]
 81012e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81012e8:	4b99      	ldr	r3, [pc, #612]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ee:	4a98      	ldr	r2, [pc, #608]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012f0:	f043 0301 	orr.w	r3, r3, #1
 81012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012f8:	4b95      	ldr	r3, [pc, #596]	; (8101550 <MX_GPIO_Init+0x2d8>)
 81012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012fe:	f003 0301 	and.w	r3, r3, #1
 8101302:	60fb      	str	r3, [r7, #12]
 8101304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101306:	4b92      	ldr	r3, [pc, #584]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810130c:	4a90      	ldr	r2, [pc, #576]	; (8101550 <MX_GPIO_Init+0x2d8>)
 810130e:	f043 0302 	orr.w	r3, r3, #2
 8101312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101316:	4b8e      	ldr	r3, [pc, #568]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810131c:	f003 0302 	and.w	r3, r3, #2
 8101320:	60bb      	str	r3, [r7, #8]
 8101322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101324:	4b8a      	ldr	r3, [pc, #552]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810132a:	4a89      	ldr	r2, [pc, #548]	; (8101550 <MX_GPIO_Init+0x2d8>)
 810132c:	f043 0308 	orr.w	r3, r3, #8
 8101330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101334:	4b86      	ldr	r3, [pc, #536]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810133a:	f003 0308 	and.w	r3, r3, #8
 810133e:	607b      	str	r3, [r7, #4]
 8101340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101342:	4b83      	ldr	r3, [pc, #524]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101348:	4a81      	ldr	r2, [pc, #516]	; (8101550 <MX_GPIO_Init+0x2d8>)
 810134a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101352:	4b7f      	ldr	r3, [pc, #508]	; (8101550 <MX_GPIO_Init+0x2d8>)
 8101354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810135c:	603b      	str	r3, [r7, #0]
 810135e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101360:	2200      	movs	r2, #0
 8101362:	2107      	movs	r1, #7
 8101364:	487b      	ldr	r0, [pc, #492]	; (8101554 <MX_GPIO_Init+0x2dc>)
 8101366:	f003 fc35 	bl	8104bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 810136a:	2200      	movs	r2, #0
 810136c:	2101      	movs	r1, #1
 810136e:	487a      	ldr	r0, [pc, #488]	; (8101558 <MX_GPIO_Init+0x2e0>)
 8101370:	f003 fc30 	bl	8104bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8101374:	2200      	movs	r2, #0
 8101376:	f244 0101 	movw	r1, #16385	; 0x4001
 810137a:	4878      	ldr	r0, [pc, #480]	; (810155c <MX_GPIO_Init+0x2e4>)
 810137c:	f003 fc2a 	bl	8104bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Debug_1_Pin
 8101380:	2200      	movs	r2, #0
 8101382:	f24c 4178 	movw	r1, #50296	; 0xc478
 8101386:	4876      	ldr	r0, [pc, #472]	; (8101560 <MX_GPIO_Init+0x2e8>)
 8101388:	f003 fc24 	bl	8104bd4 <HAL_GPIO_WritePin>
                          |Debug_2_Pin|Debug_3_Pin|Debug_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin, GPIO_PIN_SET);
 810138c:	2201      	movs	r2, #1
 810138e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8101392:	4874      	ldr	r0, [pc, #464]	; (8101564 <MX_GPIO_Init+0x2ec>)
 8101394:	f003 fc1e 	bl	8104bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 8101398:	2201      	movs	r2, #1
 810139a:	2101      	movs	r1, #1
 810139c:	4870      	ldr	r0, [pc, #448]	; (8101560 <MX_GPIO_Init+0x2e8>)
 810139e:	f003 fc19 	bl	8104bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 81013a2:	2200      	movs	r2, #0
 81013a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81013a8:	486f      	ldr	r0, [pc, #444]	; (8101568 <MX_GPIO_Init+0x2f0>)
 81013aa:	f003 fc13 	bl	8104bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin;
 81013ae:	2307      	movs	r3, #7
 81013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013b2:	2301      	movs	r3, #1
 81013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013b6:	2300      	movs	r3, #0
 81013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013ba:	2300      	movs	r3, #0
 81013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81013be:	f107 031c 	add.w	r3, r7, #28
 81013c2:	4619      	mov	r1, r3
 81013c4:	4863      	ldr	r0, [pc, #396]	; (8101554 <MX_GPIO_Init+0x2dc>)
 81013c6:	f003 fa3d 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|Rotary_Switch_C2_Pin;
 81013ca:	f242 0301 	movw	r3, #8193	; 0x2001
 81013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81013d0:	2300      	movs	r3, #0
 81013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013d4:	2300      	movs	r3, #0
 81013d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81013d8:	f107 031c 	add.w	r3, r7, #28
 81013dc:	4619      	mov	r1, r3
 81013de:	4861      	ldr	r0, [pc, #388]	; (8101564 <MX_GPIO_Init+0x2ec>)
 81013e0:	f003 fa30 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C8_Pin;
 81013e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81013ea:	2300      	movs	r3, #0
 81013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013ee:	2300      	movs	r3, #0
 81013f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C8_GPIO_Port, &GPIO_InitStruct);
 81013f2:	f107 031c 	add.w	r3, r7, #28
 81013f6:	4619      	mov	r1, r3
 81013f8:	485c      	ldr	r0, [pc, #368]	; (810156c <MX_GPIO_Init+0x2f4>)
 81013fa:	f003 fa23 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ready_Z_Pin;
 81013fe:	2301      	movs	r3, #1
 8101400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101402:	2301      	movs	r3, #1
 8101404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101406:	2300      	movs	r3, #0
 8101408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810140a:	2300      	movs	r3, #0
 810140c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Ready_Z_GPIO_Port, &GPIO_InitStruct);
 810140e:	f107 031c 	add.w	r3, r7, #28
 8101412:	4619      	mov	r1, r3
 8101414:	4850      	ldr	r0, [pc, #320]	; (8101558 <MX_GPIO_Init+0x2e0>)
 8101416:	f003 fa15 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C1_Pin;
 810141a:	2308      	movs	r3, #8
 810141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810141e:	2300      	movs	r3, #0
 8101420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101422:	2300      	movs	r3, #0
 8101424:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C1_GPIO_Port, &GPIO_InitStruct);
 8101426:	f107 031c 	add.w	r3, r7, #28
 810142a:	4619      	mov	r1, r3
 810142c:	484a      	ldr	r0, [pc, #296]	; (8101558 <MX_GPIO_Init+0x2e0>)
 810142e:	f003 fa09 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8101432:	f244 0301 	movw	r3, #16385	; 0x4001
 8101436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101438:	2301      	movs	r3, #1
 810143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810143c:	2300      	movs	r3, #0
 810143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101440:	2300      	movs	r3, #0
 8101442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101444:	f107 031c 	add.w	r3, r7, #28
 8101448:	4619      	mov	r1, r3
 810144a:	4844      	ldr	r0, [pc, #272]	; (810155c <MX_GPIO_Init+0x2e4>)
 810144c:	f003 f9fa 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C4_Pin;
 8101450:	2302      	movs	r3, #2
 8101452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101454:	2300      	movs	r3, #0
 8101456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101458:	2300      	movs	r3, #0
 810145a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C4_GPIO_Port, &GPIO_InitStruct);
 810145c:	f107 031c 	add.w	r3, r7, #28
 8101460:	4619      	mov	r1, r3
 8101462:	483e      	ldr	r0, [pc, #248]	; (810155c <MX_GPIO_Init+0x2e4>)
 8101464:	f003 f9ee 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Homing_Z_Pin;
 8101468:	2304      	movs	r3, #4
 810146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810146c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101472:	2300      	movs	r3, #0
 8101474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Homing_Z_GPIO_Port, &GPIO_InitStruct);
 8101476:	f107 031c 	add.w	r3, r7, #28
 810147a:	4619      	mov	r1, r3
 810147c:	4837      	ldr	r0, [pc, #220]	; (810155c <MX_GPIO_Init+0x2e4>)
 810147e:	f003 f9e1 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Pushbutton_Rotary_Switch_Pin;
 8101482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101488:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 810148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810148e:	2300      	movs	r3, #0
 8101490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Pushbutton_Rotary_Switch_GPIO_Port, &GPIO_InitStruct);
 8101492:	f107 031c 	add.w	r3, r7, #28
 8101496:	4619      	mov	r1, r3
 8101498:	482e      	ldr	r0, [pc, #184]	; (8101554 <MX_GPIO_Init+0x2dc>)
 810149a:	f003 f9d3 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Homing_X_Pin|Endstop_X_Pin|Endstop_Z_Pin;
 810149e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 81014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81014a4:	2300      	movs	r3, #0
 81014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014a8:	2300      	movs	r3, #0
 81014aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81014ac:	f107 031c 	add.w	r3, r7, #28
 81014b0:	4619      	mov	r1, r3
 81014b2:	4828      	ldr	r0, [pc, #160]	; (8101554 <MX_GPIO_Init+0x2dc>)
 81014b4:	f003 f9c6 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Enable_PWR_Pin
 81014b8:	f24c 4379 	movw	r3, #50297	; 0xc479
 81014bc:	61fb      	str	r3, [r7, #28]
                          |Debug_1_Pin|Debug_2_Pin|Debug_3_Pin|Debug_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81014be:	2301      	movs	r3, #1
 81014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014c2:	2300      	movs	r3, #0
 81014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014c6:	2300      	movs	r3, #0
 81014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81014ca:	f107 031c 	add.w	r3, r7, #28
 81014ce:	4619      	mov	r1, r3
 81014d0:	4823      	ldr	r0, [pc, #140]	; (8101560 <MX_GPIO_Init+0x2e8>)
 81014d2:	f003 f9b7 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin;
 81014d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 81014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81014dc:	2301      	movs	r3, #1
 81014de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014e0:	2300      	movs	r3, #0
 81014e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014e4:	2300      	movs	r3, #0
 81014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81014e8:	f107 031c 	add.w	r3, r7, #28
 81014ec:	4619      	mov	r1, r3
 81014ee:	481d      	ldr	r0, [pc, #116]	; (8101564 <MX_GPIO_Init+0x2ec>)
 81014f0:	f003 f9a8 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Coin_INT_Pin|Prox_INT_Pin;
 81014f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81014fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81014fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101500:	2300      	movs	r3, #0
 8101502:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101504:	f107 031c 	add.w	r3, r7, #28
 8101508:	4619      	mov	r1, r3
 810150a:	4816      	ldr	r0, [pc, #88]	; (8101564 <MX_GPIO_Init+0x2ec>)
 810150c:	f003 f99a 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Read_EMO_Pin;
 8101510:	2302      	movs	r3, #2
 8101512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101514:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810151a:	2300      	movs	r3, #0
 810151c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Read_EMO_GPIO_Port, &GPIO_InitStruct);
 810151e:	f107 031c 	add.w	r3, r7, #28
 8101522:	4619      	mov	r1, r3
 8101524:	480e      	ldr	r0, [pc, #56]	; (8101560 <MX_GPIO_Init+0x2e8>)
 8101526:	f003 f98d 	bl	8104844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_X_Pin;
 810152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101530:	2301      	movs	r3, #1
 8101532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101534:	2300      	movs	r3, #0
 8101536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101538:	2300      	movs	r3, #0
 810153a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Direction_X_GPIO_Port, &GPIO_InitStruct);
 810153c:	f107 031c 	add.w	r3, r7, #28
 8101540:	4619      	mov	r1, r3
 8101542:	4809      	ldr	r0, [pc, #36]	; (8101568 <MX_GPIO_Init+0x2f0>)
 8101544:	f003 f97e 	bl	8104844 <HAL_GPIO_Init>

}
 8101548:	bf00      	nop
 810154a:	3730      	adds	r7, #48	; 0x30
 810154c:	46bd      	mov	sp, r7
 810154e:	bd80      	pop	{r7, pc}
 8101550:	58024400 	.word	0x58024400
 8101554:	58021000 	.word	0x58021000
 8101558:	58020000 	.word	0x58020000
 810155c:	58020400 	.word	0x58020400
 8101560:	58020c00 	.word	0x58020c00
 8101564:	58020800 	.word	0x58020800
 8101568:	58021800 	.word	0x58021800
 810156c:	58021400 	.word	0x58021400

08101570 <set_Valve>:
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
}



void set_Valve(void){
 8101570:	b580      	push	{r7, lr}
 8101572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Vaccuum_Valve_GPIO_Port, Vaccuum_Valve_Pin, GPIO_PIN_RESET);
 8101574:	2200      	movs	r2, #0
 8101576:	2140      	movs	r1, #64	; 0x40
 8101578:	4802      	ldr	r0, [pc, #8]	; (8101584 <set_Valve+0x14>)
 810157a:	f003 fb2b 	bl	8104bd4 <HAL_GPIO_WritePin>
}
 810157e:	bf00      	nop
 8101580:	bd80      	pop	{r7, pc}
 8101582:	bf00      	nop
 8101584:	58020800 	.word	0x58020800

08101588 <reset_Valve>:
void reset_Valve(void){
 8101588:	b580      	push	{r7, lr}
 810158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Vaccuum_Valve_GPIO_Port, Vaccuum_Valve_Pin, GPIO_PIN_SET);
 810158c:	2201      	movs	r2, #1
 810158e:	2140      	movs	r1, #64	; 0x40
 8101590:	4802      	ldr	r0, [pc, #8]	; (810159c <reset_Valve+0x14>)
 8101592:	f003 fb1f 	bl	8104bd4 <HAL_GPIO_WritePin>
}
 8101596:	bf00      	nop
 8101598:	bd80      	pop	{r7, pc}
 810159a:	bf00      	nop
 810159c:	58020800 	.word	0x58020800

081015a0 <set_Pump>:

void set_Pump(void){
 81015a0:	b580      	push	{r7, lr}
 81015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Vaccuum_Pump_GPIO_Port, Vaccuum_Pump_Pin, GPIO_PIN_RESET);
 81015a4:	2200      	movs	r2, #0
 81015a6:	2180      	movs	r1, #128	; 0x80
 81015a8:	4802      	ldr	r0, [pc, #8]	; (81015b4 <set_Pump+0x14>)
 81015aa:	f003 fb13 	bl	8104bd4 <HAL_GPIO_WritePin>
}
 81015ae:	bf00      	nop
 81015b0:	bd80      	pop	{r7, pc}
 81015b2:	bf00      	nop
 81015b4:	58020800 	.word	0x58020800

081015b8 <reset_Pump>:
void reset_Pump(void){
 81015b8:	b580      	push	{r7, lr}
 81015ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Vaccuum_Pump_GPIO_Port, Vaccuum_Pump_Pin, GPIO_PIN_SET);
 81015bc:	2201      	movs	r2, #1
 81015be:	2180      	movs	r1, #128	; 0x80
 81015c0:	4802      	ldr	r0, [pc, #8]	; (81015cc <reset_Pump+0x14>)
 81015c2:	f003 fb07 	bl	8104bd4 <HAL_GPIO_WritePin>
}
 81015c6:	bf00      	nop
 81015c8:	bd80      	pop	{r7, pc}
 81015ca:	bf00      	nop
 81015cc:	58020800 	.word	0x58020800

081015d0 <set_Enable_Power>:
	HAL_GPIO_WritePin(DigiIN_OUT_Z_GPIO_Port, DigiIN_OUT_Z_Pin, GPIO_PIN_RESET);
}



void set_Enable_Power(void){
 81015d0:	b580      	push	{r7, lr}
 81015d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_RESET);
 81015d4:	2200      	movs	r2, #0
 81015d6:	2101      	movs	r1, #1
 81015d8:	4802      	ldr	r0, [pc, #8]	; (81015e4 <set_Enable_Power+0x14>)
 81015da:	f003 fafb 	bl	8104bd4 <HAL_GPIO_WritePin>
}
 81015de:	bf00      	nop
 81015e0:	bd80      	pop	{r7, pc}
 81015e2:	bf00      	nop
 81015e4:	58020c00 	.word	0x58020c00

081015e8 <reset_Enable_Power>:
void reset_Enable_Power(void){
 81015e8:	b580      	push	{r7, lr}
 81015ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 81015ec:	2201      	movs	r2, #1
 81015ee:	2101      	movs	r1, #1
 81015f0:	4802      	ldr	r0, [pc, #8]	; (81015fc <reset_Enable_Power+0x14>)
 81015f2:	f003 faef 	bl	8104bd4 <HAL_GPIO_WritePin>
}
 81015f6:	bf00      	nop
 81015f8:	bd80      	pop	{r7, pc}
 81015fa:	bf00      	nop
 81015fc:	58020c00 	.word	0x58020c00

08101600 <get_Homing_X>:

int get_Homing_X(void){
 8101600:	b580      	push	{r7, lr}
 8101602:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_X_GPIO_Port, Homing_X_Pin) == GPIO_PIN_RESET;
 8101604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101608:	4805      	ldr	r0, [pc, #20]	; (8101620 <get_Homing_X+0x20>)
 810160a:	f003 facb 	bl	8104ba4 <HAL_GPIO_ReadPin>
 810160e:	4603      	mov	r3, r0
 8101610:	2b00      	cmp	r3, #0
 8101612:	bf0c      	ite	eq
 8101614:	2301      	moveq	r3, #1
 8101616:	2300      	movne	r3, #0
 8101618:	b2db      	uxtb	r3, r3
}
 810161a:	4618      	mov	r0, r3
 810161c:	bd80      	pop	{r7, pc}
 810161e:	bf00      	nop
 8101620:	58021000 	.word	0x58021000

08101624 <get_Homing_Z>:
int get_Homing_Z(void){
 8101624:	b580      	push	{r7, lr}
 8101626:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_Z_GPIO_Port, Homing_Z_Pin) == GPIO_PIN_RESET;
 8101628:	2104      	movs	r1, #4
 810162a:	4805      	ldr	r0, [pc, #20]	; (8101640 <get_Homing_Z+0x1c>)
 810162c:	f003 faba 	bl	8104ba4 <HAL_GPIO_ReadPin>
 8101630:	4603      	mov	r3, r0
 8101632:	2b00      	cmp	r3, #0
 8101634:	bf0c      	ite	eq
 8101636:	2301      	moveq	r3, #1
 8101638:	2300      	movne	r3, #0
 810163a:	b2db      	uxtb	r3, r3
}
 810163c:	4618      	mov	r0, r3
 810163e:	bd80      	pop	{r7, pc}
 8101640:	58020400 	.word	0x58020400

08101644 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8101644:	b480      	push	{r7}
 8101646:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101648:	f3bf 8f4f 	dsb	sy
}
 810164c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 810164e:	4b06      	ldr	r3, [pc, #24]	; (8101668 <__NVIC_SystemReset+0x24>)
 8101650:	68db      	ldr	r3, [r3, #12]
 8101652:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8101656:	4904      	ldr	r1, [pc, #16]	; (8101668 <__NVIC_SystemReset+0x24>)
 8101658:	4b04      	ldr	r3, [pc, #16]	; (810166c <__NVIC_SystemReset+0x28>)
 810165a:	4313      	orrs	r3, r2
 810165c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 810165e:	f3bf 8f4f 	dsb	sy
}
 8101662:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8101664:	bf00      	nop
 8101666:	e7fd      	b.n	8101664 <__NVIC_SystemReset+0x20>
 8101668:	e000ed00 	.word	0xe000ed00
 810166c:	05fa0004 	.word	0x05fa0004

08101670 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8101670:	b580      	push	{r7, lr}
 8101672:	b082      	sub	sp, #8
 8101674:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101676:	4b7c      	ldr	r3, [pc, #496]	; (8101868 <main+0x1f8>)
 8101678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810167c:	4a7a      	ldr	r2, [pc, #488]	; (8101868 <main+0x1f8>)
 810167e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101686:	4b78      	ldr	r3, [pc, #480]	; (8101868 <main+0x1f8>)
 8101688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101690:	603b      	str	r3, [r7, #0]
 8101692:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101694:	2001      	movs	r0, #1
 8101696:	f003 fab7 	bl	8104c08 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810169a:	f003 fb65 	bl	8104d68 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810169e:	2201      	movs	r2, #1
 81016a0:	2102      	movs	r1, #2
 81016a2:	2000      	movs	r0, #0
 81016a4:	f003 fae6 	bl	8104c74 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016a8:	4b70      	ldr	r3, [pc, #448]	; (810186c <main+0x1fc>)
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	091b      	lsrs	r3, r3, #4
 81016ae:	f003 030f 	and.w	r3, r3, #15
 81016b2:	2b07      	cmp	r3, #7
 81016b4:	d108      	bne.n	81016c8 <main+0x58>
 81016b6:	4b6e      	ldr	r3, [pc, #440]	; (8101870 <main+0x200>)
 81016b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016bc:	4a6c      	ldr	r2, [pc, #432]	; (8101870 <main+0x200>)
 81016be:	f043 0301 	orr.w	r3, r3, #1
 81016c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016c6:	e007      	b.n	81016d8 <main+0x68>
 81016c8:	4b69      	ldr	r3, [pc, #420]	; (8101870 <main+0x200>)
 81016ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016ce:	4a68      	ldr	r2, [pc, #416]	; (8101870 <main+0x200>)
 81016d0:	f043 0301 	orr.w	r3, r3, #1
 81016d4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 81016d8:	f001 f9d2 	bl	8102a80 <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 81016dc:	f7ff fdcc 	bl	8101278 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 81016e0:	f001 f86a 	bl	81027b8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	MX_ADC1_Init();
 81016e4:	f7ff fcb4 	bl	8101050 <MX_ADC1_Init>
	MX_TIM2_Init();
 81016e8:	f000 fcba 	bl	8102060 <MX_TIM2_Init>
	MX_TIM3_Init();
 81016ec:	f000 fd1c 	bl	8102128 <MX_TIM3_Init>
	MX_TIM4_Init();
 81016f0:	f000 fd70 	bl	81021d4 <MX_TIM4_Init>
	MX_TIM13_Init();
 81016f4:	f000 fdc4 	bl	8102280 <MX_TIM13_Init>
	MX_TIM14_Init();
 81016f8:	f000 fe10 	bl	810231c <MX_TIM14_Init>
	initMotors();
 81016fc:	f000 f8d4 	bl	81018a8 <initMotors>
	set_Enable_Power();
 8101700:	f7ff ff66 	bl	81015d0 <set_Enable_Power>
	start_PWM();
 8101704:	f000 ffe2 	bl	81026cc <start_PWM>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		reset_Valve();
 8101708:	f7ff ff3e 	bl	8101588 <reset_Valve>
		set_Slide_Servo(0.0);
 810170c:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8101874 <main+0x204>
 8101710:	f001 f824 	bl	810275c <set_Slide_Servo>
		set_Rotate_Servo(0.45);
 8101714:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8101878 <main+0x208>
 8101718:	f000 fff2 	bl	8102700 <set_Rotate_Servo>
		HomeMotors(1, 1);
 810171c:	2101      	movs	r1, #1
 810171e:	2001      	movs	r0, #1
 8101720:	f000 f8ed 	bl	81018fe <HomeMotors>
		HAL_Delay(2000);
 8101724:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8101728:	f001 fa5e 	bl	8102be8 <HAL_Delay>
		MoveToPos(46.67, 18);
 810172c:	2112      	movs	r1, #18
 810172e:	202e      	movs	r0, #46	; 0x2e
 8101730:	f000 f8c2 	bl	81018b8 <MoveToPos>
		MoveToPos(46.67, 0);
 8101734:	2100      	movs	r1, #0
 8101736:	202e      	movs	r0, #46	; 0x2e
 8101738:	f000 f8be 	bl	81018b8 <MoveToPos>
		HAL_Delay(2000);
 810173c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8101740:	f001 fa52 	bl	8102be8 <HAL_Delay>
		set_Pump();
 8101744:	f7ff ff2c 	bl	81015a0 <set_Pump>
		HAL_Delay(4000);
 8101748:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 810174c:	f001 fa4c 	bl	8102be8 <HAL_Delay>
		set_Valve();
 8101750:	f7ff ff0e 	bl	8101570 <set_Valve>
		while(GetVAC() < 2000){
 8101754:	bf00      	nop
 8101756:	f7ff fd63 	bl	8101220 <GetVAC>
 810175a:	4603      	mov	r3, r0
 810175c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8101760:	d3f9      	bcc.n	8101756 <main+0xe6>

		}
//		reset_Pump();
		MoveToPos(46.67, 18);
 8101762:	2112      	movs	r1, #18
 8101764:	202e      	movs	r0, #46	; 0x2e
 8101766:	f000 f8a7 	bl	81018b8 <MoveToPos>
		set_Rotate_Servo(0.0);
 810176a:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8101874 <main+0x204>
 810176e:	f000 ffc7 	bl	8102700 <set_Rotate_Servo>
		HAL_Delay(1000);
 8101772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101776:	f001 fa37 	bl	8102be8 <HAL_Delay>
		reset_Valve();
 810177a:	f7ff ff05 	bl	8101588 <reset_Valve>
		reset_Pump();
 810177e:	f7ff ff1b 	bl	81015b8 <reset_Pump>
		HAL_Delay(1000);
 8101782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101786:	f001 fa2f 	bl	8102be8 <HAL_Delay>
		set_Rotate_Servo(0.45);
 810178a:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8101878 <main+0x208>
 810178e:	f000 ffb7 	bl	8102700 <set_Rotate_Servo>
		HAL_Delay(1000);
 8101792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101796:	f001 fa27 	bl	8102be8 <HAL_Delay>
		float i = 0.0;
 810179a:	f04f 0300 	mov.w	r3, #0
 810179e:	607b      	str	r3, [r7, #4]
		for(i = 0; i<1; i+=0.1){
 81017a0:	f04f 0300 	mov.w	r3, #0
 81017a4:	607b      	str	r3, [r7, #4]
 81017a6:	e04e      	b.n	8101846 <main+0x1d6>
			MoveToPos(46.67, 18);
 81017a8:	2112      	movs	r1, #18
 81017aa:	202e      	movs	r0, #46	; 0x2e
 81017ac:	f000 f884 	bl	81018b8 <MoveToPos>
			MoveToPos(46.67, 0);
 81017b0:	2100      	movs	r1, #0
 81017b2:	202e      	movs	r0, #46	; 0x2e
 81017b4:	f000 f880 	bl	81018b8 <MoveToPos>
			HAL_Delay(2000);
 81017b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 81017bc:	f001 fa14 	bl	8102be8 <HAL_Delay>
			set_Pump();
 81017c0:	f7ff feee 	bl	81015a0 <set_Pump>
			HAL_Delay(4000);
 81017c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 81017c8:	f001 fa0e 	bl	8102be8 <HAL_Delay>
			set_Valve();
 81017cc:	f7ff fed0 	bl	8101570 <set_Valve>
			while(GetVAC() < 2000){
 81017d0:	bf00      	nop
 81017d2:	f7ff fd25 	bl	8101220 <GetVAC>
 81017d6:	4603      	mov	r3, r0
 81017d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81017dc:	d3f9      	bcc.n	81017d2 <main+0x162>

			}
//			reset_Pump();
			MoveToPos(46.67, 18);
 81017de:	2112      	movs	r1, #18
 81017e0:	202e      	movs	r0, #46	; 0x2e
 81017e2:	f000 f869 	bl	81018b8 <MoveToPos>
			set_Rotate_Servo(0.0);
 81017e6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8101874 <main+0x204>
 81017ea:	f000 ff89 	bl	8102700 <set_Rotate_Servo>
			HAL_Delay(1000);
 81017ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81017f2:	f001 f9f9 	bl	8102be8 <HAL_Delay>
			reset_Valve();
 81017f6:	f7ff fec7 	bl	8101588 <reset_Valve>
			reset_Pump();
 81017fa:	f7ff fedd 	bl	81015b8 <reset_Pump>
			HAL_Delay(1000);
 81017fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101802:	f001 f9f1 	bl	8102be8 <HAL_Delay>
			set_Rotate_Servo(0.45);
 8101806:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8101878 <main+0x208>
 810180a:	f000 ff79 	bl	8102700 <set_Rotate_Servo>
			HAL_Delay(1000);
 810180e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101812:	f001 f9e9 	bl	8102be8 <HAL_Delay>
			set_Slide_Servo(i);
 8101816:	ed97 0a01 	vldr	s0, [r7, #4]
 810181a:	f000 ff9f 	bl	810275c <set_Slide_Servo>
			HAL_Delay(3000);
 810181e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8101822:	f001 f9e1 	bl	8102be8 <HAL_Delay>
		for(i = 0; i<1; i+=0.1){
 8101826:	6878      	ldr	r0, [r7, #4]
 8101828:	f7fe ff0e 	bl	8100648 <__aeabi_f2d>
 810182c:	a30c      	add	r3, pc, #48	; (adr r3, 8101860 <main+0x1f0>)
 810182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101832:	f7fe fdab 	bl	810038c <__adddf3>
 8101836:	4602      	mov	r2, r0
 8101838:	460b      	mov	r3, r1
 810183a:	4610      	mov	r0, r2
 810183c:	4619      	mov	r1, r3
 810183e:	f7ff fa1d 	bl	8100c7c <__aeabi_d2f>
 8101842:	4603      	mov	r3, r0
 8101844:	607b      	str	r3, [r7, #4]
 8101846:	edd7 7a01 	vldr	s15, [r7, #4]
 810184a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810184e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101856:	d4a7      	bmi.n	81017a8 <main+0x138>
		}
		while(1){
 8101858:	e7fe      	b.n	8101858 <main+0x1e8>
 810185a:	bf00      	nop
 810185c:	f3af 8000 	nop.w
 8101860:	9999999a 	.word	0x9999999a
 8101864:	3fb99999 	.word	0x3fb99999
 8101868:	58024400 	.word	0x58024400
 810186c:	e000ed00 	.word	0xe000ed00
 8101870:	58026400 	.word	0x58026400
 8101874:	00000000 	.word	0x00000000
 8101878:	3ee66666 	.word	0x3ee66666

0810187c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 810187c:	b580      	push	{r7, lr}
 810187e:	b084      	sub	sp, #16
 8101880:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101882:	b672      	cpsid	i
}
 8101884:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	reset_Enable_Power();
 8101886:	f7ff feaf 	bl	81015e8 <reset_Enable_Power>

	uint8_t send[16];
	sprintf(send, "ERROR, resetting");
 810188a:	463b      	mov	r3, r7
 810188c:	4905      	ldr	r1, [pc, #20]	; (81018a4 <Error_Handler+0x28>)
 810188e:	4618      	mov	r0, r3
 8101890:	f007 ff56 	bl	8109740 <siprintf>
	ST_LINK_WRITE(send, 16);
 8101894:	463b      	mov	r3, r7
 8101896:	2110      	movs	r1, #16
 8101898:	4618      	mov	r0, r3
 810189a:	f001 f8b3 	bl	8102a04 <ST_LINK_WRITE>
	NVIC_SystemReset();
 810189e:	f7ff fed1 	bl	8101644 <__NVIC_SystemReset>
 81018a2:	bf00      	nop
 81018a4:	0810a05c 	.word	0x0810a05c

081018a8 <initMotors>:
 *  Created on: Jun 20, 2022
 *      Author: Pascal
 */
#include "motor_master.h"

void initMotors(){
 81018a8:	b580      	push	{r7, lr}
 81018aa:	af00      	add	r7, sp, #0
	initMotorX();
 81018ac:	f000 f842 	bl	8101934 <initMotorX>
	initMotorZ();
 81018b0:	f000 f9dc 	bl	8101c6c <initMotorZ>
}
 81018b4:	bf00      	nop
 81018b6:	bd80      	pop	{r7, pc}

081018b8 <MoveToPos>:

uint8_t MoveToPos(int16_t posX, int16_t posZ){
 81018b8:	b580      	push	{r7, lr}
 81018ba:	b082      	sub	sp, #8
 81018bc:	af00      	add	r7, sp, #0
 81018be:	4603      	mov	r3, r0
 81018c0:	460a      	mov	r2, r1
 81018c2:	80fb      	strh	r3, [r7, #6]
 81018c4:	4613      	mov	r3, r2
 81018c6:	80bb      	strh	r3, [r7, #4]
	moveToPosX(posX);
 81018c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81018cc:	4618      	mov	r0, r3
 81018ce:	f7fe fea9 	bl	8100624 <__aeabi_i2d>
 81018d2:	4602      	mov	r2, r0
 81018d4:	460b      	mov	r3, r1
 81018d6:	ec43 2b10 	vmov	d0, r2, r3
 81018da:	f000 f891 	bl	8101a00 <moveToPosX>
	moveToPosZ(posZ);
 81018de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 81018e2:	4618      	mov	r0, r3
 81018e4:	f7fe fe9e 	bl	8100624 <__aeabi_i2d>
 81018e8:	4602      	mov	r2, r0
 81018ea:	460b      	mov	r3, r1
 81018ec:	ec43 2b10 	vmov	d0, r2, r3
 81018f0:	f000 fa1e 	bl	8101d30 <moveToPosZ>
	return 1;
 81018f4:	2301      	movs	r3, #1
}
 81018f6:	4618      	mov	r0, r3
 81018f8:	3708      	adds	r7, #8
 81018fa:	46bd      	mov	sp, r7
 81018fc:	bd80      	pop	{r7, pc}

081018fe <HomeMotors>:

uint8_t HomeMotors(uint8_t homeX, uint8_t homeZ){
 81018fe:	b580      	push	{r7, lr}
 8101900:	b082      	sub	sp, #8
 8101902:	af00      	add	r7, sp, #0
 8101904:	4603      	mov	r3, r0
 8101906:	460a      	mov	r2, r1
 8101908:	71fb      	strb	r3, [r7, #7]
 810190a:	4613      	mov	r3, r2
 810190c:	71bb      	strb	r3, [r7, #6]
	if(homeZ){
 810190e:	79bb      	ldrb	r3, [r7, #6]
 8101910:	2b00      	cmp	r3, #0
 8101912:	d001      	beq.n	8101918 <HomeMotors+0x1a>
		homeMotorZ();
 8101914:	f000 f9bc 	bl	8101c90 <homeMotorZ>
	}
	HAL_Delay(1000);
 8101918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810191c:	f001 f964 	bl	8102be8 <HAL_Delay>
	if(homeX){
 8101920:	79fb      	ldrb	r3, [r7, #7]
 8101922:	2b00      	cmp	r3, #0
 8101924:	d001      	beq.n	810192a <HomeMotors+0x2c>
			homeMotorX();
 8101926:	f000 f817 	bl	8101958 <homeMotorX>
		}
	return 1;
 810192a:	2301      	movs	r3, #1
}
 810192c:	4618      	mov	r0, r3
 810192e:	3708      	adds	r7, #8
 8101930:	46bd      	mov	sp, r7
 8101932:	bd80      	pop	{r7, pc}

08101934 <initMotorX>:
double position_mm_X;

int8_t i_X = 0;
uint8_t once_X = 1;

void initMotorX(){
 8101934:	b580      	push	{r7, lr}
 8101936:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8101938:	2108      	movs	r1, #8
 810193a:	4804      	ldr	r0, [pc, #16]	; (810194c <initMotorX+0x18>)
 810193c:	f005 fe34 	bl	81075a8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8101940:	213c      	movs	r1, #60	; 0x3c
 8101942:	4803      	ldr	r0, [pc, #12]	; (8101950 <initMotorX+0x1c>)
 8101944:	f005 ffe4 	bl	8107910 <HAL_TIM_Encoder_Start_IT>
}
 8101948:	bf00      	nop
 810194a:	bd80      	pop	{r7, pc}
 810194c:	10000124 	.word	0x10000124
 8101950:	10000170 	.word	0x10000170
 8101954:	00000000 	.word	0x00000000

08101958 <homeMotorX>:

uint8_t homeMotorX(){
 8101958:	b580      	push	{r7, lr}
 810195a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 140);
 810195c:	4b20      	ldr	r3, [pc, #128]	; (81019e0 <homeMotorX+0x88>)
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	228c      	movs	r2, #140	; 0x8c
 8101962:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 8101964:	2201      	movs	r2, #1
 8101966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810196a:	481e      	ldr	r0, [pc, #120]	; (81019e4 <homeMotorX+0x8c>)
 810196c:	f003 f932 	bl	8104bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 8101970:	2201      	movs	r2, #1
 8101972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101976:	481c      	ldr	r0, [pc, #112]	; (81019e8 <homeMotorX+0x90>)
 8101978:	f003 f92c 	bl	8104bd4 <HAL_GPIO_WritePin>

	while(!get_Homing_X()){
 810197c:	bf00      	nop
 810197e:	f7ff fe3f 	bl	8101600 <get_Homing_X>
 8101982:	4603      	mov	r3, r0
 8101984:	2b00      	cmp	r3, #0
 8101986:	d0fa      	beq.n	810197e <homeMotorX+0x26>

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);
 8101988:	4b15      	ldr	r3, [pc, #84]	; (81019e0 <homeMotorX+0x88>)
 810198a:	681b      	ldr	r3, [r3, #0]
 810198c:	2200      	movs	r2, #0
 810198e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 8101990:	2200      	movs	r2, #0
 8101992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101996:	4814      	ldr	r0, [pc, #80]	; (81019e8 <homeMotorX+0x90>)
 8101998:	f003 f91c 	bl	8104bd4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 810199c:	20c8      	movs	r0, #200	; 0xc8
 810199e:	f001 f923 	bl	8102be8 <HAL_Delay>
	position_mm_X = 0.0;
 81019a2:	4912      	ldr	r1, [pc, #72]	; (81019ec <homeMotorX+0x94>)
 81019a4:	f04f 0200 	mov.w	r2, #0
 81019a8:	f04f 0300 	mov.w	r3, #0
 81019ac:	e9c1 2300 	strd	r2, r3, [r1]
	counterX = 0;
 81019b0:	4b0f      	ldr	r3, [pc, #60]	; (81019f0 <homeMotorX+0x98>)
 81019b2:	2200      	movs	r2, #0
 81019b4:	601a      	str	r2, [r3, #0]
	i_X = 0;
 81019b6:	4b0f      	ldr	r3, [pc, #60]	; (81019f4 <homeMotorX+0x9c>)
 81019b8:	2200      	movs	r2, #0
 81019ba:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 81019bc:	4b0e      	ldr	r3, [pc, #56]	; (81019f8 <homeMotorX+0xa0>)
 81019be:	681b      	ldr	r3, [r3, #0]
 81019c0:	2200      	movs	r2, #0
 81019c2:	625a      	str	r2, [r3, #36]	; 0x24
	moveToPosX(10);
 81019c4:	ed9f 0b04 	vldr	d0, [pc, #16]	; 81019d8 <homeMotorX+0x80>
 81019c8:	f000 f81a 	bl	8101a00 <moveToPosX>
	return 1;
 81019cc:	2301      	movs	r3, #1
}
 81019ce:	4618      	mov	r0, r3
 81019d0:	bd80      	pop	{r7, pc}
 81019d2:	bf00      	nop
 81019d4:	f3af 8000 	nop.w
 81019d8:	00000000 	.word	0x00000000
 81019dc:	40240000 	.word	0x40240000
 81019e0:	10000124 	.word	0x10000124
 81019e4:	58021800 	.word	0x58021800
 81019e8:	58020c00 	.word	0x58020c00
 81019ec:	10000100 	.word	0x10000100
 81019f0:	100000fc 	.word	0x100000fc
 81019f4:	10000108 	.word	0x10000108
 81019f8:	10000170 	.word	0x10000170
 81019fc:	00000000 	.word	0x00000000

08101a00 <moveToPosX>:

uint8_t moveToPosX(double Xpos){
 8101a00:	b5b0      	push	{r4, r5, r7, lr}
 8101a02:	b084      	sub	sp, #16
 8101a04:	af00      	add	r7, sp, #0
 8101a06:	ed87 0b00 	vstr	d0, [r7]
	counterX = __HAL_TIM_GET_COUNTER(&htim3);
 8101a0a:	4b8f      	ldr	r3, [pc, #572]	; (8101c48 <moveToPosX+0x248>)
 8101a0c:	681b      	ldr	r3, [r3, #0]
 8101a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101a10:	461a      	mov	r2, r3
 8101a12:	4b8e      	ldr	r3, [pc, #568]	; (8101c4c <moveToPosX+0x24c>)
 8101a14:	601a      	str	r2, [r3, #0]
	position_mm_X = (double) ((counterX / 3855.0)+(i_X*17));
 8101a16:	4b8d      	ldr	r3, [pc, #564]	; (8101c4c <moveToPosX+0x24c>)
 8101a18:	681b      	ldr	r3, [r3, #0]
 8101a1a:	4618      	mov	r0, r3
 8101a1c:	f7fe fe02 	bl	8100624 <__aeabi_i2d>
 8101a20:	a387      	add	r3, pc, #540	; (adr r3, 8101c40 <moveToPosX+0x240>)
 8101a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a26:	f7fe ff91 	bl	810094c <__aeabi_ddiv>
 8101a2a:	4602      	mov	r2, r0
 8101a2c:	460b      	mov	r3, r1
 8101a2e:	4614      	mov	r4, r2
 8101a30:	461d      	mov	r5, r3
 8101a32:	4b87      	ldr	r3, [pc, #540]	; (8101c50 <moveToPosX+0x250>)
 8101a34:	f993 3000 	ldrsb.w	r3, [r3]
 8101a38:	461a      	mov	r2, r3
 8101a3a:	4613      	mov	r3, r2
 8101a3c:	011b      	lsls	r3, r3, #4
 8101a3e:	4413      	add	r3, r2
 8101a40:	4618      	mov	r0, r3
 8101a42:	f7fe fdef 	bl	8100624 <__aeabi_i2d>
 8101a46:	4602      	mov	r2, r0
 8101a48:	460b      	mov	r3, r1
 8101a4a:	4620      	mov	r0, r4
 8101a4c:	4629      	mov	r1, r5
 8101a4e:	f7fe fc9d 	bl	810038c <__adddf3>
 8101a52:	4602      	mov	r2, r0
 8101a54:	460b      	mov	r3, r1
 8101a56:	497f      	ldr	r1, [pc, #508]	; (8101c54 <moveToPosX+0x254>)
 8101a58:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = Xpos - position_mm_X;
 8101a5c:	4b7d      	ldr	r3, [pc, #500]	; (8101c54 <moveToPosX+0x254>)
 8101a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101a66:	f7fe fc8f 	bl	8100388 <__aeabi_dsub>
 8101a6a:	4602      	mov	r2, r0
 8101a6c:	460b      	mov	r3, r1
 8101a6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 140);
 8101a72:	4b79      	ldr	r3, [pc, #484]	; (8101c58 <moveToPosX+0x258>)
 8101a74:	681b      	ldr	r3, [r3, #0]
 8101a76:	228c      	movs	r2, #140	; 0x8c
 8101a78:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 8101a7a:	2201      	movs	r2, #1
 8101a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101a80:	4876      	ldr	r0, [pc, #472]	; (8101c5c <moveToPosX+0x25c>)
 8101a82:	f003 f8a7 	bl	8104bd4 <HAL_GPIO_WritePin>
	while(abs(delta)>2){
 8101a86:	e0c1      	b.n	8101c0c <moveToPosX+0x20c>
		if(delta > 0){
 8101a88:	f04f 0200 	mov.w	r2, #0
 8101a8c:	f04f 0300 	mov.w	r3, #0
 8101a90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101a94:	f7ff f8c0 	bl	8100c18 <__aeabi_dcmpgt>
 8101a98:	4603      	mov	r3, r0
 8101a9a:	2b00      	cmp	r3, #0
 8101a9c:	d006      	beq.n	8101aac <moveToPosX+0xac>
			HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 8101a9e:	2200      	movs	r2, #0
 8101aa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8101aa4:	486e      	ldr	r0, [pc, #440]	; (8101c60 <moveToPosX+0x260>)
 8101aa6:	f003 f895 	bl	8104bd4 <HAL_GPIO_WritePin>
 8101aaa:	e011      	b.n	8101ad0 <moveToPosX+0xd0>
		}
		else if(delta < 0){
 8101aac:	f04f 0200 	mov.w	r2, #0
 8101ab0:	f04f 0300 	mov.w	r3, #0
 8101ab4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101ab8:	f7ff f890 	bl	8100bdc <__aeabi_dcmplt>
 8101abc:	4603      	mov	r3, r0
 8101abe:	2b00      	cmp	r3, #0
 8101ac0:	d100      	bne.n	8101ac4 <moveToPosX+0xc4>
			HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
		}else{
			break;
 8101ac2:	e0ae      	b.n	8101c22 <moveToPosX+0x222>
			HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 8101ac4:	2201      	movs	r2, #1
 8101ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8101aca:	4865      	ldr	r0, [pc, #404]	; (8101c60 <moveToPosX+0x260>)
 8101acc:	f003 f882 	bl	8104bd4 <HAL_GPIO_WritePin>
		}
		counterX = __HAL_TIM_GET_COUNTER(&htim3);
 8101ad0:	4b5d      	ldr	r3, [pc, #372]	; (8101c48 <moveToPosX+0x248>)
 8101ad2:	681b      	ldr	r3, [r3, #0]
 8101ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101ad6:	461a      	mov	r2, r3
 8101ad8:	4b5c      	ldr	r3, [pc, #368]	; (8101c4c <moveToPosX+0x24c>)
 8101ada:	601a      	str	r2, [r3, #0]
		if(counterX > 61680 && delta>0 && once_X){
 8101adc:	4b5b      	ldr	r3, [pc, #364]	; (8101c4c <moveToPosX+0x24c>)
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101ae4:	4293      	cmp	r3, r2
 8101ae6:	dd12      	ble.n	8101b0e <moveToPosX+0x10e>
 8101ae8:	f04f 0200 	mov.w	r2, #0
 8101aec:	f04f 0300 	mov.w	r3, #0
 8101af0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101af4:	f7ff f890 	bl	8100c18 <__aeabi_dcmpgt>
 8101af8:	4603      	mov	r3, r0
 8101afa:	2b00      	cmp	r3, #0
 8101afc:	d007      	beq.n	8101b0e <moveToPosX+0x10e>
 8101afe:	4b59      	ldr	r3, [pc, #356]	; (8101c64 <moveToPosX+0x264>)
 8101b00:	781b      	ldrb	r3, [r3, #0]
 8101b02:	2b00      	cmp	r3, #0
 8101b04:	d003      	beq.n	8101b0e <moveToPosX+0x10e>
			once_X = 0;
 8101b06:	4b57      	ldr	r3, [pc, #348]	; (8101c64 <moveToPosX+0x264>)
 8101b08:	2200      	movs	r2, #0
 8101b0a:	701a      	strb	r2, [r3, #0]
 8101b0c:	e057      	b.n	8101bbe <moveToPosX+0x1be>
		}else if (counterX < 3855 && delta>0 && !once_X){
 8101b0e:	4b4f      	ldr	r3, [pc, #316]	; (8101c4c <moveToPosX+0x24c>)
 8101b10:	681b      	ldr	r3, [r3, #0]
 8101b12:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101b16:	4293      	cmp	r3, r2
 8101b18:	dc1b      	bgt.n	8101b52 <moveToPosX+0x152>
 8101b1a:	f04f 0200 	mov.w	r2, #0
 8101b1e:	f04f 0300 	mov.w	r3, #0
 8101b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101b26:	f7ff f877 	bl	8100c18 <__aeabi_dcmpgt>
 8101b2a:	4603      	mov	r3, r0
 8101b2c:	2b00      	cmp	r3, #0
 8101b2e:	d010      	beq.n	8101b52 <moveToPosX+0x152>
 8101b30:	4b4c      	ldr	r3, [pc, #304]	; (8101c64 <moveToPosX+0x264>)
 8101b32:	781b      	ldrb	r3, [r3, #0]
 8101b34:	2b00      	cmp	r3, #0
 8101b36:	d10c      	bne.n	8101b52 <moveToPosX+0x152>
			once_X = 1;
 8101b38:	4b4a      	ldr	r3, [pc, #296]	; (8101c64 <moveToPosX+0x264>)
 8101b3a:	2201      	movs	r2, #1
 8101b3c:	701a      	strb	r2, [r3, #0]
			i_X += 1;
 8101b3e:	4b44      	ldr	r3, [pc, #272]	; (8101c50 <moveToPosX+0x250>)
 8101b40:	f993 3000 	ldrsb.w	r3, [r3]
 8101b44:	b2db      	uxtb	r3, r3
 8101b46:	3301      	adds	r3, #1
 8101b48:	b2db      	uxtb	r3, r3
 8101b4a:	b25a      	sxtb	r2, r3
 8101b4c:	4b40      	ldr	r3, [pc, #256]	; (8101c50 <moveToPosX+0x250>)
 8101b4e:	701a      	strb	r2, [r3, #0]
 8101b50:	e035      	b.n	8101bbe <moveToPosX+0x1be>
		}else if (counterX < 3855 && delta<0){
 8101b52:	4b3e      	ldr	r3, [pc, #248]	; (8101c4c <moveToPosX+0x24c>)
 8101b54:	681b      	ldr	r3, [r3, #0]
 8101b56:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101b5a:	4293      	cmp	r3, r2
 8101b5c:	dc0e      	bgt.n	8101b7c <moveToPosX+0x17c>
 8101b5e:	f04f 0200 	mov.w	r2, #0
 8101b62:	f04f 0300 	mov.w	r3, #0
 8101b66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101b6a:	f7ff f837 	bl	8100bdc <__aeabi_dcmplt>
 8101b6e:	4603      	mov	r3, r0
 8101b70:	2b00      	cmp	r3, #0
 8101b72:	d003      	beq.n	8101b7c <moveToPosX+0x17c>
			once_X = 0;
 8101b74:	4b3b      	ldr	r3, [pc, #236]	; (8101c64 <moveToPosX+0x264>)
 8101b76:	2200      	movs	r2, #0
 8101b78:	701a      	strb	r2, [r3, #0]
 8101b7a:	e020      	b.n	8101bbe <moveToPosX+0x1be>
		}else if (counterX > 61680 && delta<0 && !once_X){
 8101b7c:	4b33      	ldr	r3, [pc, #204]	; (8101c4c <moveToPosX+0x24c>)
 8101b7e:	681b      	ldr	r3, [r3, #0]
 8101b80:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101b84:	4293      	cmp	r3, r2
 8101b86:	dd1a      	ble.n	8101bbe <moveToPosX+0x1be>
 8101b88:	f04f 0200 	mov.w	r2, #0
 8101b8c:	f04f 0300 	mov.w	r3, #0
 8101b90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101b94:	f7ff f822 	bl	8100bdc <__aeabi_dcmplt>
 8101b98:	4603      	mov	r3, r0
 8101b9a:	2b00      	cmp	r3, #0
 8101b9c:	d00f      	beq.n	8101bbe <moveToPosX+0x1be>
 8101b9e:	4b31      	ldr	r3, [pc, #196]	; (8101c64 <moveToPosX+0x264>)
 8101ba0:	781b      	ldrb	r3, [r3, #0]
 8101ba2:	2b00      	cmp	r3, #0
 8101ba4:	d10b      	bne.n	8101bbe <moveToPosX+0x1be>
			once_X = 1;
 8101ba6:	4b2f      	ldr	r3, [pc, #188]	; (8101c64 <moveToPosX+0x264>)
 8101ba8:	2201      	movs	r2, #1
 8101baa:	701a      	strb	r2, [r3, #0]
			i_X -= 1;
 8101bac:	4b28      	ldr	r3, [pc, #160]	; (8101c50 <moveToPosX+0x250>)
 8101bae:	f993 3000 	ldrsb.w	r3, [r3]
 8101bb2:	b2db      	uxtb	r3, r3
 8101bb4:	3b01      	subs	r3, #1
 8101bb6:	b2db      	uxtb	r3, r3
 8101bb8:	b25a      	sxtb	r2, r3
 8101bba:	4b25      	ldr	r3, [pc, #148]	; (8101c50 <moveToPosX+0x250>)
 8101bbc:	701a      	strb	r2, [r3, #0]
		}
		position_mm_X = (double) ((counterX / 3855)+(i_X*17));
 8101bbe:	4b23      	ldr	r3, [pc, #140]	; (8101c4c <moveToPosX+0x24c>)
 8101bc0:	681b      	ldr	r3, [r3, #0]
 8101bc2:	4a29      	ldr	r2, [pc, #164]	; (8101c68 <moveToPosX+0x268>)
 8101bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8101bc8:	441a      	add	r2, r3
 8101bca:	12d2      	asrs	r2, r2, #11
 8101bcc:	17db      	asrs	r3, r3, #31
 8101bce:	1ad2      	subs	r2, r2, r3
 8101bd0:	4b1f      	ldr	r3, [pc, #124]	; (8101c50 <moveToPosX+0x250>)
 8101bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8101bd6:	4619      	mov	r1, r3
 8101bd8:	460b      	mov	r3, r1
 8101bda:	011b      	lsls	r3, r3, #4
 8101bdc:	440b      	add	r3, r1
 8101bde:	4413      	add	r3, r2
 8101be0:	4618      	mov	r0, r3
 8101be2:	f7fe fd1f 	bl	8100624 <__aeabi_i2d>
 8101be6:	4602      	mov	r2, r0
 8101be8:	460b      	mov	r3, r1
 8101bea:	491a      	ldr	r1, [pc, #104]	; (8101c54 <moveToPosX+0x254>)
 8101bec:	e9c1 2300 	strd	r2, r3, [r1]
		delta = Xpos - position_mm_X;
 8101bf0:	4b18      	ldr	r3, [pc, #96]	; (8101c54 <moveToPosX+0x254>)
 8101bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101bfa:	f7fe fbc5 	bl	8100388 <__aeabi_dsub>
 8101bfe:	4602      	mov	r2, r0
 8101c00:	460b      	mov	r3, r1
 8101c02:	e9c7 2302 	strd	r2, r3, [r7, #8]
//		uint8_t send[30];
//		sprintf(send, "%ld \r\n %d \r\n", position_mm_X, i_X);
//		ST_LINK_WRITE(send, sizeof(send));
		HAL_Delay(50);
 8101c06:	2032      	movs	r0, #50	; 0x32
 8101c08:	f000 ffee 	bl	8102be8 <HAL_Delay>
	while(abs(delta)>2){
 8101c0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101c10:	f7ff f80c 	bl	8100c2c <__aeabi_d2iz>
 8101c14:	4603      	mov	r3, r0
 8101c16:	2b00      	cmp	r3, #0
 8101c18:	bfb8      	it	lt
 8101c1a:	425b      	neglt	r3, r3
 8101c1c:	2b02      	cmp	r3, #2
 8101c1e:	f73f af33 	bgt.w	8101a88 <moveToPosX+0x88>
		//		if(i == 200){
		//			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, y);
		//			i = 0;
		//		}
	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);
 8101c22:	4b0d      	ldr	r3, [pc, #52]	; (8101c58 <moveToPosX+0x258>)
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	2200      	movs	r2, #0
 8101c28:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 8101c2a:	2200      	movs	r2, #0
 8101c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101c30:	480a      	ldr	r0, [pc, #40]	; (8101c5c <moveToPosX+0x25c>)
 8101c32:	f002 ffcf 	bl	8104bd4 <HAL_GPIO_WritePin>
	return 1;
 8101c36:	2301      	movs	r3, #1
}
 8101c38:	4618      	mov	r0, r3
 8101c3a:	3710      	adds	r7, #16
 8101c3c:	46bd      	mov	sp, r7
 8101c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8101c40:	00000000 	.word	0x00000000
 8101c44:	40ae1e00 	.word	0x40ae1e00
 8101c48:	10000170 	.word	0x10000170
 8101c4c:	100000fc 	.word	0x100000fc
 8101c50:	10000108 	.word	0x10000108
 8101c54:	10000100 	.word	0x10000100
 8101c58:	10000124 	.word	0x10000124
 8101c5c:	58020c00 	.word	0x58020c00
 8101c60:	58021800 	.word	0x58021800
 8101c64:	10000008 	.word	0x10000008
 8101c68:	88008801 	.word	0x88008801

08101c6c <initMotorZ>:
double position_mm_Z;

uint8_t i_Z = 0;
uint8_t once_Z = 1;

void initMotorZ(){
 8101c6c:	b580      	push	{r7, lr}
 8101c6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8101c70:	210c      	movs	r1, #12
 8101c72:	4804      	ldr	r0, [pc, #16]	; (8101c84 <initMotorZ+0x18>)
 8101c74:	f005 fc98 	bl	81075a8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8101c78:	213c      	movs	r1, #60	; 0x3c
 8101c7a:	4803      	ldr	r0, [pc, #12]	; (8101c88 <initMotorZ+0x1c>)
 8101c7c:	f005 fe48 	bl	8107910 <HAL_TIM_Encoder_Start_IT>
}
 8101c80:	bf00      	nop
 8101c82:	bd80      	pop	{r7, pc}
 8101c84:	10000124 	.word	0x10000124
 8101c88:	100001bc 	.word	0x100001bc
 8101c8c:	00000000 	.word	0x00000000

08101c90 <homeMotorZ>:

uint8_t homeMotorZ(){
 8101c90:	b580      	push	{r7, lr}
 8101c92:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 125);
 8101c94:	4b1e      	ldr	r3, [pc, #120]	; (8101d10 <homeMotorZ+0x80>)
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	227d      	movs	r2, #125	; 0x7d
 8101c9a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_SET);
 8101c9c:	2201      	movs	r2, #1
 8101c9e:	2101      	movs	r1, #1
 8101ca0:	481c      	ldr	r0, [pc, #112]	; (8101d14 <homeMotorZ+0x84>)
 8101ca2:	f002 ff97 	bl	8104bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
 8101ca6:	2201      	movs	r2, #1
 8101ca8:	2101      	movs	r1, #1
 8101caa:	481b      	ldr	r0, [pc, #108]	; (8101d18 <homeMotorZ+0x88>)
 8101cac:	f002 ff92 	bl	8104bd4 <HAL_GPIO_WritePin>

	while(!get_Homing_Z()){
 8101cb0:	bf00      	nop
 8101cb2:	f7ff fcb7 	bl	8101624 <get_Homing_Z>
 8101cb6:	4603      	mov	r3, r0
 8101cb8:	2b00      	cmp	r3, #0
 8101cba:	d0fa      	beq.n	8101cb2 <homeMotorZ+0x22>

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 200);
 8101cbc:	4b14      	ldr	r3, [pc, #80]	; (8101d10 <homeMotorZ+0x80>)
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	22c8      	movs	r2, #200	; 0xc8
 8101cc2:	641a      	str	r2, [r3, #64]	; 0x40
//	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
	HAL_Delay(1000);
 8101cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101cc8:	f000 ff8e 	bl	8102be8 <HAL_Delay>
	position_mm_Z = 0.0;
 8101ccc:	4913      	ldr	r1, [pc, #76]	; (8101d1c <homeMotorZ+0x8c>)
 8101cce:	f04f 0200 	mov.w	r2, #0
 8101cd2:	f04f 0300 	mov.w	r3, #0
 8101cd6:	e9c1 2300 	strd	r2, r3, [r1]
	counterZ = 0;
 8101cda:	4b11      	ldr	r3, [pc, #68]	; (8101d20 <homeMotorZ+0x90>)
 8101cdc:	2200      	movs	r2, #0
 8101cde:	601a      	str	r2, [r3, #0]
	i_Z = 0;
 8101ce0:	4b10      	ldr	r3, [pc, #64]	; (8101d24 <homeMotorZ+0x94>)
 8101ce2:	2200      	movs	r2, #0
 8101ce4:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8101ce6:	4b10      	ldr	r3, [pc, #64]	; (8101d28 <homeMotorZ+0x98>)
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	2200      	movs	r2, #0
 8101cec:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(1000);
 8101cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101cf2:	f000 ff79 	bl	8102be8 <HAL_Delay>
	moveToPosZ(30);
 8101cf6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8101d08 <homeMotorZ+0x78>
 8101cfa:	f000 f819 	bl	8101d30 <moveToPosZ>
	return 1;
 8101cfe:	2301      	movs	r3, #1
}
 8101d00:	4618      	mov	r0, r3
 8101d02:	bd80      	pop	{r7, pc}
 8101d04:	f3af 8000 	nop.w
 8101d08:	00000000 	.word	0x00000000
 8101d0c:	403e0000 	.word	0x403e0000
 8101d10:	10000124 	.word	0x10000124
 8101d14:	58021000 	.word	0x58021000
 8101d18:	58020000 	.word	0x58020000
 8101d1c:	10000110 	.word	0x10000110
 8101d20:	1000010c 	.word	0x1000010c
 8101d24:	10000118 	.word	0x10000118
 8101d28:	100001bc 	.word	0x100001bc
 8101d2c:	00000000 	.word	0x00000000

08101d30 <moveToPosZ>:

uint8_t moveToPosZ(double Zpos){
 8101d30:	b5b0      	push	{r4, r5, r7, lr}
 8101d32:	b08e      	sub	sp, #56	; 0x38
 8101d34:	af02      	add	r7, sp, #8
 8101d36:	ed87 0b00 	vstr	d0, [r7]
	counterZ = __HAL_TIM_GET_COUNTER(&htim4);
 8101d3a:	4b97      	ldr	r3, [pc, #604]	; (8101f98 <moveToPosZ+0x268>)
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d40:	461a      	mov	r2, r3
 8101d42:	4b96      	ldr	r3, [pc, #600]	; (8101f9c <moveToPosZ+0x26c>)
 8101d44:	601a      	str	r2, [r3, #0]
	position_mm_Z = (double) ((counterZ / 3855)+(i_Z*17));
 8101d46:	4b95      	ldr	r3, [pc, #596]	; (8101f9c <moveToPosZ+0x26c>)
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	4a95      	ldr	r2, [pc, #596]	; (8101fa0 <moveToPosZ+0x270>)
 8101d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8101d50:	441a      	add	r2, r3
 8101d52:	12d2      	asrs	r2, r2, #11
 8101d54:	17db      	asrs	r3, r3, #31
 8101d56:	1ad2      	subs	r2, r2, r3
 8101d58:	4b92      	ldr	r3, [pc, #584]	; (8101fa4 <moveToPosZ+0x274>)
 8101d5a:	781b      	ldrb	r3, [r3, #0]
 8101d5c:	4619      	mov	r1, r3
 8101d5e:	460b      	mov	r3, r1
 8101d60:	011b      	lsls	r3, r3, #4
 8101d62:	440b      	add	r3, r1
 8101d64:	4413      	add	r3, r2
 8101d66:	4618      	mov	r0, r3
 8101d68:	f7fe fc5c 	bl	8100624 <__aeabi_i2d>
 8101d6c:	4602      	mov	r2, r0
 8101d6e:	460b      	mov	r3, r1
 8101d70:	498d      	ldr	r1, [pc, #564]	; (8101fa8 <moveToPosZ+0x278>)
 8101d72:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = Zpos - position_mm_Z;
 8101d76:	4b8c      	ldr	r3, [pc, #560]	; (8101fa8 <moveToPosZ+0x278>)
 8101d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101d80:	f7fe fb02 	bl	8100388 <__aeabi_dsub>
 8101d84:	4602      	mov	r2, r0
 8101d86:	460b      	mov	r3, r1
 8101d88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	while(abs(delta)>2){
 8101d8c:	e0e6      	b.n	8101f5c <moveToPosZ+0x22c>
		if(delta > 0){
 8101d8e:	f04f 0200 	mov.w	r2, #0
 8101d92:	f04f 0300 	mov.w	r3, #0
 8101d96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101d9a:	f7fe ff3d 	bl	8100c18 <__aeabi_dcmpgt>
 8101d9e:	4603      	mov	r3, r0
 8101da0:	2b00      	cmp	r3, #0
 8101da2:	d00f      	beq.n	8101dc4 <moveToPosZ+0x94>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 360);
 8101da4:	4b81      	ldr	r3, [pc, #516]	; (8101fac <moveToPosZ+0x27c>)
 8101da6:	681b      	ldr	r3, [r3, #0]
 8101da8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8101dac:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_RESET);
 8101dae:	2200      	movs	r2, #0
 8101db0:	2101      	movs	r1, #1
 8101db2:	487f      	ldr	r0, [pc, #508]	; (8101fb0 <moveToPosZ+0x280>)
 8101db4:	f002 ff0e 	bl	8104bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
 8101db8:	2201      	movs	r2, #1
 8101dba:	2101      	movs	r1, #1
 8101dbc:	487d      	ldr	r0, [pc, #500]	; (8101fb4 <moveToPosZ+0x284>)
 8101dbe:	f002 ff09 	bl	8104bd4 <HAL_GPIO_WritePin>
 8101dc2:	e019      	b.n	8101df8 <moveToPosZ+0xc8>
		}
		else if(delta < 0){
 8101dc4:	f04f 0200 	mov.w	r2, #0
 8101dc8:	f04f 0300 	mov.w	r3, #0
 8101dcc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101dd0:	f7fe ff04 	bl	8100bdc <__aeabi_dcmplt>
 8101dd4:	4603      	mov	r3, r0
 8101dd6:	2b00      	cmp	r3, #0
 8101dd8:	d100      	bne.n	8101ddc <moveToPosZ+0xac>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 125);
			HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
		}else{
			break;
 8101dda:	e0ca      	b.n	8101f72 <moveToPosZ+0x242>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 125);
 8101ddc:	4b73      	ldr	r3, [pc, #460]	; (8101fac <moveToPosZ+0x27c>)
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	227d      	movs	r2, #125	; 0x7d
 8101de2:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_SET);
 8101de4:	2201      	movs	r2, #1
 8101de6:	2101      	movs	r1, #1
 8101de8:	4871      	ldr	r0, [pc, #452]	; (8101fb0 <moveToPosZ+0x280>)
 8101dea:	f002 fef3 	bl	8104bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
 8101dee:	2201      	movs	r2, #1
 8101df0:	2101      	movs	r1, #1
 8101df2:	4870      	ldr	r0, [pc, #448]	; (8101fb4 <moveToPosZ+0x284>)
 8101df4:	f002 feee 	bl	8104bd4 <HAL_GPIO_WritePin>
		}
		counterZ = __HAL_TIM_GET_COUNTER(&htim4);
 8101df8:	4b67      	ldr	r3, [pc, #412]	; (8101f98 <moveToPosZ+0x268>)
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101dfe:	461a      	mov	r2, r3
 8101e00:	4b66      	ldr	r3, [pc, #408]	; (8101f9c <moveToPosZ+0x26c>)
 8101e02:	601a      	str	r2, [r3, #0]
		if(counterZ > 61680 && delta>0 && once_Z){
 8101e04:	4b65      	ldr	r3, [pc, #404]	; (8101f9c <moveToPosZ+0x26c>)
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101e0c:	4293      	cmp	r3, r2
 8101e0e:	dd12      	ble.n	8101e36 <moveToPosZ+0x106>
 8101e10:	f04f 0200 	mov.w	r2, #0
 8101e14:	f04f 0300 	mov.w	r3, #0
 8101e18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101e1c:	f7fe fefc 	bl	8100c18 <__aeabi_dcmpgt>
 8101e20:	4603      	mov	r3, r0
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	d007      	beq.n	8101e36 <moveToPosZ+0x106>
 8101e26:	4b64      	ldr	r3, [pc, #400]	; (8101fb8 <moveToPosZ+0x288>)
 8101e28:	781b      	ldrb	r3, [r3, #0]
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d003      	beq.n	8101e36 <moveToPosZ+0x106>
			once_Z = 0;
 8101e2e:	4b62      	ldr	r3, [pc, #392]	; (8101fb8 <moveToPosZ+0x288>)
 8101e30:	2200      	movs	r2, #0
 8101e32:	701a      	strb	r2, [r3, #0]
 8101e34:	e051      	b.n	8101eda <moveToPosZ+0x1aa>
		}else if (counterZ < 3855 && delta>0 && !once_Z){
 8101e36:	4b59      	ldr	r3, [pc, #356]	; (8101f9c <moveToPosZ+0x26c>)
 8101e38:	681b      	ldr	r3, [r3, #0]
 8101e3a:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101e3e:	4293      	cmp	r3, r2
 8101e40:	dc18      	bgt.n	8101e74 <moveToPosZ+0x144>
 8101e42:	f04f 0200 	mov.w	r2, #0
 8101e46:	f04f 0300 	mov.w	r3, #0
 8101e4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101e4e:	f7fe fee3 	bl	8100c18 <__aeabi_dcmpgt>
 8101e52:	4603      	mov	r3, r0
 8101e54:	2b00      	cmp	r3, #0
 8101e56:	d00d      	beq.n	8101e74 <moveToPosZ+0x144>
 8101e58:	4b57      	ldr	r3, [pc, #348]	; (8101fb8 <moveToPosZ+0x288>)
 8101e5a:	781b      	ldrb	r3, [r3, #0]
 8101e5c:	2b00      	cmp	r3, #0
 8101e5e:	d109      	bne.n	8101e74 <moveToPosZ+0x144>
			once_Z = 1;
 8101e60:	4b55      	ldr	r3, [pc, #340]	; (8101fb8 <moveToPosZ+0x288>)
 8101e62:	2201      	movs	r2, #1
 8101e64:	701a      	strb	r2, [r3, #0]
			i_Z += 1;
 8101e66:	4b4f      	ldr	r3, [pc, #316]	; (8101fa4 <moveToPosZ+0x274>)
 8101e68:	781b      	ldrb	r3, [r3, #0]
 8101e6a:	3301      	adds	r3, #1
 8101e6c:	b2da      	uxtb	r2, r3
 8101e6e:	4b4d      	ldr	r3, [pc, #308]	; (8101fa4 <moveToPosZ+0x274>)
 8101e70:	701a      	strb	r2, [r3, #0]
 8101e72:	e032      	b.n	8101eda <moveToPosZ+0x1aa>
		}else if (counterZ < 3855 && delta<0){
 8101e74:	4b49      	ldr	r3, [pc, #292]	; (8101f9c <moveToPosZ+0x26c>)
 8101e76:	681b      	ldr	r3, [r3, #0]
 8101e78:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101e7c:	4293      	cmp	r3, r2
 8101e7e:	dc0e      	bgt.n	8101e9e <moveToPosZ+0x16e>
 8101e80:	f04f 0200 	mov.w	r2, #0
 8101e84:	f04f 0300 	mov.w	r3, #0
 8101e88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101e8c:	f7fe fea6 	bl	8100bdc <__aeabi_dcmplt>
 8101e90:	4603      	mov	r3, r0
 8101e92:	2b00      	cmp	r3, #0
 8101e94:	d003      	beq.n	8101e9e <moveToPosZ+0x16e>
			once_Z = 0;
 8101e96:	4b48      	ldr	r3, [pc, #288]	; (8101fb8 <moveToPosZ+0x288>)
 8101e98:	2200      	movs	r2, #0
 8101e9a:	701a      	strb	r2, [r3, #0]
 8101e9c:	e01d      	b.n	8101eda <moveToPosZ+0x1aa>
		}else if (counterZ > 61680 && delta<0 && !once_Z){
 8101e9e:	4b3f      	ldr	r3, [pc, #252]	; (8101f9c <moveToPosZ+0x26c>)
 8101ea0:	681b      	ldr	r3, [r3, #0]
 8101ea2:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101ea6:	4293      	cmp	r3, r2
 8101ea8:	dd17      	ble.n	8101eda <moveToPosZ+0x1aa>
 8101eaa:	f04f 0200 	mov.w	r2, #0
 8101eae:	f04f 0300 	mov.w	r3, #0
 8101eb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101eb6:	f7fe fe91 	bl	8100bdc <__aeabi_dcmplt>
 8101eba:	4603      	mov	r3, r0
 8101ebc:	2b00      	cmp	r3, #0
 8101ebe:	d00c      	beq.n	8101eda <moveToPosZ+0x1aa>
 8101ec0:	4b3d      	ldr	r3, [pc, #244]	; (8101fb8 <moveToPosZ+0x288>)
 8101ec2:	781b      	ldrb	r3, [r3, #0]
 8101ec4:	2b00      	cmp	r3, #0
 8101ec6:	d108      	bne.n	8101eda <moveToPosZ+0x1aa>
			once_Z = 1;
 8101ec8:	4b3b      	ldr	r3, [pc, #236]	; (8101fb8 <moveToPosZ+0x288>)
 8101eca:	2201      	movs	r2, #1
 8101ecc:	701a      	strb	r2, [r3, #0]
			i_Z -= 1;
 8101ece:	4b35      	ldr	r3, [pc, #212]	; (8101fa4 <moveToPosZ+0x274>)
 8101ed0:	781b      	ldrb	r3, [r3, #0]
 8101ed2:	3b01      	subs	r3, #1
 8101ed4:	b2da      	uxtb	r2, r3
 8101ed6:	4b33      	ldr	r3, [pc, #204]	; (8101fa4 <moveToPosZ+0x274>)
 8101ed8:	701a      	strb	r2, [r3, #0]
		}
		position_mm_Z = (double) ((counterZ / 3855.0)+(i_Z*17));
 8101eda:	4b30      	ldr	r3, [pc, #192]	; (8101f9c <moveToPosZ+0x26c>)
 8101edc:	681b      	ldr	r3, [r3, #0]
 8101ede:	4618      	mov	r0, r3
 8101ee0:	f7fe fba0 	bl	8100624 <__aeabi_i2d>
 8101ee4:	a32a      	add	r3, pc, #168	; (adr r3, 8101f90 <moveToPosZ+0x260>)
 8101ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101eea:	f7fe fd2f 	bl	810094c <__aeabi_ddiv>
 8101eee:	4602      	mov	r2, r0
 8101ef0:	460b      	mov	r3, r1
 8101ef2:	4614      	mov	r4, r2
 8101ef4:	461d      	mov	r5, r3
 8101ef6:	4b2b      	ldr	r3, [pc, #172]	; (8101fa4 <moveToPosZ+0x274>)
 8101ef8:	781b      	ldrb	r3, [r3, #0]
 8101efa:	461a      	mov	r2, r3
 8101efc:	4613      	mov	r3, r2
 8101efe:	011b      	lsls	r3, r3, #4
 8101f00:	4413      	add	r3, r2
 8101f02:	4618      	mov	r0, r3
 8101f04:	f7fe fb8e 	bl	8100624 <__aeabi_i2d>
 8101f08:	4602      	mov	r2, r0
 8101f0a:	460b      	mov	r3, r1
 8101f0c:	4620      	mov	r0, r4
 8101f0e:	4629      	mov	r1, r5
 8101f10:	f7fe fa3c 	bl	810038c <__adddf3>
 8101f14:	4602      	mov	r2, r0
 8101f16:	460b      	mov	r3, r1
 8101f18:	4923      	ldr	r1, [pc, #140]	; (8101fa8 <moveToPosZ+0x278>)
 8101f1a:	e9c1 2300 	strd	r2, r3, [r1]
		delta = Zpos - position_mm_Z;
 8101f1e:	4b22      	ldr	r3, [pc, #136]	; (8101fa8 <moveToPosZ+0x278>)
 8101f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101f28:	f7fe fa2e 	bl	8100388 <__aeabi_dsub>
 8101f2c:	4602      	mov	r2, r0
 8101f2e:	460b      	mov	r3, r1
 8101f30:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		uint8_t send[30];
		sprintf(send, "%f \r\n %u \r\n", position_mm_Z, i_Z);
 8101f34:	4b1c      	ldr	r3, [pc, #112]	; (8101fa8 <moveToPosZ+0x278>)
 8101f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f3a:	491a      	ldr	r1, [pc, #104]	; (8101fa4 <moveToPosZ+0x274>)
 8101f3c:	7809      	ldrb	r1, [r1, #0]
 8101f3e:	f107 0008 	add.w	r0, r7, #8
 8101f42:	9100      	str	r1, [sp, #0]
 8101f44:	491d      	ldr	r1, [pc, #116]	; (8101fbc <moveToPosZ+0x28c>)
 8101f46:	f007 fbfb 	bl	8109740 <siprintf>
		ST_LINK_WRITE(send, sizeof(send));
 8101f4a:	f107 0308 	add.w	r3, r7, #8
 8101f4e:	211e      	movs	r1, #30
 8101f50:	4618      	mov	r0, r3
 8101f52:	f000 fd57 	bl	8102a04 <ST_LINK_WRITE>
		HAL_Delay(50);
 8101f56:	2032      	movs	r0, #50	; 0x32
 8101f58:	f000 fe46 	bl	8102be8 <HAL_Delay>
	while(abs(delta)>2){
 8101f5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101f60:	f7fe fe64 	bl	8100c2c <__aeabi_d2iz>
 8101f64:	4603      	mov	r3, r0
 8101f66:	2b00      	cmp	r3, #0
 8101f68:	bfb8      	it	lt
 8101f6a:	425b      	neglt	r3, r3
 8101f6c:	2b02      	cmp	r3, #2
 8101f6e:	f73f af0e 	bgt.w	8101d8e <moveToPosZ+0x5e>
		//		if(i == 200){
		//			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, y);
		//			i = 0;
		//		}
	}
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_RESET);
 8101f72:	2200      	movs	r2, #0
 8101f74:	2101      	movs	r1, #1
 8101f76:	480e      	ldr	r0, [pc, #56]	; (8101fb0 <moveToPosZ+0x280>)
 8101f78:	f002 fe2c 	bl	8104bd4 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 200);
 8101f7c:	4b0b      	ldr	r3, [pc, #44]	; (8101fac <moveToPosZ+0x27c>)
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	22c8      	movs	r2, #200	; 0xc8
 8101f82:	641a      	str	r2, [r3, #64]	; 0x40
//	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
	return 1;
 8101f84:	2301      	movs	r3, #1
}
 8101f86:	4618      	mov	r0, r3
 8101f88:	3730      	adds	r7, #48	; 0x30
 8101f8a:	46bd      	mov	sp, r7
 8101f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8101f8e:	bf00      	nop
 8101f90:	00000000 	.word	0x00000000
 8101f94:	40ae1e00 	.word	0x40ae1e00
 8101f98:	100001bc 	.word	0x100001bc
 8101f9c:	1000010c 	.word	0x1000010c
 8101fa0:	88008801 	.word	0x88008801
 8101fa4:	10000118 	.word	0x10000118
 8101fa8:	10000110 	.word	0x10000110
 8101fac:	10000124 	.word	0x10000124
 8101fb0:	58021000 	.word	0x58021000
 8101fb4:	58020000 	.word	0x58020000
 8101fb8:	10000009 	.word	0x10000009
 8101fbc:	0810a070 	.word	0x0810a070

08101fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101fc0:	b580      	push	{r7, lr}
 8101fc2:	b082      	sub	sp, #8
 8101fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101fc6:	4b0d      	ldr	r3, [pc, #52]	; (8101ffc <HAL_MspInit+0x3c>)
 8101fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fcc:	4a0b      	ldr	r2, [pc, #44]	; (8101ffc <HAL_MspInit+0x3c>)
 8101fce:	f043 0302 	orr.w	r3, r3, #2
 8101fd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101fd6:	4b09      	ldr	r3, [pc, #36]	; (8101ffc <HAL_MspInit+0x3c>)
 8101fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fdc:	f003 0302 	and.w	r3, r3, #2
 8101fe0:	607b      	str	r3, [r7, #4]
 8101fe2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8101fe4:	2200      	movs	r2, #0
 8101fe6:	2100      	movs	r1, #0
 8101fe8:	207e      	movs	r0, #126	; 0x7e
 8101fea:	f002 fbe2 	bl	81047b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101fee:	207e      	movs	r0, #126	; 0x7e
 8101ff0:	f002 fbf9 	bl	81047e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101ff4:	bf00      	nop
 8101ff6:	3708      	adds	r7, #8
 8101ff8:	46bd      	mov	sp, r7
 8101ffa:	bd80      	pop	{r7, pc}
 8101ffc:	58024400 	.word	0x58024400

08102000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102000:	b480      	push	{r7}
 8102002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102004:	e7fe      	b.n	8102004 <NMI_Handler+0x4>

08102006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102006:	b480      	push	{r7}
 8102008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810200a:	e7fe      	b.n	810200a <HardFault_Handler+0x4>

0810200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810200c:	b480      	push	{r7}
 810200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102010:	e7fe      	b.n	8102010 <MemManage_Handler+0x4>

08102012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102012:	b480      	push	{r7}
 8102014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102016:	e7fe      	b.n	8102016 <BusFault_Handler+0x4>

08102018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102018:	b480      	push	{r7}
 810201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810201c:	e7fe      	b.n	810201c <UsageFault_Handler+0x4>

0810201e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810201e:	b480      	push	{r7}
 8102020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102022:	bf00      	nop
 8102024:	46bd      	mov	sp, r7
 8102026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810202a:	4770      	bx	lr

0810202c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810202c:	b480      	push	{r7}
 810202e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102030:	bf00      	nop
 8102032:	46bd      	mov	sp, r7
 8102034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102038:	4770      	bx	lr

0810203a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810203a:	b480      	push	{r7}
 810203c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810203e:	bf00      	nop
 8102040:	46bd      	mov	sp, r7
 8102042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102046:	4770      	bx	lr

08102048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102048:	b580      	push	{r7, lr}
 810204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810204c:	f000 fdac 	bl	8102ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102050:	bf00      	nop
 8102052:	bd80      	pop	{r7, pc}

08102054 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102054:	b580      	push	{r7, lr}
 8102056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8102058:	f002 fde8 	bl	8104c2c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810205c:	bf00      	nop
 810205e:	bd80      	pop	{r7, pc}

08102060 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8102060:	b580      	push	{r7, lr}
 8102062:	b08a      	sub	sp, #40	; 0x28
 8102064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102066:	f107 031c 	add.w	r3, r7, #28
 810206a:	2200      	movs	r2, #0
 810206c:	601a      	str	r2, [r3, #0]
 810206e:	605a      	str	r2, [r3, #4]
 8102070:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102072:	463b      	mov	r3, r7
 8102074:	2200      	movs	r2, #0
 8102076:	601a      	str	r2, [r3, #0]
 8102078:	605a      	str	r2, [r3, #4]
 810207a:	609a      	str	r2, [r3, #8]
 810207c:	60da      	str	r2, [r3, #12]
 810207e:	611a      	str	r2, [r3, #16]
 8102080:	615a      	str	r2, [r3, #20]
 8102082:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8102084:	4b27      	ldr	r3, [pc, #156]	; (8102124 <MX_TIM2_Init+0xc4>)
 8102086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810208a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 810208c:	4b25      	ldr	r3, [pc, #148]	; (8102124 <MX_TIM2_Init+0xc4>)
 810208e:	222f      	movs	r2, #47	; 0x2f
 8102090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102092:	4b24      	ldr	r3, [pc, #144]	; (8102124 <MX_TIM2_Init+0xc4>)
 8102094:	2200      	movs	r2, #0
 8102096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8102098:	4b22      	ldr	r3, [pc, #136]	; (8102124 <MX_TIM2_Init+0xc4>)
 810209a:	f240 32e7 	movw	r2, #999	; 0x3e7
 810209e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81020a0:	4b20      	ldr	r3, [pc, #128]	; (8102124 <MX_TIM2_Init+0xc4>)
 81020a2:	2200      	movs	r2, #0
 81020a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81020a6:	4b1f      	ldr	r3, [pc, #124]	; (8102124 <MX_TIM2_Init+0xc4>)
 81020a8:	2200      	movs	r2, #0
 81020aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 81020ac:	481d      	ldr	r0, [pc, #116]	; (8102124 <MX_TIM2_Init+0xc4>)
 81020ae:	f005 fa24 	bl	81074fa <HAL_TIM_PWM_Init>
 81020b2:	4603      	mov	r3, r0
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	d001      	beq.n	81020bc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 81020b8:	f7ff fbe0 	bl	810187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81020bc:	2300      	movs	r3, #0
 81020be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81020c0:	2300      	movs	r3, #0
 81020c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81020c4:	f107 031c 	add.w	r3, r7, #28
 81020c8:	4619      	mov	r1, r3
 81020ca:	4816      	ldr	r0, [pc, #88]	; (8102124 <MX_TIM2_Init+0xc4>)
 81020cc:	f006 f978 	bl	81083c0 <HAL_TIMEx_MasterConfigSynchronization>
 81020d0:	4603      	mov	r3, r0
 81020d2:	2b00      	cmp	r3, #0
 81020d4:	d001      	beq.n	81020da <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 81020d6:	f7ff fbd1 	bl	810187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81020da:	2360      	movs	r3, #96	; 0x60
 81020dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81020de:	2300      	movs	r3, #0
 81020e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81020e2:	2300      	movs	r3, #0
 81020e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81020e6:	2300      	movs	r3, #0
 81020e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81020ea:	463b      	mov	r3, r7
 81020ec:	2208      	movs	r2, #8
 81020ee:	4619      	mov	r1, r3
 81020f0:	480c      	ldr	r0, [pc, #48]	; (8102124 <MX_TIM2_Init+0xc4>)
 81020f2:	f005 fcbb 	bl	8107a6c <HAL_TIM_PWM_ConfigChannel>
 81020f6:	4603      	mov	r3, r0
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	d001      	beq.n	8102100 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 81020fc:	f7ff fbbe 	bl	810187c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102100:	463b      	mov	r3, r7
 8102102:	220c      	movs	r2, #12
 8102104:	4619      	mov	r1, r3
 8102106:	4807      	ldr	r0, [pc, #28]	; (8102124 <MX_TIM2_Init+0xc4>)
 8102108:	f005 fcb0 	bl	8107a6c <HAL_TIM_PWM_ConfigChannel>
 810210c:	4603      	mov	r3, r0
 810210e:	2b00      	cmp	r3, #0
 8102110:	d001      	beq.n	8102116 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8102112:	f7ff fbb3 	bl	810187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8102116:	4803      	ldr	r0, [pc, #12]	; (8102124 <MX_TIM2_Init+0xc4>)
 8102118:	f000 fa4c 	bl	81025b4 <HAL_TIM_MspPostInit>

}
 810211c:	bf00      	nop
 810211e:	3728      	adds	r7, #40	; 0x28
 8102120:	46bd      	mov	sp, r7
 8102122:	bd80      	pop	{r7, pc}
 8102124:	10000124 	.word	0x10000124

08102128 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8102128:	b580      	push	{r7, lr}
 810212a:	b08c      	sub	sp, #48	; 0x30
 810212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810212e:	f107 030c 	add.w	r3, r7, #12
 8102132:	2224      	movs	r2, #36	; 0x24
 8102134:	2100      	movs	r1, #0
 8102136:	4618      	mov	r0, r3
 8102138:	f007 fafa 	bl	8109730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810213c:	463b      	mov	r3, r7
 810213e:	2200      	movs	r2, #0
 8102140:	601a      	str	r2, [r3, #0]
 8102142:	605a      	str	r2, [r3, #4]
 8102144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8102146:	4b21      	ldr	r3, [pc, #132]	; (81021cc <MX_TIM3_Init+0xa4>)
 8102148:	4a21      	ldr	r2, [pc, #132]	; (81021d0 <MX_TIM3_Init+0xa8>)
 810214a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 810214c:	4b1f      	ldr	r3, [pc, #124]	; (81021cc <MX_TIM3_Init+0xa4>)
 810214e:	2200      	movs	r2, #0
 8102150:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102152:	4b1e      	ldr	r3, [pc, #120]	; (81021cc <MX_TIM3_Init+0xa4>)
 8102154:	2200      	movs	r2, #0
 8102156:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8102158:	4b1c      	ldr	r3, [pc, #112]	; (81021cc <MX_TIM3_Init+0xa4>)
 810215a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810215e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102160:	4b1a      	ldr	r3, [pc, #104]	; (81021cc <MX_TIM3_Init+0xa4>)
 8102162:	2200      	movs	r2, #0
 8102164:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102166:	4b19      	ldr	r3, [pc, #100]	; (81021cc <MX_TIM3_Init+0xa4>)
 8102168:	2200      	movs	r2, #0
 810216a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 810216c:	2301      	movs	r3, #1
 810216e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102170:	2300      	movs	r3, #0
 8102172:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102174:	2301      	movs	r3, #1
 8102176:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102178:	2300      	movs	r3, #0
 810217a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 810217c:	2300      	movs	r3, #0
 810217e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8102180:	2302      	movs	r3, #2
 8102182:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102184:	2301      	movs	r3, #1
 8102186:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102188:	2300      	movs	r3, #0
 810218a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 810218c:	2300      	movs	r3, #0
 810218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8102190:	f107 030c 	add.w	r3, r7, #12
 8102194:	4619      	mov	r1, r3
 8102196:	480d      	ldr	r0, [pc, #52]	; (81021cc <MX_TIM3_Init+0xa4>)
 8102198:	f005 fb14 	bl	81077c4 <HAL_TIM_Encoder_Init>
 810219c:	4603      	mov	r3, r0
 810219e:	2b00      	cmp	r3, #0
 81021a0:	d001      	beq.n	81021a6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 81021a2:	f7ff fb6b 	bl	810187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81021a6:	2300      	movs	r3, #0
 81021a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81021aa:	2300      	movs	r3, #0
 81021ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81021ae:	463b      	mov	r3, r7
 81021b0:	4619      	mov	r1, r3
 81021b2:	4806      	ldr	r0, [pc, #24]	; (81021cc <MX_TIM3_Init+0xa4>)
 81021b4:	f006 f904 	bl	81083c0 <HAL_TIMEx_MasterConfigSynchronization>
 81021b8:	4603      	mov	r3, r0
 81021ba:	2b00      	cmp	r3, #0
 81021bc:	d001      	beq.n	81021c2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 81021be:	f7ff fb5d 	bl	810187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 81021c2:	bf00      	nop
 81021c4:	3730      	adds	r7, #48	; 0x30
 81021c6:	46bd      	mov	sp, r7
 81021c8:	bd80      	pop	{r7, pc}
 81021ca:	bf00      	nop
 81021cc:	10000170 	.word	0x10000170
 81021d0:	40000400 	.word	0x40000400

081021d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 81021d4:	b580      	push	{r7, lr}
 81021d6:	b08c      	sub	sp, #48	; 0x30
 81021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81021da:	f107 030c 	add.w	r3, r7, #12
 81021de:	2224      	movs	r2, #36	; 0x24
 81021e0:	2100      	movs	r1, #0
 81021e2:	4618      	mov	r0, r3
 81021e4:	f007 faa4 	bl	8109730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81021e8:	463b      	mov	r3, r7
 81021ea:	2200      	movs	r2, #0
 81021ec:	601a      	str	r2, [r3, #0]
 81021ee:	605a      	str	r2, [r3, #4]
 81021f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81021f2:	4b21      	ldr	r3, [pc, #132]	; (8102278 <MX_TIM4_Init+0xa4>)
 81021f4:	4a21      	ldr	r2, [pc, #132]	; (810227c <MX_TIM4_Init+0xa8>)
 81021f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81021f8:	4b1f      	ldr	r3, [pc, #124]	; (8102278 <MX_TIM4_Init+0xa4>)
 81021fa:	2200      	movs	r2, #0
 81021fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81021fe:	4b1e      	ldr	r3, [pc, #120]	; (8102278 <MX_TIM4_Init+0xa4>)
 8102200:	2200      	movs	r2, #0
 8102202:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8102204:	4b1c      	ldr	r3, [pc, #112]	; (8102278 <MX_TIM4_Init+0xa4>)
 8102206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810220a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810220c:	4b1a      	ldr	r3, [pc, #104]	; (8102278 <MX_TIM4_Init+0xa4>)
 810220e:	2200      	movs	r2, #0
 8102210:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102212:	4b19      	ldr	r3, [pc, #100]	; (8102278 <MX_TIM4_Init+0xa4>)
 8102214:	2200      	movs	r2, #0
 8102216:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102218:	2301      	movs	r3, #1
 810221a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 810221c:	2300      	movs	r3, #0
 810221e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102220:	2301      	movs	r3, #1
 8102222:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102224:	2300      	movs	r3, #0
 8102226:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102228:	2300      	movs	r3, #0
 810222a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 810222c:	2302      	movs	r3, #2
 810222e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102230:	2301      	movs	r3, #1
 8102232:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102234:	2300      	movs	r3, #0
 8102236:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8102238:	2300      	movs	r3, #0
 810223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 810223c:	f107 030c 	add.w	r3, r7, #12
 8102240:	4619      	mov	r1, r3
 8102242:	480d      	ldr	r0, [pc, #52]	; (8102278 <MX_TIM4_Init+0xa4>)
 8102244:	f005 fabe 	bl	81077c4 <HAL_TIM_Encoder_Init>
 8102248:	4603      	mov	r3, r0
 810224a:	2b00      	cmp	r3, #0
 810224c:	d001      	beq.n	8102252 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 810224e:	f7ff fb15 	bl	810187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102252:	2300      	movs	r3, #0
 8102254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102256:	2300      	movs	r3, #0
 8102258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 810225a:	463b      	mov	r3, r7
 810225c:	4619      	mov	r1, r3
 810225e:	4806      	ldr	r0, [pc, #24]	; (8102278 <MX_TIM4_Init+0xa4>)
 8102260:	f006 f8ae 	bl	81083c0 <HAL_TIMEx_MasterConfigSynchronization>
 8102264:	4603      	mov	r3, r0
 8102266:	2b00      	cmp	r3, #0
 8102268:	d001      	beq.n	810226e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 810226a:	f7ff fb07 	bl	810187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 810226e:	bf00      	nop
 8102270:	3730      	adds	r7, #48	; 0x30
 8102272:	46bd      	mov	sp, r7
 8102274:	bd80      	pop	{r7, pc}
 8102276:	bf00      	nop
 8102278:	100001bc 	.word	0x100001bc
 810227c:	40000800 	.word	0x40000800

08102280 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8102280:	b580      	push	{r7, lr}
 8102282:	b088      	sub	sp, #32
 8102284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8102286:	1d3b      	adds	r3, r7, #4
 8102288:	2200      	movs	r2, #0
 810228a:	601a      	str	r2, [r3, #0]
 810228c:	605a      	str	r2, [r3, #4]
 810228e:	609a      	str	r2, [r3, #8]
 8102290:	60da      	str	r2, [r3, #12]
 8102292:	611a      	str	r2, [r3, #16]
 8102294:	615a      	str	r2, [r3, #20]
 8102296:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8102298:	4b1e      	ldr	r3, [pc, #120]	; (8102314 <MX_TIM13_Init+0x94>)
 810229a:	4a1f      	ldr	r2, [pc, #124]	; (8102318 <MX_TIM13_Init+0x98>)
 810229c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 80-1;
 810229e:	4b1d      	ldr	r3, [pc, #116]	; (8102314 <MX_TIM13_Init+0x94>)
 81022a0:	224f      	movs	r2, #79	; 0x4f
 81022a2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022a4:	4b1b      	ldr	r3, [pc, #108]	; (8102314 <MX_TIM13_Init+0x94>)
 81022a6:	2200      	movs	r2, #0
 81022a8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 60000-1;
 81022aa:	4b1a      	ldr	r3, [pc, #104]	; (8102314 <MX_TIM13_Init+0x94>)
 81022ac:	f64e 225f 	movw	r2, #59999	; 0xea5f
 81022b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81022b2:	4b18      	ldr	r3, [pc, #96]	; (8102314 <MX_TIM13_Init+0x94>)
 81022b4:	2200      	movs	r2, #0
 81022b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81022b8:	4b16      	ldr	r3, [pc, #88]	; (8102314 <MX_TIM13_Init+0x94>)
 81022ba:	2200      	movs	r2, #0
 81022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 81022be:	4815      	ldr	r0, [pc, #84]	; (8102314 <MX_TIM13_Init+0x94>)
 81022c0:	f005 f8c4 	bl	810744c <HAL_TIM_Base_Init>
 81022c4:	4603      	mov	r3, r0
 81022c6:	2b00      	cmp	r3, #0
 81022c8:	d001      	beq.n	81022ce <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 81022ca:	f7ff fad7 	bl	810187c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 81022ce:	4811      	ldr	r0, [pc, #68]	; (8102314 <MX_TIM13_Init+0x94>)
 81022d0:	f005 f913 	bl	81074fa <HAL_TIM_PWM_Init>
 81022d4:	4603      	mov	r3, r0
 81022d6:	2b00      	cmp	r3, #0
 81022d8:	d001      	beq.n	81022de <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 81022da:	f7ff facf 	bl	810187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81022de:	2360      	movs	r3, #96	; 0x60
 81022e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 81022e2:	2300      	movs	r3, #0
 81022e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81022e6:	2300      	movs	r3, #0
 81022e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81022ea:	2300      	movs	r3, #0
 81022ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81022ee:	1d3b      	adds	r3, r7, #4
 81022f0:	2200      	movs	r2, #0
 81022f2:	4619      	mov	r1, r3
 81022f4:	4807      	ldr	r0, [pc, #28]	; (8102314 <MX_TIM13_Init+0x94>)
 81022f6:	f005 fbb9 	bl	8107a6c <HAL_TIM_PWM_ConfigChannel>
 81022fa:	4603      	mov	r3, r0
 81022fc:	2b00      	cmp	r3, #0
 81022fe:	d001      	beq.n	8102304 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8102300:	f7ff fabc 	bl	810187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8102304:	4803      	ldr	r0, [pc, #12]	; (8102314 <MX_TIM13_Init+0x94>)
 8102306:	f000 f955 	bl	81025b4 <HAL_TIM_MspPostInit>

}
 810230a:	bf00      	nop
 810230c:	3720      	adds	r7, #32
 810230e:	46bd      	mov	sp, r7
 8102310:	bd80      	pop	{r7, pc}
 8102312:	bf00      	nop
 8102314:	10000208 	.word	0x10000208
 8102318:	40001c00 	.word	0x40001c00

0810231c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 810231c:	b580      	push	{r7, lr}
 810231e:	b088      	sub	sp, #32
 8102320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8102322:	1d3b      	adds	r3, r7, #4
 8102324:	2200      	movs	r2, #0
 8102326:	601a      	str	r2, [r3, #0]
 8102328:	605a      	str	r2, [r3, #4]
 810232a:	609a      	str	r2, [r3, #8]
 810232c:	60da      	str	r2, [r3, #12]
 810232e:	611a      	str	r2, [r3, #16]
 8102330:	615a      	str	r2, [r3, #20]
 8102332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8102334:	4b1e      	ldr	r3, [pc, #120]	; (81023b0 <MX_TIM14_Init+0x94>)
 8102336:	4a1f      	ldr	r2, [pc, #124]	; (81023b4 <MX_TIM14_Init+0x98>)
 8102338:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80-1;
 810233a:	4b1d      	ldr	r3, [pc, #116]	; (81023b0 <MX_TIM14_Init+0x94>)
 810233c:	224f      	movs	r2, #79	; 0x4f
 810233e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102340:	4b1b      	ldr	r3, [pc, #108]	; (81023b0 <MX_TIM14_Init+0x94>)
 8102342:	2200      	movs	r2, #0
 8102344:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 60000-1;
 8102346:	4b1a      	ldr	r3, [pc, #104]	; (81023b0 <MX_TIM14_Init+0x94>)
 8102348:	f64e 225f 	movw	r2, #59999	; 0xea5f
 810234c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810234e:	4b18      	ldr	r3, [pc, #96]	; (81023b0 <MX_TIM14_Init+0x94>)
 8102350:	2200      	movs	r2, #0
 8102352:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102354:	4b16      	ldr	r3, [pc, #88]	; (81023b0 <MX_TIM14_Init+0x94>)
 8102356:	2200      	movs	r2, #0
 8102358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 810235a:	4815      	ldr	r0, [pc, #84]	; (81023b0 <MX_TIM14_Init+0x94>)
 810235c:	f005 f876 	bl	810744c <HAL_TIM_Base_Init>
 8102360:	4603      	mov	r3, r0
 8102362:	2b00      	cmp	r3, #0
 8102364:	d001      	beq.n	810236a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8102366:	f7ff fa89 	bl	810187c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 810236a:	4811      	ldr	r0, [pc, #68]	; (81023b0 <MX_TIM14_Init+0x94>)
 810236c:	f005 f8c5 	bl	81074fa <HAL_TIM_PWM_Init>
 8102370:	4603      	mov	r3, r0
 8102372:	2b00      	cmp	r3, #0
 8102374:	d001      	beq.n	810237a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8102376:	f7ff fa81 	bl	810187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810237a:	2360      	movs	r3, #96	; 0x60
 810237c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 810237e:	2300      	movs	r3, #0
 8102380:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102382:	2300      	movs	r3, #0
 8102384:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102386:	2300      	movs	r3, #0
 8102388:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810238a:	1d3b      	adds	r3, r7, #4
 810238c:	2200      	movs	r2, #0
 810238e:	4619      	mov	r1, r3
 8102390:	4807      	ldr	r0, [pc, #28]	; (81023b0 <MX_TIM14_Init+0x94>)
 8102392:	f005 fb6b 	bl	8107a6c <HAL_TIM_PWM_ConfigChannel>
 8102396:	4603      	mov	r3, r0
 8102398:	2b00      	cmp	r3, #0
 810239a:	d001      	beq.n	81023a0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 810239c:	f7ff fa6e 	bl	810187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 81023a0:	4803      	ldr	r0, [pc, #12]	; (81023b0 <MX_TIM14_Init+0x94>)
 81023a2:	f000 f907 	bl	81025b4 <HAL_TIM_MspPostInit>

}
 81023a6:	bf00      	nop
 81023a8:	3720      	adds	r7, #32
 81023aa:	46bd      	mov	sp, r7
 81023ac:	bd80      	pop	{r7, pc}
 81023ae:	bf00      	nop
 81023b0:	10000254 	.word	0x10000254
 81023b4:	40002000 	.word	0x40002000

081023b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 81023b8:	b480      	push	{r7}
 81023ba:	b085      	sub	sp, #20
 81023bc:	af00      	add	r7, sp, #0
 81023be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81023c8:	d10e      	bne.n	81023e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 81023ca:	4b0a      	ldr	r3, [pc, #40]	; (81023f4 <HAL_TIM_PWM_MspInit+0x3c>)
 81023cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81023d0:	4a08      	ldr	r2, [pc, #32]	; (81023f4 <HAL_TIM_PWM_MspInit+0x3c>)
 81023d2:	f043 0301 	orr.w	r3, r3, #1
 81023d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81023da:	4b06      	ldr	r3, [pc, #24]	; (81023f4 <HAL_TIM_PWM_MspInit+0x3c>)
 81023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81023e0:	f003 0301 	and.w	r3, r3, #1
 81023e4:	60fb      	str	r3, [r7, #12]
 81023e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 81023e8:	bf00      	nop
 81023ea:	3714      	adds	r7, #20
 81023ec:	46bd      	mov	sp, r7
 81023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023f2:	4770      	bx	lr
 81023f4:	58024400 	.word	0x58024400

081023f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 81023f8:	b580      	push	{r7, lr}
 81023fa:	b08c      	sub	sp, #48	; 0x30
 81023fc:	af00      	add	r7, sp, #0
 81023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102400:	f107 031c 	add.w	r3, r7, #28
 8102404:	2200      	movs	r2, #0
 8102406:	601a      	str	r2, [r3, #0]
 8102408:	605a      	str	r2, [r3, #4]
 810240a:	609a      	str	r2, [r3, #8]
 810240c:	60da      	str	r2, [r3, #12]
 810240e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	4a44      	ldr	r2, [pc, #272]	; (8102528 <HAL_TIM_Encoder_MspInit+0x130>)
 8102416:	4293      	cmp	r3, r2
 8102418:	d14d      	bne.n	81024b6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 810241a:	4b44      	ldr	r3, [pc, #272]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 810241c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102420:	4a42      	ldr	r2, [pc, #264]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 8102422:	f043 0302 	orr.w	r3, r3, #2
 8102426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810242a:	4b40      	ldr	r3, [pc, #256]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 810242c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102430:	f003 0302 	and.w	r3, r3, #2
 8102434:	61bb      	str	r3, [r7, #24]
 8102436:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102438:	4b3c      	ldr	r3, [pc, #240]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 810243a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810243e:	4a3b      	ldr	r2, [pc, #236]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 8102440:	f043 0301 	orr.w	r3, r3, #1
 8102444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102448:	4b38      	ldr	r3, [pc, #224]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 810244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810244e:	f003 0301 	and.w	r3, r3, #1
 8102452:	617b      	str	r3, [r7, #20]
 8102454:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102456:	4b35      	ldr	r3, [pc, #212]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 8102458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810245c:	4a33      	ldr	r2, [pc, #204]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 810245e:	f043 0302 	orr.w	r3, r3, #2
 8102462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102466:	4b31      	ldr	r3, [pc, #196]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 8102468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810246c:	f003 0302 	and.w	r3, r3, #2
 8102470:	613b      	str	r3, [r7, #16]
 8102472:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_X_A_Pin;
 8102474:	2340      	movs	r3, #64	; 0x40
 8102476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102478:	2302      	movs	r3, #2
 810247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810247c:	2300      	movs	r3, #0
 810247e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102480:	2300      	movs	r3, #0
 8102482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102484:	2302      	movs	r3, #2
 8102486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_A_GPIO_Port, &GPIO_InitStruct);
 8102488:	f107 031c 	add.w	r3, r7, #28
 810248c:	4619      	mov	r1, r3
 810248e:	4828      	ldr	r0, [pc, #160]	; (8102530 <HAL_TIM_Encoder_MspInit+0x138>)
 8102490:	f002 f9d8 	bl	8104844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_X_B_Pin;
 8102494:	2320      	movs	r3, #32
 8102496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102498:	2302      	movs	r3, #2
 810249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810249c:	2300      	movs	r3, #0
 810249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81024a0:	2300      	movs	r3, #0
 81024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81024a4:	2302      	movs	r3, #2
 81024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_B_GPIO_Port, &GPIO_InitStruct);
 81024a8:	f107 031c 	add.w	r3, r7, #28
 81024ac:	4619      	mov	r1, r3
 81024ae:	4821      	ldr	r0, [pc, #132]	; (8102534 <HAL_TIM_Encoder_MspInit+0x13c>)
 81024b0:	f002 f9c8 	bl	8104844 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 81024b4:	e033      	b.n	810251e <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM4)
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	4a1f      	ldr	r2, [pc, #124]	; (8102538 <HAL_TIM_Encoder_MspInit+0x140>)
 81024bc:	4293      	cmp	r3, r2
 81024be:	d12e      	bne.n	810251e <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 81024c0:	4b1a      	ldr	r3, [pc, #104]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 81024c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81024c6:	4a19      	ldr	r2, [pc, #100]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 81024c8:	f043 0304 	orr.w	r3, r3, #4
 81024cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81024d0:	4b16      	ldr	r3, [pc, #88]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 81024d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81024d6:	f003 0304 	and.w	r3, r3, #4
 81024da:	60fb      	str	r3, [r7, #12]
 81024dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81024de:	4b13      	ldr	r3, [pc, #76]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 81024e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024e4:	4a11      	ldr	r2, [pc, #68]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 81024e6:	f043 0308 	orr.w	r3, r3, #8
 81024ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024ee:	4b0f      	ldr	r3, [pc, #60]	; (810252c <HAL_TIM_Encoder_MspInit+0x134>)
 81024f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024f4:	f003 0308 	and.w	r3, r3, #8
 81024f8:	60bb      	str	r3, [r7, #8]
 81024fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Z_A_Pin|Encoder_Z_B_Pin;
 81024fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102502:	2302      	movs	r3, #2
 8102504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102506:	2300      	movs	r3, #0
 8102508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810250a:	2300      	movs	r3, #0
 810250c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 810250e:	2302      	movs	r3, #2
 8102510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102512:	f107 031c 	add.w	r3, r7, #28
 8102516:	4619      	mov	r1, r3
 8102518:	4808      	ldr	r0, [pc, #32]	; (810253c <HAL_TIM_Encoder_MspInit+0x144>)
 810251a:	f002 f993 	bl	8104844 <HAL_GPIO_Init>
}
 810251e:	bf00      	nop
 8102520:	3730      	adds	r7, #48	; 0x30
 8102522:	46bd      	mov	sp, r7
 8102524:	bd80      	pop	{r7, pc}
 8102526:	bf00      	nop
 8102528:	40000400 	.word	0x40000400
 810252c:	58024400 	.word	0x58024400
 8102530:	58020000 	.word	0x58020000
 8102534:	58020400 	.word	0x58020400
 8102538:	40000800 	.word	0x40000800
 810253c:	58020c00 	.word	0x58020c00

08102540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102540:	b480      	push	{r7}
 8102542:	b085      	sub	sp, #20
 8102544:	af00      	add	r7, sp, #0
 8102546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	4a16      	ldr	r2, [pc, #88]	; (81025a8 <HAL_TIM_Base_MspInit+0x68>)
 810254e:	4293      	cmp	r3, r2
 8102550:	d10f      	bne.n	8102572 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8102552:	4b16      	ldr	r3, [pc, #88]	; (81025ac <HAL_TIM_Base_MspInit+0x6c>)
 8102554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102558:	4a14      	ldr	r2, [pc, #80]	; (81025ac <HAL_TIM_Base_MspInit+0x6c>)
 810255a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810255e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102562:	4b12      	ldr	r3, [pc, #72]	; (81025ac <HAL_TIM_Base_MspInit+0x6c>)
 8102564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810256c:	60fb      	str	r3, [r7, #12]
 810256e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8102570:	e013      	b.n	810259a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM14)
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	4a0e      	ldr	r2, [pc, #56]	; (81025b0 <HAL_TIM_Base_MspInit+0x70>)
 8102578:	4293      	cmp	r3, r2
 810257a:	d10e      	bne.n	810259a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 810257c:	4b0b      	ldr	r3, [pc, #44]	; (81025ac <HAL_TIM_Base_MspInit+0x6c>)
 810257e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102582:	4a0a      	ldr	r2, [pc, #40]	; (81025ac <HAL_TIM_Base_MspInit+0x6c>)
 8102584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102588:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810258c:	4b07      	ldr	r3, [pc, #28]	; (81025ac <HAL_TIM_Base_MspInit+0x6c>)
 810258e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102596:	60bb      	str	r3, [r7, #8]
 8102598:	68bb      	ldr	r3, [r7, #8]
}
 810259a:	bf00      	nop
 810259c:	3714      	adds	r7, #20
 810259e:	46bd      	mov	sp, r7
 81025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a4:	4770      	bx	lr
 81025a6:	bf00      	nop
 81025a8:	40001c00 	.word	0x40001c00
 81025ac:	58024400 	.word	0x58024400
 81025b0:	40002000 	.word	0x40002000

081025b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 81025b4:	b580      	push	{r7, lr}
 81025b6:	b08a      	sub	sp, #40	; 0x28
 81025b8:	af00      	add	r7, sp, #0
 81025ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81025bc:	f107 0314 	add.w	r3, r7, #20
 81025c0:	2200      	movs	r2, #0
 81025c2:	601a      	str	r2, [r3, #0]
 81025c4:	605a      	str	r2, [r3, #4]
 81025c6:	609a      	str	r2, [r3, #8]
 81025c8:	60da      	str	r2, [r3, #12]
 81025ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81025d4:	d120      	bne.n	8102618 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81025d6:	4b38      	ldr	r3, [pc, #224]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 81025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025dc:	4a36      	ldr	r2, [pc, #216]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 81025de:	f043 0302 	orr.w	r3, r3, #2
 81025e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81025e6:	4b34      	ldr	r3, [pc, #208]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 81025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025ec:	f003 0302 	and.w	r3, r3, #2
 81025f0:	613b      	str	r3, [r7, #16]
 81025f2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Z_Pin;
 81025f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025fa:	2302      	movs	r3, #2
 81025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025fe:	2300      	movs	r3, #0
 8102600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102602:	2300      	movs	r3, #0
 8102604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102606:	2301      	movs	r3, #1
 8102608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810260a:	f107 0314 	add.w	r3, r7, #20
 810260e:	4619      	mov	r1, r3
 8102610:	482a      	ldr	r0, [pc, #168]	; (81026bc <HAL_TIM_MspPostInit+0x108>)
 8102612:	f002 f917 	bl	8104844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8102616:	e04a      	b.n	81026ae <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4a28      	ldr	r2, [pc, #160]	; (81026c0 <HAL_TIM_MspPostInit+0x10c>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d120      	bne.n	8102664 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102622:	4b25      	ldr	r3, [pc, #148]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 8102624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102628:	4a23      	ldr	r2, [pc, #140]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 810262a:	f043 0320 	orr.w	r3, r3, #32
 810262e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102632:	4b21      	ldr	r3, [pc, #132]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 8102634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102638:	f003 0320 	and.w	r3, r3, #32
 810263c:	60fb      	str	r3, [r7, #12]
 810263e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Rotate_Pin;
 8102640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102646:	2302      	movs	r3, #2
 8102648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810264a:	2300      	movs	r3, #0
 810264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810264e:	2300      	movs	r3, #0
 8102650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102652:	2309      	movs	r3, #9
 8102654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Rotate_GPIO_Port, &GPIO_InitStruct);
 8102656:	f107 0314 	add.w	r3, r7, #20
 810265a:	4619      	mov	r1, r3
 810265c:	4819      	ldr	r0, [pc, #100]	; (81026c4 <HAL_TIM_MspPostInit+0x110>)
 810265e:	f002 f8f1 	bl	8104844 <HAL_GPIO_Init>
}
 8102662:	e024      	b.n	81026ae <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	4a17      	ldr	r2, [pc, #92]	; (81026c8 <HAL_TIM_MspPostInit+0x114>)
 810266a:	4293      	cmp	r3, r2
 810266c:	d11f      	bne.n	81026ae <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810266e:	4b12      	ldr	r3, [pc, #72]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 8102670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102674:	4a10      	ldr	r2, [pc, #64]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 8102676:	f043 0320 	orr.w	r3, r3, #32
 810267a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810267e:	4b0e      	ldr	r3, [pc, #56]	; (81026b8 <HAL_TIM_MspPostInit+0x104>)
 8102680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102684:	f003 0320 	and.w	r3, r3, #32
 8102688:	60bb      	str	r3, [r7, #8]
 810268a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_Servo_Slider_Pin;
 810268c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102692:	2302      	movs	r3, #2
 8102694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102696:	2300      	movs	r3, #0
 8102698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810269a:	2300      	movs	r3, #0
 810269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 810269e:	2309      	movs	r3, #9
 81026a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Slider_GPIO_Port, &GPIO_InitStruct);
 81026a2:	f107 0314 	add.w	r3, r7, #20
 81026a6:	4619      	mov	r1, r3
 81026a8:	4806      	ldr	r0, [pc, #24]	; (81026c4 <HAL_TIM_MspPostInit+0x110>)
 81026aa:	f002 f8cb 	bl	8104844 <HAL_GPIO_Init>
}
 81026ae:	bf00      	nop
 81026b0:	3728      	adds	r7, #40	; 0x28
 81026b2:	46bd      	mov	sp, r7
 81026b4:	bd80      	pop	{r7, pc}
 81026b6:	bf00      	nop
 81026b8:	58024400 	.word	0x58024400
 81026bc:	58020400 	.word	0x58020400
 81026c0:	40001c00 	.word	0x40001c00
 81026c4:	58021400 	.word	0x58021400
 81026c8:	40002000 	.word	0x40002000

081026cc <start_PWM>:
  /* USER CODE END TIM14_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void start_PWM(void){
 81026cc:	b580      	push	{r7, lr}
 81026ce:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 81026d0:	2100      	movs	r1, #0
 81026d2:	4808      	ldr	r0, [pc, #32]	; (81026f4 <start_PWM+0x28>)
 81026d4:	f004 ff68 	bl	81075a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 81026d8:	2100      	movs	r1, #0
 81026da:	4807      	ldr	r0, [pc, #28]	; (81026f8 <start_PWM+0x2c>)
 81026dc:	f004 ff64 	bl	81075a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 81026e0:	210c      	movs	r1, #12
 81026e2:	4806      	ldr	r0, [pc, #24]	; (81026fc <start_PWM+0x30>)
 81026e4:	f004 ff60 	bl	81075a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 81026e8:	2108      	movs	r1, #8
 81026ea:	4804      	ldr	r0, [pc, #16]	; (81026fc <start_PWM+0x30>)
 81026ec:	f004 ff5c 	bl	81075a8 <HAL_TIM_PWM_Start>
}
 81026f0:	bf00      	nop
 81026f2:	bd80      	pop	{r7, pc}
 81026f4:	10000208 	.word	0x10000208
 81026f8:	10000254 	.word	0x10000254
 81026fc:	10000124 	.word	0x10000124

08102700 <set_Rotate_Servo>:
void set_Rotate_Servo(float percent){
 8102700:	b480      	push	{r7}
 8102702:	b083      	sub	sp, #12
 8102704:	af00      	add	r7, sp, #0
 8102706:	ed87 0a01 	vstr	s0, [r7, #4]
	CH1_DC = (int)(((percent*0.075f)+0.0375f) * (60000-1));
 810270a:	edd7 7a01 	vldr	s15, [r7, #4]
 810270e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8102748 <set_Rotate_Servo+0x48>
 8102712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102716:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 810274c <set_Rotate_Servo+0x4c>
 810271a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810271e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8102750 <set_Rotate_Servo+0x50>
 8102722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810272a:	ee17 2a90 	vmov	r2, s15
 810272e:	4b09      	ldr	r3, [pc, #36]	; (8102754 <set_Rotate_Servo+0x54>)
 8102730:	601a      	str	r2, [r3, #0]
	TIM13->CCR1 = CH1_DC;
 8102732:	4b08      	ldr	r3, [pc, #32]	; (8102754 <set_Rotate_Servo+0x54>)
 8102734:	681a      	ldr	r2, [r3, #0]
 8102736:	4b08      	ldr	r3, [pc, #32]	; (8102758 <set_Rotate_Servo+0x58>)
 8102738:	635a      	str	r2, [r3, #52]	; 0x34
}
 810273a:	bf00      	nop
 810273c:	370c      	adds	r7, #12
 810273e:	46bd      	mov	sp, r7
 8102740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102744:	4770      	bx	lr
 8102746:	bf00      	nop
 8102748:	3d99999a 	.word	0x3d99999a
 810274c:	3d19999a 	.word	0x3d19999a
 8102750:	476a5f00 	.word	0x476a5f00
 8102754:	1000011c 	.word	0x1000011c
 8102758:	40001c00 	.word	0x40001c00

0810275c <set_Slide_Servo>:
void set_Slide_Servo(float percent){
 810275c:	b480      	push	{r7}
 810275e:	b083      	sub	sp, #12
 8102760:	af00      	add	r7, sp, #0
 8102762:	ed87 0a01 	vstr	s0, [r7, #4]
	CH2_DC = (int)(((percent*0.06f)+0.045f) * (60000-1));
 8102766:	edd7 7a01 	vldr	s15, [r7, #4]
 810276a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 81027a4 <set_Slide_Servo+0x48>
 810276e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102772:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 81027a8 <set_Slide_Servo+0x4c>
 8102776:	ee77 7a87 	vadd.f32	s15, s15, s14
 810277a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 81027ac <set_Slide_Servo+0x50>
 810277e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8102786:	ee17 2a90 	vmov	r2, s15
 810278a:	4b09      	ldr	r3, [pc, #36]	; (81027b0 <set_Slide_Servo+0x54>)
 810278c:	601a      	str	r2, [r3, #0]
	TIM14->CCR1 = CH2_DC;
 810278e:	4b08      	ldr	r3, [pc, #32]	; (81027b0 <set_Slide_Servo+0x54>)
 8102790:	681a      	ldr	r2, [r3, #0]
 8102792:	4b08      	ldr	r3, [pc, #32]	; (81027b4 <set_Slide_Servo+0x58>)
 8102794:	635a      	str	r2, [r3, #52]	; 0x34
}
 8102796:	bf00      	nop
 8102798:	370c      	adds	r7, #12
 810279a:	46bd      	mov	sp, r7
 810279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a0:	4770      	bx	lr
 81027a2:	bf00      	nop
 81027a4:	3d75c28f 	.word	0x3d75c28f
 81027a8:	3d3851ec 	.word	0x3d3851ec
 81027ac:	476a5f00 	.word	0x476a5f00
 81027b0:	10000120 	.word	0x10000120
 81027b4:	40002000 	.word	0x40002000

081027b8 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 81027b8:	b580      	push	{r7, lr}
 81027ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81027bc:	4b22      	ldr	r3, [pc, #136]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027be:	4a23      	ldr	r2, [pc, #140]	; (810284c <MX_USART3_UART_Init+0x94>)
 81027c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81027c2:	4b21      	ldr	r3, [pc, #132]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81027c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81027ca:	4b1f      	ldr	r3, [pc, #124]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027cc:	2200      	movs	r2, #0
 81027ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81027d0:	4b1d      	ldr	r3, [pc, #116]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027d2:	2200      	movs	r2, #0
 81027d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81027d6:	4b1c      	ldr	r3, [pc, #112]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027d8:	2200      	movs	r2, #0
 81027da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81027dc:	4b1a      	ldr	r3, [pc, #104]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027de:	220c      	movs	r2, #12
 81027e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81027e2:	4b19      	ldr	r3, [pc, #100]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027e4:	2200      	movs	r2, #0
 81027e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81027e8:	4b17      	ldr	r3, [pc, #92]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027ea:	2200      	movs	r2, #0
 81027ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81027ee:	4b16      	ldr	r3, [pc, #88]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027f0:	2200      	movs	r2, #0
 81027f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81027f4:	4b14      	ldr	r3, [pc, #80]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027f6:	2200      	movs	r2, #0
 81027f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81027fa:	4b13      	ldr	r3, [pc, #76]	; (8102848 <MX_USART3_UART_Init+0x90>)
 81027fc:	2200      	movs	r2, #0
 81027fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102800:	4811      	ldr	r0, [pc, #68]	; (8102848 <MX_USART3_UART_Init+0x90>)
 8102802:	f005 fe6b 	bl	81084dc <HAL_UART_Init>
 8102806:	4603      	mov	r3, r0
 8102808:	2b00      	cmp	r3, #0
 810280a:	d001      	beq.n	8102810 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810280c:	f7ff f836 	bl	810187c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102810:	2100      	movs	r1, #0
 8102812:	480d      	ldr	r0, [pc, #52]	; (8102848 <MX_USART3_UART_Init+0x90>)
 8102814:	f006 fe9e 	bl	8109554 <HAL_UARTEx_SetTxFifoThreshold>
 8102818:	4603      	mov	r3, r0
 810281a:	2b00      	cmp	r3, #0
 810281c:	d001      	beq.n	8102822 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810281e:	f7ff f82d 	bl	810187c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102822:	2100      	movs	r1, #0
 8102824:	4808      	ldr	r0, [pc, #32]	; (8102848 <MX_USART3_UART_Init+0x90>)
 8102826:	f006 fed3 	bl	81095d0 <HAL_UARTEx_SetRxFifoThreshold>
 810282a:	4603      	mov	r3, r0
 810282c:	2b00      	cmp	r3, #0
 810282e:	d001      	beq.n	8102834 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102830:	f7ff f824 	bl	810187c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102834:	4804      	ldr	r0, [pc, #16]	; (8102848 <MX_USART3_UART_Init+0x90>)
 8102836:	f006 fe54 	bl	81094e2 <HAL_UARTEx_DisableFifoMode>
 810283a:	4603      	mov	r3, r0
 810283c:	2b00      	cmp	r3, #0
 810283e:	d001      	beq.n	8102844 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102840:	f7ff f81c 	bl	810187c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102844:	bf00      	nop
 8102846:	bd80      	pop	{r7, pc}
 8102848:	100002a0 	.word	0x100002a0
 810284c:	40004800 	.word	0x40004800

08102850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102850:	b580      	push	{r7, lr}
 8102852:	b0bc      	sub	sp, #240	; 0xf0
 8102854:	af00      	add	r7, sp, #0
 8102856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102858:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810285c:	2200      	movs	r2, #0
 810285e:	601a      	str	r2, [r3, #0]
 8102860:	605a      	str	r2, [r3, #4]
 8102862:	609a      	str	r2, [r3, #8]
 8102864:	60da      	str	r2, [r3, #12]
 8102866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102868:	f107 0320 	add.w	r3, r7, #32
 810286c:	22bc      	movs	r2, #188	; 0xbc
 810286e:	2100      	movs	r1, #0
 8102870:	4618      	mov	r0, r3
 8102872:	f006 ff5d 	bl	8109730 <memset>
  if(uartHandle->Instance==UART5)
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	4a5c      	ldr	r2, [pc, #368]	; (81029ec <HAL_UART_MspInit+0x19c>)
 810287c:	4293      	cmp	r3, r2
 810287e:	d168      	bne.n	8102952 <HAL_UART_MspInit+0x102>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8102880:	2302      	movs	r3, #2
 8102882:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102884:	2300      	movs	r3, #0
 8102886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810288a:	f107 0320 	add.w	r3, r7, #32
 810288e:	4618      	mov	r0, r3
 8102890:	f002 fc50 	bl	8105134 <HAL_RCCEx_PeriphCLKConfig>
 8102894:	4603      	mov	r3, r0
 8102896:	2b00      	cmp	r3, #0
 8102898:	d001      	beq.n	810289e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 810289a:	f7fe ffef 	bl	810187c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 810289e:	4b54      	ldr	r3, [pc, #336]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81028a4:	4a52      	ldr	r2, [pc, #328]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81028aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81028ae:	4b50      	ldr	r3, [pc, #320]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81028b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81028b8:	61fb      	str	r3, [r7, #28]
 81028ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81028bc:	4b4c      	ldr	r3, [pc, #304]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028c2:	4a4b      	ldr	r2, [pc, #300]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028c4:	f043 0302 	orr.w	r3, r3, #2
 81028c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81028cc:	4b48      	ldr	r3, [pc, #288]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028d2:	f003 0302 	and.w	r3, r3, #2
 81028d6:	61bb      	str	r3, [r7, #24]
 81028d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81028da:	4b45      	ldr	r3, [pc, #276]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028e0:	4a43      	ldr	r2, [pc, #268]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028e2:	f043 0304 	orr.w	r3, r3, #4
 81028e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81028ea:	4b41      	ldr	r3, [pc, #260]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028f0:	f003 0304 	and.w	r3, r3, #4
 81028f4:	617b      	str	r3, [r7, #20]
 81028f6:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 81028f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81028fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102900:	2302      	movs	r3, #2
 8102902:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102906:	2300      	movs	r3, #0
 8102908:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810290c:	2300      	movs	r3, #0
 810290e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8102912:	230e      	movs	r3, #14
 8102914:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102918:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810291c:	4619      	mov	r1, r3
 810291e:	4835      	ldr	r0, [pc, #212]	; (81029f4 <HAL_UART_MspInit+0x1a4>)
 8102920:	f001 ff90 	bl	8104844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810292c:	2302      	movs	r3, #2
 810292e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102932:	2300      	movs	r3, #0
 8102934:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102938:	2300      	movs	r3, #0
 810293a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 810293e:	2308      	movs	r3, #8
 8102940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102944:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102948:	4619      	mov	r1, r3
 810294a:	482b      	ldr	r0, [pc, #172]	; (81029f8 <HAL_UART_MspInit+0x1a8>)
 810294c:	f001 ff7a 	bl	8104844 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102950:	e047      	b.n	81029e2 <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART3)
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	4a29      	ldr	r2, [pc, #164]	; (81029fc <HAL_UART_MspInit+0x1ac>)
 8102958:	4293      	cmp	r3, r2
 810295a:	d142      	bne.n	81029e2 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810295c:	2302      	movs	r3, #2
 810295e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102960:	2300      	movs	r3, #0
 8102962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102966:	f107 0320 	add.w	r3, r7, #32
 810296a:	4618      	mov	r0, r3
 810296c:	f002 fbe2 	bl	8105134 <HAL_RCCEx_PeriphCLKConfig>
 8102970:	4603      	mov	r3, r0
 8102972:	2b00      	cmp	r3, #0
 8102974:	d001      	beq.n	810297a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8102976:	f7fe ff81 	bl	810187c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 810297a:	4b1d      	ldr	r3, [pc, #116]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 810297c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102980:	4a1b      	ldr	r2, [pc, #108]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 8102982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102986:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810298a:	4b19      	ldr	r3, [pc, #100]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 810298c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102994:	613b      	str	r3, [r7, #16]
 8102996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102998:	4b15      	ldr	r3, [pc, #84]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 810299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810299e:	4a14      	ldr	r2, [pc, #80]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81029a0:	f043 0308 	orr.w	r3, r3, #8
 81029a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81029a8:	4b11      	ldr	r3, [pc, #68]	; (81029f0 <HAL_UART_MspInit+0x1a0>)
 81029aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029ae:	f003 0308 	and.w	r3, r3, #8
 81029b2:	60fb      	str	r3, [r7, #12]
 81029b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81029b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 81029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81029be:	2302      	movs	r3, #2
 81029c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029c4:	2300      	movs	r3, #0
 81029c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81029ca:	2300      	movs	r3, #0
 81029cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81029d0:	2307      	movs	r3, #7
 81029d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81029d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81029da:	4619      	mov	r1, r3
 81029dc:	4808      	ldr	r0, [pc, #32]	; (8102a00 <HAL_UART_MspInit+0x1b0>)
 81029de:	f001 ff31 	bl	8104844 <HAL_GPIO_Init>
}
 81029e2:	bf00      	nop
 81029e4:	37f0      	adds	r7, #240	; 0xf0
 81029e6:	46bd      	mov	sp, r7
 81029e8:	bd80      	pop	{r7, pc}
 81029ea:	bf00      	nop
 81029ec:	40005000 	.word	0x40005000
 81029f0:	58024400 	.word	0x58024400
 81029f4:	58020400 	.word	0x58020400
 81029f8:	58020800 	.word	0x58020800
 81029fc:	40004800 	.word	0x40004800
 8102a00:	58020c00 	.word	0x58020c00

08102a04 <ST_LINK_WRITE>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ST_LINK_WRITE(uint8_t * msg, uint8_t length){
 8102a04:	b580      	push	{r7, lr}
 8102a06:	b082      	sub	sp, #8
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	6078      	str	r0, [r7, #4]
 8102a0c:	460b      	mov	r3, r1
 8102a0e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3,msg,length,100);// Sending in normal mode
 8102a10:	78fb      	ldrb	r3, [r7, #3]
 8102a12:	b29a      	uxth	r2, r3
 8102a14:	2364      	movs	r3, #100	; 0x64
 8102a16:	6879      	ldr	r1, [r7, #4]
 8102a18:	4803      	ldr	r0, [pc, #12]	; (8102a28 <ST_LINK_WRITE+0x24>)
 8102a1a:	f005 fdaf 	bl	810857c <HAL_UART_Transmit>
}
 8102a1e:	bf00      	nop
 8102a20:	3708      	adds	r7, #8
 8102a22:	46bd      	mov	sp, r7
 8102a24:	bd80      	pop	{r7, pc}
 8102a26:	bf00      	nop
 8102a28:	100002a0 	.word	0x100002a0

08102a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102a30:	f7fe faf6 	bl	8101020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102a34:	480c      	ldr	r0, [pc, #48]	; (8102a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102a36:	490d      	ldr	r1, [pc, #52]	; (8102a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102a38:	4a0d      	ldr	r2, [pc, #52]	; (8102a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102a3c:	e002      	b.n	8102a44 <LoopCopyDataInit>

08102a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102a42:	3304      	adds	r3, #4

08102a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102a48:	d3f9      	bcc.n	8102a3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102a4a:	4a0a      	ldr	r2, [pc, #40]	; (8102a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102a4c:	4c0a      	ldr	r4, [pc, #40]	; (8102a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102a50:	e001      	b.n	8102a56 <LoopFillZerobss>

08102a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102a54:	3204      	adds	r2, #4

08102a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102a58:	d3fb      	bcc.n	8102a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102a5a:	f006 fe45 	bl	81096e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102a5e:	f7fe fe07 	bl	8101670 <main>
  bx  lr
 8102a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102a64:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102a68:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102a6c:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 8102a70:	0810a0f8 	.word	0x0810a0f8
  ldr r2, =_sbss
 8102a74:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8102a78:	10000348 	.word	0x10000348

08102a7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102a7c:	e7fe      	b.n	8102a7c <ADC3_IRQHandler>
	...

08102a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102a80:	b580      	push	{r7, lr}
 8102a82:	b082      	sub	sp, #8
 8102a84:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102a86:	4b28      	ldr	r3, [pc, #160]	; (8102b28 <HAL_Init+0xa8>)
 8102a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102a8c:	4a26      	ldr	r2, [pc, #152]	; (8102b28 <HAL_Init+0xa8>)
 8102a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102a92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102a96:	4b24      	ldr	r3, [pc, #144]	; (8102b28 <HAL_Init+0xa8>)
 8102a98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102aa0:	603b      	str	r3, [r7, #0]
 8102aa2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102aa4:	4b21      	ldr	r3, [pc, #132]	; (8102b2c <HAL_Init+0xac>)
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102aac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102ab0:	4a1e      	ldr	r2, [pc, #120]	; (8102b2c <HAL_Init+0xac>)
 8102ab2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102ab6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102ab8:	4b1c      	ldr	r3, [pc, #112]	; (8102b2c <HAL_Init+0xac>)
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	4a1b      	ldr	r2, [pc, #108]	; (8102b2c <HAL_Init+0xac>)
 8102abe:	f043 0301 	orr.w	r3, r3, #1
 8102ac2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102ac4:	2003      	movs	r0, #3
 8102ac6:	f001 fe69 	bl	810479c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102aca:	f002 f95b 	bl	8104d84 <HAL_RCC_GetSysClockFreq>
 8102ace:	4602      	mov	r2, r0
 8102ad0:	4b15      	ldr	r3, [pc, #84]	; (8102b28 <HAL_Init+0xa8>)
 8102ad2:	699b      	ldr	r3, [r3, #24]
 8102ad4:	0a1b      	lsrs	r3, r3, #8
 8102ad6:	f003 030f 	and.w	r3, r3, #15
 8102ada:	4915      	ldr	r1, [pc, #84]	; (8102b30 <HAL_Init+0xb0>)
 8102adc:	5ccb      	ldrb	r3, [r1, r3]
 8102ade:	f003 031f 	and.w	r3, r3, #31
 8102ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8102ae6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102ae8:	4b0f      	ldr	r3, [pc, #60]	; (8102b28 <HAL_Init+0xa8>)
 8102aea:	699b      	ldr	r3, [r3, #24]
 8102aec:	f003 030f 	and.w	r3, r3, #15
 8102af0:	4a0f      	ldr	r2, [pc, #60]	; (8102b30 <HAL_Init+0xb0>)
 8102af2:	5cd3      	ldrb	r3, [r2, r3]
 8102af4:	f003 031f 	and.w	r3, r3, #31
 8102af8:	687a      	ldr	r2, [r7, #4]
 8102afa:	fa22 f303 	lsr.w	r3, r2, r3
 8102afe:	4a0d      	ldr	r2, [pc, #52]	; (8102b34 <HAL_Init+0xb4>)
 8102b00:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102b02:	4b0c      	ldr	r3, [pc, #48]	; (8102b34 <HAL_Init+0xb4>)
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	4a0c      	ldr	r2, [pc, #48]	; (8102b38 <HAL_Init+0xb8>)
 8102b08:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102b0a:	2000      	movs	r0, #0
 8102b0c:	f000 f816 	bl	8102b3c <HAL_InitTick>
 8102b10:	4603      	mov	r3, r0
 8102b12:	2b00      	cmp	r3, #0
 8102b14:	d001      	beq.n	8102b1a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102b16:	2301      	movs	r3, #1
 8102b18:	e002      	b.n	8102b20 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102b1a:	f7ff fa51 	bl	8101fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102b1e:	2300      	movs	r3, #0
}
 8102b20:	4618      	mov	r0, r3
 8102b22:	3708      	adds	r7, #8
 8102b24:	46bd      	mov	sp, r7
 8102b26:	bd80      	pop	{r7, pc}
 8102b28:	58024400 	.word	0x58024400
 8102b2c:	40024400 	.word	0x40024400
 8102b30:	0810a07c 	.word	0x0810a07c
 8102b34:	10000004 	.word	0x10000004
 8102b38:	10000000 	.word	0x10000000

08102b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102b3c:	b580      	push	{r7, lr}
 8102b3e:	b082      	sub	sp, #8
 8102b40:	af00      	add	r7, sp, #0
 8102b42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102b44:	4b15      	ldr	r3, [pc, #84]	; (8102b9c <HAL_InitTick+0x60>)
 8102b46:	781b      	ldrb	r3, [r3, #0]
 8102b48:	2b00      	cmp	r3, #0
 8102b4a:	d101      	bne.n	8102b50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102b4c:	2301      	movs	r3, #1
 8102b4e:	e021      	b.n	8102b94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102b50:	4b13      	ldr	r3, [pc, #76]	; (8102ba0 <HAL_InitTick+0x64>)
 8102b52:	681a      	ldr	r2, [r3, #0]
 8102b54:	4b11      	ldr	r3, [pc, #68]	; (8102b9c <HAL_InitTick+0x60>)
 8102b56:	781b      	ldrb	r3, [r3, #0]
 8102b58:	4619      	mov	r1, r3
 8102b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8102b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8102b66:	4618      	mov	r0, r3
 8102b68:	f001 fe4b 	bl	8104802 <HAL_SYSTICK_Config>
 8102b6c:	4603      	mov	r3, r0
 8102b6e:	2b00      	cmp	r3, #0
 8102b70:	d001      	beq.n	8102b76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102b72:	2301      	movs	r3, #1
 8102b74:	e00e      	b.n	8102b94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	2b0f      	cmp	r3, #15
 8102b7a:	d80a      	bhi.n	8102b92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102b7c:	2200      	movs	r2, #0
 8102b7e:	6879      	ldr	r1, [r7, #4]
 8102b80:	f04f 30ff 	mov.w	r0, #4294967295
 8102b84:	f001 fe15 	bl	81047b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102b88:	4a06      	ldr	r2, [pc, #24]	; (8102ba4 <HAL_InitTick+0x68>)
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102b8e:	2300      	movs	r3, #0
 8102b90:	e000      	b.n	8102b94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102b92:	2301      	movs	r3, #1
}
 8102b94:	4618      	mov	r0, r3
 8102b96:	3708      	adds	r7, #8
 8102b98:	46bd      	mov	sp, r7
 8102b9a:	bd80      	pop	{r7, pc}
 8102b9c:	10000010 	.word	0x10000010
 8102ba0:	10000000 	.word	0x10000000
 8102ba4:	1000000c 	.word	0x1000000c

08102ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102ba8:	b480      	push	{r7}
 8102baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102bac:	4b06      	ldr	r3, [pc, #24]	; (8102bc8 <HAL_IncTick+0x20>)
 8102bae:	781b      	ldrb	r3, [r3, #0]
 8102bb0:	461a      	mov	r2, r3
 8102bb2:	4b06      	ldr	r3, [pc, #24]	; (8102bcc <HAL_IncTick+0x24>)
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	4413      	add	r3, r2
 8102bb8:	4a04      	ldr	r2, [pc, #16]	; (8102bcc <HAL_IncTick+0x24>)
 8102bba:	6013      	str	r3, [r2, #0]
}
 8102bbc:	bf00      	nop
 8102bbe:	46bd      	mov	sp, r7
 8102bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bc4:	4770      	bx	lr
 8102bc6:	bf00      	nop
 8102bc8:	10000010 	.word	0x10000010
 8102bcc:	10000330 	.word	0x10000330

08102bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102bd0:	b480      	push	{r7}
 8102bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8102bd4:	4b03      	ldr	r3, [pc, #12]	; (8102be4 <HAL_GetTick+0x14>)
 8102bd6:	681b      	ldr	r3, [r3, #0]
}
 8102bd8:	4618      	mov	r0, r3
 8102bda:	46bd      	mov	sp, r7
 8102bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be0:	4770      	bx	lr
 8102be2:	bf00      	nop
 8102be4:	10000330 	.word	0x10000330

08102be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102be8:	b580      	push	{r7, lr}
 8102bea:	b084      	sub	sp, #16
 8102bec:	af00      	add	r7, sp, #0
 8102bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102bf0:	f7ff ffee 	bl	8102bd0 <HAL_GetTick>
 8102bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102bfa:	68fb      	ldr	r3, [r7, #12]
 8102bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102c00:	d005      	beq.n	8102c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102c02:	4b0a      	ldr	r3, [pc, #40]	; (8102c2c <HAL_Delay+0x44>)
 8102c04:	781b      	ldrb	r3, [r3, #0]
 8102c06:	461a      	mov	r2, r3
 8102c08:	68fb      	ldr	r3, [r7, #12]
 8102c0a:	4413      	add	r3, r2
 8102c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102c0e:	bf00      	nop
 8102c10:	f7ff ffde 	bl	8102bd0 <HAL_GetTick>
 8102c14:	4602      	mov	r2, r0
 8102c16:	68bb      	ldr	r3, [r7, #8]
 8102c18:	1ad3      	subs	r3, r2, r3
 8102c1a:	68fa      	ldr	r2, [r7, #12]
 8102c1c:	429a      	cmp	r2, r3
 8102c1e:	d8f7      	bhi.n	8102c10 <HAL_Delay+0x28>
  {
  }
}
 8102c20:	bf00      	nop
 8102c22:	bf00      	nop
 8102c24:	3710      	adds	r7, #16
 8102c26:	46bd      	mov	sp, r7
 8102c28:	bd80      	pop	{r7, pc}
 8102c2a:	bf00      	nop
 8102c2c:	10000010 	.word	0x10000010

08102c30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102c30:	b480      	push	{r7}
 8102c32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102c34:	4b03      	ldr	r3, [pc, #12]	; (8102c44 <HAL_GetREVID+0x14>)
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	0c1b      	lsrs	r3, r3, #16
}
 8102c3a:	4618      	mov	r0, r3
 8102c3c:	46bd      	mov	sp, r7
 8102c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c42:	4770      	bx	lr
 8102c44:	5c001000 	.word	0x5c001000

08102c48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102c48:	b480      	push	{r7}
 8102c4a:	b083      	sub	sp, #12
 8102c4c:	af00      	add	r7, sp, #0
 8102c4e:	6078      	str	r0, [r7, #4]
 8102c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	689b      	ldr	r3, [r3, #8]
 8102c56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8102c5a:	683b      	ldr	r3, [r7, #0]
 8102c5c:	431a      	orrs	r2, r3
 8102c5e:	687b      	ldr	r3, [r7, #4]
 8102c60:	609a      	str	r2, [r3, #8]
}
 8102c62:	bf00      	nop
 8102c64:	370c      	adds	r7, #12
 8102c66:	46bd      	mov	sp, r7
 8102c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c6c:	4770      	bx	lr

08102c6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102c6e:	b480      	push	{r7}
 8102c70:	b083      	sub	sp, #12
 8102c72:	af00      	add	r7, sp, #0
 8102c74:	6078      	str	r0, [r7, #4]
 8102c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	689b      	ldr	r3, [r3, #8]
 8102c7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102c80:	683b      	ldr	r3, [r7, #0]
 8102c82:	431a      	orrs	r2, r3
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	609a      	str	r2, [r3, #8]
}
 8102c88:	bf00      	nop
 8102c8a:	370c      	adds	r7, #12
 8102c8c:	46bd      	mov	sp, r7
 8102c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c92:	4770      	bx	lr

08102c94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102c94:	b480      	push	{r7}
 8102c96:	b083      	sub	sp, #12
 8102c98:	af00      	add	r7, sp, #0
 8102c9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	689b      	ldr	r3, [r3, #8]
 8102ca0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102ca4:	4618      	mov	r0, r3
 8102ca6:	370c      	adds	r7, #12
 8102ca8:	46bd      	mov	sp, r7
 8102caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cae:	4770      	bx	lr

08102cb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102cb0:	b480      	push	{r7}
 8102cb2:	b087      	sub	sp, #28
 8102cb4:	af00      	add	r7, sp, #0
 8102cb6:	60f8      	str	r0, [r7, #12]
 8102cb8:	60b9      	str	r1, [r7, #8]
 8102cba:	607a      	str	r2, [r7, #4]
 8102cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102cbe:	68fb      	ldr	r3, [r7, #12]
 8102cc0:	3360      	adds	r3, #96	; 0x60
 8102cc2:	461a      	mov	r2, r3
 8102cc4:	68bb      	ldr	r3, [r7, #8]
 8102cc6:	009b      	lsls	r3, r3, #2
 8102cc8:	4413      	add	r3, r2
 8102cca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102ccc:	697b      	ldr	r3, [r7, #20]
 8102cce:	681b      	ldr	r3, [r3, #0]
 8102cd0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102cda:	683b      	ldr	r3, [r7, #0]
 8102cdc:	430b      	orrs	r3, r1
 8102cde:	431a      	orrs	r2, r3
 8102ce0:	697b      	ldr	r3, [r7, #20]
 8102ce2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102ce4:	bf00      	nop
 8102ce6:	371c      	adds	r7, #28
 8102ce8:	46bd      	mov	sp, r7
 8102cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cee:	4770      	bx	lr

08102cf0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102cf0:	b480      	push	{r7}
 8102cf2:	b085      	sub	sp, #20
 8102cf4:	af00      	add	r7, sp, #0
 8102cf6:	60f8      	str	r0, [r7, #12]
 8102cf8:	60b9      	str	r1, [r7, #8]
 8102cfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102cfc:	68fb      	ldr	r3, [r7, #12]
 8102cfe:	691b      	ldr	r3, [r3, #16]
 8102d00:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102d04:	68bb      	ldr	r3, [r7, #8]
 8102d06:	f003 031f 	and.w	r3, r3, #31
 8102d0a:	6879      	ldr	r1, [r7, #4]
 8102d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8102d10:	431a      	orrs	r2, r3
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	611a      	str	r2, [r3, #16]
}
 8102d16:	bf00      	nop
 8102d18:	3714      	adds	r7, #20
 8102d1a:	46bd      	mov	sp, r7
 8102d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d20:	4770      	bx	lr

08102d22 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102d22:	b480      	push	{r7}
 8102d24:	b087      	sub	sp, #28
 8102d26:	af00      	add	r7, sp, #0
 8102d28:	60f8      	str	r0, [r7, #12]
 8102d2a:	60b9      	str	r1, [r7, #8]
 8102d2c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d2e:	68fb      	ldr	r3, [r7, #12]
 8102d30:	3360      	adds	r3, #96	; 0x60
 8102d32:	461a      	mov	r2, r3
 8102d34:	68bb      	ldr	r3, [r7, #8]
 8102d36:	009b      	lsls	r3, r3, #2
 8102d38:	4413      	add	r3, r2
 8102d3a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102d3c:	697b      	ldr	r3, [r7, #20]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	431a      	orrs	r2, r3
 8102d48:	697b      	ldr	r3, [r7, #20]
 8102d4a:	601a      	str	r2, [r3, #0]
  }
}
 8102d4c:	bf00      	nop
 8102d4e:	371c      	adds	r7, #28
 8102d50:	46bd      	mov	sp, r7
 8102d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d56:	4770      	bx	lr

08102d58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102d58:	b480      	push	{r7}
 8102d5a:	b083      	sub	sp, #12
 8102d5c:	af00      	add	r7, sp, #0
 8102d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	68db      	ldr	r3, [r3, #12]
 8102d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102d68:	2b00      	cmp	r3, #0
 8102d6a:	d101      	bne.n	8102d70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102d6c:	2301      	movs	r3, #1
 8102d6e:	e000      	b.n	8102d72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102d70:	2300      	movs	r3, #0
}
 8102d72:	4618      	mov	r0, r3
 8102d74:	370c      	adds	r7, #12
 8102d76:	46bd      	mov	sp, r7
 8102d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d7c:	4770      	bx	lr

08102d7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102d7e:	b480      	push	{r7}
 8102d80:	b087      	sub	sp, #28
 8102d82:	af00      	add	r7, sp, #0
 8102d84:	60f8      	str	r0, [r7, #12]
 8102d86:	60b9      	str	r1, [r7, #8]
 8102d88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102d8a:	68fb      	ldr	r3, [r7, #12]
 8102d8c:	3330      	adds	r3, #48	; 0x30
 8102d8e:	461a      	mov	r2, r3
 8102d90:	68bb      	ldr	r3, [r7, #8]
 8102d92:	0a1b      	lsrs	r3, r3, #8
 8102d94:	009b      	lsls	r3, r3, #2
 8102d96:	f003 030c 	and.w	r3, r3, #12
 8102d9a:	4413      	add	r3, r2
 8102d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102d9e:	697b      	ldr	r3, [r7, #20]
 8102da0:	681a      	ldr	r2, [r3, #0]
 8102da2:	68bb      	ldr	r3, [r7, #8]
 8102da4:	f003 031f 	and.w	r3, r3, #31
 8102da8:	211f      	movs	r1, #31
 8102daa:	fa01 f303 	lsl.w	r3, r1, r3
 8102dae:	43db      	mvns	r3, r3
 8102db0:	401a      	ands	r2, r3
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	0e9b      	lsrs	r3, r3, #26
 8102db6:	f003 011f 	and.w	r1, r3, #31
 8102dba:	68bb      	ldr	r3, [r7, #8]
 8102dbc:	f003 031f 	and.w	r3, r3, #31
 8102dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8102dc4:	431a      	orrs	r2, r3
 8102dc6:	697b      	ldr	r3, [r7, #20]
 8102dc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102dca:	bf00      	nop
 8102dcc:	371c      	adds	r7, #28
 8102dce:	46bd      	mov	sp, r7
 8102dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dd4:	4770      	bx	lr

08102dd6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102dd6:	b480      	push	{r7}
 8102dd8:	b087      	sub	sp, #28
 8102dda:	af00      	add	r7, sp, #0
 8102ddc:	60f8      	str	r0, [r7, #12]
 8102dde:	60b9      	str	r1, [r7, #8]
 8102de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102de2:	68fb      	ldr	r3, [r7, #12]
 8102de4:	3314      	adds	r3, #20
 8102de6:	461a      	mov	r2, r3
 8102de8:	68bb      	ldr	r3, [r7, #8]
 8102dea:	0e5b      	lsrs	r3, r3, #25
 8102dec:	009b      	lsls	r3, r3, #2
 8102dee:	f003 0304 	and.w	r3, r3, #4
 8102df2:	4413      	add	r3, r2
 8102df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102df6:	697b      	ldr	r3, [r7, #20]
 8102df8:	681a      	ldr	r2, [r3, #0]
 8102dfa:	68bb      	ldr	r3, [r7, #8]
 8102dfc:	0d1b      	lsrs	r3, r3, #20
 8102dfe:	f003 031f 	and.w	r3, r3, #31
 8102e02:	2107      	movs	r1, #7
 8102e04:	fa01 f303 	lsl.w	r3, r1, r3
 8102e08:	43db      	mvns	r3, r3
 8102e0a:	401a      	ands	r2, r3
 8102e0c:	68bb      	ldr	r3, [r7, #8]
 8102e0e:	0d1b      	lsrs	r3, r3, #20
 8102e10:	f003 031f 	and.w	r3, r3, #31
 8102e14:	6879      	ldr	r1, [r7, #4]
 8102e16:	fa01 f303 	lsl.w	r3, r1, r3
 8102e1a:	431a      	orrs	r2, r3
 8102e1c:	697b      	ldr	r3, [r7, #20]
 8102e1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102e20:	bf00      	nop
 8102e22:	371c      	adds	r7, #28
 8102e24:	46bd      	mov	sp, r7
 8102e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e2a:	4770      	bx	lr

08102e2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102e2c:	b480      	push	{r7}
 8102e2e:	b085      	sub	sp, #20
 8102e30:	af00      	add	r7, sp, #0
 8102e32:	60f8      	str	r0, [r7, #12]
 8102e34:	60b9      	str	r1, [r7, #8]
 8102e36:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102e38:	68fb      	ldr	r3, [r7, #12]
 8102e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102e3e:	68bb      	ldr	r3, [r7, #8]
 8102e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e44:	43db      	mvns	r3, r3
 8102e46:	401a      	ands	r2, r3
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	f003 0318 	and.w	r3, r3, #24
 8102e4e:	4908      	ldr	r1, [pc, #32]	; (8102e70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102e50:	40d9      	lsrs	r1, r3
 8102e52:	68bb      	ldr	r3, [r7, #8]
 8102e54:	400b      	ands	r3, r1
 8102e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e5a:	431a      	orrs	r2, r3
 8102e5c:	68fb      	ldr	r3, [r7, #12]
 8102e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8102e62:	bf00      	nop
 8102e64:	3714      	adds	r7, #20
 8102e66:	46bd      	mov	sp, r7
 8102e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e6c:	4770      	bx	lr
 8102e6e:	bf00      	nop
 8102e70:	000fffff 	.word	0x000fffff

08102e74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102e74:	b480      	push	{r7}
 8102e76:	b083      	sub	sp, #12
 8102e78:	af00      	add	r7, sp, #0
 8102e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	689b      	ldr	r3, [r3, #8]
 8102e80:	f003 031f 	and.w	r3, r3, #31
}
 8102e84:	4618      	mov	r0, r3
 8102e86:	370c      	adds	r7, #12
 8102e88:	46bd      	mov	sp, r7
 8102e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e8e:	4770      	bx	lr

08102e90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102e90:	b480      	push	{r7}
 8102e92:	b083      	sub	sp, #12
 8102e94:	af00      	add	r7, sp, #0
 8102e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	689b      	ldr	r3, [r3, #8]
 8102e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102ea0:	4618      	mov	r0, r3
 8102ea2:	370c      	adds	r7, #12
 8102ea4:	46bd      	mov	sp, r7
 8102ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eaa:	4770      	bx	lr

08102eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102eac:	b480      	push	{r7}
 8102eae:	b083      	sub	sp, #12
 8102eb0:	af00      	add	r7, sp, #0
 8102eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	689b      	ldr	r3, [r3, #8]
 8102eb8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102ec0:	687a      	ldr	r2, [r7, #4]
 8102ec2:	6093      	str	r3, [r2, #8]
}
 8102ec4:	bf00      	nop
 8102ec6:	370c      	adds	r7, #12
 8102ec8:	46bd      	mov	sp, r7
 8102eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ece:	4770      	bx	lr

08102ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102ed0:	b480      	push	{r7}
 8102ed2:	b083      	sub	sp, #12
 8102ed4:	af00      	add	r7, sp, #0
 8102ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	689b      	ldr	r3, [r3, #8]
 8102edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ee4:	d101      	bne.n	8102eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102ee6:	2301      	movs	r3, #1
 8102ee8:	e000      	b.n	8102eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102eea:	2300      	movs	r3, #0
}
 8102eec:	4618      	mov	r0, r3
 8102eee:	370c      	adds	r7, #12
 8102ef0:	46bd      	mov	sp, r7
 8102ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ef6:	4770      	bx	lr

08102ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102ef8:	b480      	push	{r7}
 8102efa:	b083      	sub	sp, #12
 8102efc:	af00      	add	r7, sp, #0
 8102efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	689b      	ldr	r3, [r3, #8]
 8102f04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102f14:	bf00      	nop
 8102f16:	370c      	adds	r7, #12
 8102f18:	46bd      	mov	sp, r7
 8102f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f1e:	4770      	bx	lr

08102f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102f20:	b480      	push	{r7}
 8102f22:	b083      	sub	sp, #12
 8102f24:	af00      	add	r7, sp, #0
 8102f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	689b      	ldr	r3, [r3, #8]
 8102f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102f34:	d101      	bne.n	8102f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102f36:	2301      	movs	r3, #1
 8102f38:	e000      	b.n	8102f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102f3a:	2300      	movs	r3, #0
}
 8102f3c:	4618      	mov	r0, r3
 8102f3e:	370c      	adds	r7, #12
 8102f40:	46bd      	mov	sp, r7
 8102f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f46:	4770      	bx	lr

08102f48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8102f48:	b480      	push	{r7}
 8102f4a:	b083      	sub	sp, #12
 8102f4c:	af00      	add	r7, sp, #0
 8102f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	689b      	ldr	r3, [r3, #8]
 8102f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102f5c:	f043 0201 	orr.w	r2, r3, #1
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8102f64:	bf00      	nop
 8102f66:	370c      	adds	r7, #12
 8102f68:	46bd      	mov	sp, r7
 8102f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f6e:	4770      	bx	lr

08102f70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8102f70:	b480      	push	{r7}
 8102f72:	b083      	sub	sp, #12
 8102f74:	af00      	add	r7, sp, #0
 8102f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	689b      	ldr	r3, [r3, #8]
 8102f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102f84:	f043 0202 	orr.w	r2, r3, #2
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8102f8c:	bf00      	nop
 8102f8e:	370c      	adds	r7, #12
 8102f90:	46bd      	mov	sp, r7
 8102f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f96:	4770      	bx	lr

08102f98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102f98:	b480      	push	{r7}
 8102f9a:	b083      	sub	sp, #12
 8102f9c:	af00      	add	r7, sp, #0
 8102f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	689b      	ldr	r3, [r3, #8]
 8102fa4:	f003 0301 	and.w	r3, r3, #1
 8102fa8:	2b01      	cmp	r3, #1
 8102faa:	d101      	bne.n	8102fb0 <LL_ADC_IsEnabled+0x18>
 8102fac:	2301      	movs	r3, #1
 8102fae:	e000      	b.n	8102fb2 <LL_ADC_IsEnabled+0x1a>
 8102fb0:	2300      	movs	r3, #0
}
 8102fb2:	4618      	mov	r0, r3
 8102fb4:	370c      	adds	r7, #12
 8102fb6:	46bd      	mov	sp, r7
 8102fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fbc:	4770      	bx	lr

08102fbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8102fbe:	b480      	push	{r7}
 8102fc0:	b083      	sub	sp, #12
 8102fc2:	af00      	add	r7, sp, #0
 8102fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	689b      	ldr	r3, [r3, #8]
 8102fca:	f003 0302 	and.w	r3, r3, #2
 8102fce:	2b02      	cmp	r3, #2
 8102fd0:	d101      	bne.n	8102fd6 <LL_ADC_IsDisableOngoing+0x18>
 8102fd2:	2301      	movs	r3, #1
 8102fd4:	e000      	b.n	8102fd8 <LL_ADC_IsDisableOngoing+0x1a>
 8102fd6:	2300      	movs	r3, #0
}
 8102fd8:	4618      	mov	r0, r3
 8102fda:	370c      	adds	r7, #12
 8102fdc:	46bd      	mov	sp, r7
 8102fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fe2:	4770      	bx	lr

08102fe4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8102fe4:	b480      	push	{r7}
 8102fe6:	b083      	sub	sp, #12
 8102fe8:	af00      	add	r7, sp, #0
 8102fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	689b      	ldr	r3, [r3, #8]
 8102ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102ff8:	f043 0204 	orr.w	r2, r3, #4
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8103000:	bf00      	nop
 8103002:	370c      	adds	r7, #12
 8103004:	46bd      	mov	sp, r7
 8103006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810300a:	4770      	bx	lr

0810300c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 810300c:	b480      	push	{r7}
 810300e:	b083      	sub	sp, #12
 8103010:	af00      	add	r7, sp, #0
 8103012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	689b      	ldr	r3, [r3, #8]
 8103018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810301c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103020:	f043 0210 	orr.w	r2, r3, #16
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8103028:	bf00      	nop
 810302a:	370c      	adds	r7, #12
 810302c:	46bd      	mov	sp, r7
 810302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103032:	4770      	bx	lr

08103034 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103034:	b480      	push	{r7}
 8103036:	b083      	sub	sp, #12
 8103038:	af00      	add	r7, sp, #0
 810303a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	689b      	ldr	r3, [r3, #8]
 8103040:	f003 0304 	and.w	r3, r3, #4
 8103044:	2b04      	cmp	r3, #4
 8103046:	d101      	bne.n	810304c <LL_ADC_REG_IsConversionOngoing+0x18>
 8103048:	2301      	movs	r3, #1
 810304a:	e000      	b.n	810304e <LL_ADC_REG_IsConversionOngoing+0x1a>
 810304c:	2300      	movs	r3, #0
}
 810304e:	4618      	mov	r0, r3
 8103050:	370c      	adds	r7, #12
 8103052:	46bd      	mov	sp, r7
 8103054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103058:	4770      	bx	lr

0810305a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 810305a:	b480      	push	{r7}
 810305c:	b083      	sub	sp, #12
 810305e:	af00      	add	r7, sp, #0
 8103060:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	689b      	ldr	r3, [r3, #8]
 8103066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810306a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810306e:	f043 0220 	orr.w	r2, r3, #32
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8103076:	bf00      	nop
 8103078:	370c      	adds	r7, #12
 810307a:	46bd      	mov	sp, r7
 810307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103080:	4770      	bx	lr

08103082 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103082:	b480      	push	{r7}
 8103084:	b083      	sub	sp, #12
 8103086:	af00      	add	r7, sp, #0
 8103088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	689b      	ldr	r3, [r3, #8]
 810308e:	f003 0308 	and.w	r3, r3, #8
 8103092:	2b08      	cmp	r3, #8
 8103094:	d101      	bne.n	810309a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8103096:	2301      	movs	r3, #1
 8103098:	e000      	b.n	810309c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 810309a:	2300      	movs	r3, #0
}
 810309c:	4618      	mov	r0, r3
 810309e:	370c      	adds	r7, #12
 81030a0:	46bd      	mov	sp, r7
 81030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030a6:	4770      	bx	lr

081030a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81030a8:	b590      	push	{r4, r7, lr}
 81030aa:	b089      	sub	sp, #36	; 0x24
 81030ac:	af00      	add	r7, sp, #0
 81030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81030b0:	2300      	movs	r3, #0
 81030b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81030b4:	2300      	movs	r3, #0
 81030b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	2b00      	cmp	r3, #0
 81030bc:	d101      	bne.n	81030c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81030be:	2301      	movs	r3, #1
 81030c0:	e18f      	b.n	81033e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	68db      	ldr	r3, [r3, #12]
 81030c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d109      	bne.n	81030e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81030d0:	6878      	ldr	r0, [r7, #4]
 81030d2:	f7fe f835 	bl	8101140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	2200      	movs	r2, #0
 81030da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	2200      	movs	r2, #0
 81030e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	681b      	ldr	r3, [r3, #0]
 81030e8:	4618      	mov	r0, r3
 81030ea:	f7ff fef1 	bl	8102ed0 <LL_ADC_IsDeepPowerDownEnabled>
 81030ee:	4603      	mov	r3, r0
 81030f0:	2b00      	cmp	r3, #0
 81030f2:	d004      	beq.n	81030fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	4618      	mov	r0, r3
 81030fa:	f7ff fed7 	bl	8102eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4618      	mov	r0, r3
 8103104:	f7ff ff0c 	bl	8102f20 <LL_ADC_IsInternalRegulatorEnabled>
 8103108:	4603      	mov	r3, r0
 810310a:	2b00      	cmp	r3, #0
 810310c:	d114      	bne.n	8103138 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	681b      	ldr	r3, [r3, #0]
 8103112:	4618      	mov	r0, r3
 8103114:	f7ff fef0 	bl	8102ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103118:	4b88      	ldr	r3, [pc, #544]	; (810333c <HAL_ADC_Init+0x294>)
 810311a:	681b      	ldr	r3, [r3, #0]
 810311c:	099b      	lsrs	r3, r3, #6
 810311e:	4a88      	ldr	r2, [pc, #544]	; (8103340 <HAL_ADC_Init+0x298>)
 8103120:	fba2 2303 	umull	r2, r3, r2, r3
 8103124:	099b      	lsrs	r3, r3, #6
 8103126:	3301      	adds	r3, #1
 8103128:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810312a:	e002      	b.n	8103132 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810312c:	68bb      	ldr	r3, [r7, #8]
 810312e:	3b01      	subs	r3, #1
 8103130:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103132:	68bb      	ldr	r3, [r7, #8]
 8103134:	2b00      	cmp	r3, #0
 8103136:	d1f9      	bne.n	810312c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4618      	mov	r0, r3
 810313e:	f7ff feef 	bl	8102f20 <LL_ADC_IsInternalRegulatorEnabled>
 8103142:	4603      	mov	r3, r0
 8103144:	2b00      	cmp	r3, #0
 8103146:	d10d      	bne.n	8103164 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810314c:	f043 0210 	orr.w	r2, r3, #16
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103158:	f043 0201 	orr.w	r2, r3, #1
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8103160:	2301      	movs	r3, #1
 8103162:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	4618      	mov	r0, r3
 810316a:	f7ff ff63 	bl	8103034 <LL_ADC_REG_IsConversionOngoing>
 810316e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103174:	f003 0310 	and.w	r3, r3, #16
 8103178:	2b00      	cmp	r3, #0
 810317a:	f040 8129 	bne.w	81033d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810317e:	697b      	ldr	r3, [r7, #20]
 8103180:	2b00      	cmp	r3, #0
 8103182:	f040 8125 	bne.w	81033d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810318a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810318e:	f043 0202 	orr.w	r2, r3, #2
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	4618      	mov	r0, r3
 810319c:	f7ff fefc 	bl	8102f98 <LL_ADC_IsEnabled>
 81031a0:	4603      	mov	r3, r0
 81031a2:	2b00      	cmp	r3, #0
 81031a4:	d136      	bne.n	8103214 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	4a66      	ldr	r2, [pc, #408]	; (8103344 <HAL_ADC_Init+0x29c>)
 81031ac:	4293      	cmp	r3, r2
 81031ae:	d004      	beq.n	81031ba <HAL_ADC_Init+0x112>
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	4a64      	ldr	r2, [pc, #400]	; (8103348 <HAL_ADC_Init+0x2a0>)
 81031b6:	4293      	cmp	r3, r2
 81031b8:	d10e      	bne.n	81031d8 <HAL_ADC_Init+0x130>
 81031ba:	4862      	ldr	r0, [pc, #392]	; (8103344 <HAL_ADC_Init+0x29c>)
 81031bc:	f7ff feec 	bl	8102f98 <LL_ADC_IsEnabled>
 81031c0:	4604      	mov	r4, r0
 81031c2:	4861      	ldr	r0, [pc, #388]	; (8103348 <HAL_ADC_Init+0x2a0>)
 81031c4:	f7ff fee8 	bl	8102f98 <LL_ADC_IsEnabled>
 81031c8:	4603      	mov	r3, r0
 81031ca:	4323      	orrs	r3, r4
 81031cc:	2b00      	cmp	r3, #0
 81031ce:	bf0c      	ite	eq
 81031d0:	2301      	moveq	r3, #1
 81031d2:	2300      	movne	r3, #0
 81031d4:	b2db      	uxtb	r3, r3
 81031d6:	e008      	b.n	81031ea <HAL_ADC_Init+0x142>
 81031d8:	485c      	ldr	r0, [pc, #368]	; (810334c <HAL_ADC_Init+0x2a4>)
 81031da:	f7ff fedd 	bl	8102f98 <LL_ADC_IsEnabled>
 81031de:	4603      	mov	r3, r0
 81031e0:	2b00      	cmp	r3, #0
 81031e2:	bf0c      	ite	eq
 81031e4:	2301      	moveq	r3, #1
 81031e6:	2300      	movne	r3, #0
 81031e8:	b2db      	uxtb	r3, r3
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	d012      	beq.n	8103214 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	681b      	ldr	r3, [r3, #0]
 81031f2:	4a54      	ldr	r2, [pc, #336]	; (8103344 <HAL_ADC_Init+0x29c>)
 81031f4:	4293      	cmp	r3, r2
 81031f6:	d004      	beq.n	8103202 <HAL_ADC_Init+0x15a>
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	4a52      	ldr	r2, [pc, #328]	; (8103348 <HAL_ADC_Init+0x2a0>)
 81031fe:	4293      	cmp	r3, r2
 8103200:	d101      	bne.n	8103206 <HAL_ADC_Init+0x15e>
 8103202:	4a53      	ldr	r2, [pc, #332]	; (8103350 <HAL_ADC_Init+0x2a8>)
 8103204:	e000      	b.n	8103208 <HAL_ADC_Init+0x160>
 8103206:	4a53      	ldr	r2, [pc, #332]	; (8103354 <HAL_ADC_Init+0x2ac>)
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	685b      	ldr	r3, [r3, #4]
 810320c:	4619      	mov	r1, r3
 810320e:	4610      	mov	r0, r2
 8103210:	f7ff fd1a 	bl	8102c48 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103214:	f7ff fd0c 	bl	8102c30 <HAL_GetREVID>
 8103218:	4603      	mov	r3, r0
 810321a:	f241 0203 	movw	r2, #4099	; 0x1003
 810321e:	4293      	cmp	r3, r2
 8103220:	d914      	bls.n	810324c <HAL_ADC_Init+0x1a4>
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	689b      	ldr	r3, [r3, #8]
 8103226:	2b10      	cmp	r3, #16
 8103228:	d110      	bne.n	810324c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	7d5b      	ldrb	r3, [r3, #21]
 810322e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103234:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810323a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	7f1b      	ldrb	r3, [r3, #28]
 8103240:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103242:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103244:	f043 030c 	orr.w	r3, r3, #12
 8103248:	61bb      	str	r3, [r7, #24]
 810324a:	e00d      	b.n	8103268 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	7d5b      	ldrb	r3, [r3, #21]
 8103250:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103256:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810325c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	7f1b      	ldrb	r3, [r3, #28]
 8103262:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103264:	4313      	orrs	r3, r2
 8103266:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	7f1b      	ldrb	r3, [r3, #28]
 810326c:	2b01      	cmp	r3, #1
 810326e:	d106      	bne.n	810327e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	6a1b      	ldr	r3, [r3, #32]
 8103274:	3b01      	subs	r3, #1
 8103276:	045b      	lsls	r3, r3, #17
 8103278:	69ba      	ldr	r2, [r7, #24]
 810327a:	4313      	orrs	r3, r2
 810327c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103282:	2b00      	cmp	r3, #0
 8103284:	d009      	beq.n	810329a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810328a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103292:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103294:	69ba      	ldr	r2, [r7, #24]
 8103296:	4313      	orrs	r3, r2
 8103298:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	68da      	ldr	r2, [r3, #12]
 81032a0:	4b2d      	ldr	r3, [pc, #180]	; (8103358 <HAL_ADC_Init+0x2b0>)
 81032a2:	4013      	ands	r3, r2
 81032a4:	687a      	ldr	r2, [r7, #4]
 81032a6:	6812      	ldr	r2, [r2, #0]
 81032a8:	69b9      	ldr	r1, [r7, #24]
 81032aa:	430b      	orrs	r3, r1
 81032ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	4618      	mov	r0, r3
 81032b4:	f7ff febe 	bl	8103034 <LL_ADC_REG_IsConversionOngoing>
 81032b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	4618      	mov	r0, r3
 81032c0:	f7ff fedf 	bl	8103082 <LL_ADC_INJ_IsConversionOngoing>
 81032c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81032c6:	693b      	ldr	r3, [r7, #16]
 81032c8:	2b00      	cmp	r3, #0
 81032ca:	d15f      	bne.n	810338c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81032cc:	68fb      	ldr	r3, [r7, #12]
 81032ce:	2b00      	cmp	r3, #0
 81032d0:	d15c      	bne.n	810338c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	7d1b      	ldrb	r3, [r3, #20]
 81032d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81032dc:	4313      	orrs	r3, r2
 81032de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	68db      	ldr	r3, [r3, #12]
 81032e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81032ea:	f023 0303 	bic.w	r3, r3, #3
 81032ee:	687a      	ldr	r2, [r7, #4]
 81032f0:	6812      	ldr	r2, [r2, #0]
 81032f2:	69b9      	ldr	r1, [r7, #24]
 81032f4:	430b      	orrs	r3, r1
 81032f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81032fe:	2b01      	cmp	r3, #1
 8103300:	d12e      	bne.n	8103360 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103306:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	691a      	ldr	r2, [r3, #16]
 810330e:	4b13      	ldr	r3, [pc, #76]	; (810335c <HAL_ADC_Init+0x2b4>)
 8103310:	4013      	ands	r3, r2
 8103312:	687a      	ldr	r2, [r7, #4]
 8103314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8103316:	3a01      	subs	r2, #1
 8103318:	0411      	lsls	r1, r2, #16
 810331a:	687a      	ldr	r2, [r7, #4]
 810331c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810331e:	4311      	orrs	r1, r2
 8103320:	687a      	ldr	r2, [r7, #4]
 8103322:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8103324:	4311      	orrs	r1, r2
 8103326:	687a      	ldr	r2, [r7, #4]
 8103328:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810332a:	430a      	orrs	r2, r1
 810332c:	431a      	orrs	r2, r3
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	681b      	ldr	r3, [r3, #0]
 8103332:	f042 0201 	orr.w	r2, r2, #1
 8103336:	611a      	str	r2, [r3, #16]
 8103338:	e01a      	b.n	8103370 <HAL_ADC_Init+0x2c8>
 810333a:	bf00      	nop
 810333c:	10000000 	.word	0x10000000
 8103340:	053e2d63 	.word	0x053e2d63
 8103344:	40022000 	.word	0x40022000
 8103348:	40022100 	.word	0x40022100
 810334c:	58026000 	.word	0x58026000
 8103350:	40022300 	.word	0x40022300
 8103354:	58026300 	.word	0x58026300
 8103358:	fff0c003 	.word	0xfff0c003
 810335c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	691a      	ldr	r2, [r3, #16]
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	f022 0201 	bic.w	r2, r2, #1
 810336e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	691b      	ldr	r3, [r3, #16]
 8103376:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	430a      	orrs	r2, r1
 8103384:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8103386:	6878      	ldr	r0, [r7, #4]
 8103388:	f000 ff26 	bl	81041d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	68db      	ldr	r3, [r3, #12]
 8103390:	2b01      	cmp	r3, #1
 8103392:	d10c      	bne.n	81033ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810339a:	f023 010f 	bic.w	r1, r3, #15
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	699b      	ldr	r3, [r3, #24]
 81033a2:	1e5a      	subs	r2, r3, #1
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	430a      	orrs	r2, r1
 81033aa:	631a      	str	r2, [r3, #48]	; 0x30
 81033ac:	e007      	b.n	81033be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	f022 020f 	bic.w	r2, r2, #15
 81033bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033c2:	f023 0303 	bic.w	r3, r3, #3
 81033c6:	f043 0201 	orr.w	r2, r3, #1
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	655a      	str	r2, [r3, #84]	; 0x54
 81033ce:	e007      	b.n	81033e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033d4:	f043 0210 	orr.w	r2, r3, #16
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81033dc:	2301      	movs	r3, #1
 81033de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81033e0:	7ffb      	ldrb	r3, [r7, #31]
}
 81033e2:	4618      	mov	r0, r3
 81033e4:	3724      	adds	r7, #36	; 0x24
 81033e6:	46bd      	mov	sp, r7
 81033e8:	bd90      	pop	{r4, r7, pc}
 81033ea:	bf00      	nop

081033ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 81033ec:	b580      	push	{r7, lr}
 81033ee:	b086      	sub	sp, #24
 81033f0:	af00      	add	r7, sp, #0
 81033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	4a5d      	ldr	r2, [pc, #372]	; (8103570 <HAL_ADC_Start+0x184>)
 81033fa:	4293      	cmp	r3, r2
 81033fc:	d004      	beq.n	8103408 <HAL_ADC_Start+0x1c>
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	4a5c      	ldr	r2, [pc, #368]	; (8103574 <HAL_ADC_Start+0x188>)
 8103404:	4293      	cmp	r3, r2
 8103406:	d101      	bne.n	810340c <HAL_ADC_Start+0x20>
 8103408:	4b5b      	ldr	r3, [pc, #364]	; (8103578 <HAL_ADC_Start+0x18c>)
 810340a:	e000      	b.n	810340e <HAL_ADC_Start+0x22>
 810340c:	4b5b      	ldr	r3, [pc, #364]	; (810357c <HAL_ADC_Start+0x190>)
 810340e:	4618      	mov	r0, r3
 8103410:	f7ff fd30 	bl	8102e74 <LL_ADC_GetMultimode>
 8103414:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	4618      	mov	r0, r3
 810341c:	f7ff fe0a 	bl	8103034 <LL_ADC_REG_IsConversionOngoing>
 8103420:	4603      	mov	r3, r0
 8103422:	2b00      	cmp	r3, #0
 8103424:	f040 809c 	bne.w	8103560 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810342e:	2b01      	cmp	r3, #1
 8103430:	d101      	bne.n	8103436 <HAL_ADC_Start+0x4a>
 8103432:	2302      	movs	r3, #2
 8103434:	e097      	b.n	8103566 <HAL_ADC_Start+0x17a>
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	2201      	movs	r2, #1
 810343a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 810343e:	6878      	ldr	r0, [r7, #4]
 8103440:	f000 fde0 	bl	8104004 <ADC_Enable>
 8103444:	4603      	mov	r3, r0
 8103446:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8103448:	7dfb      	ldrb	r3, [r7, #23]
 810344a:	2b00      	cmp	r3, #0
 810344c:	f040 8083 	bne.w	8103556 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103454:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103458:	f023 0301 	bic.w	r3, r3, #1
 810345c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	4a42      	ldr	r2, [pc, #264]	; (8103574 <HAL_ADC_Start+0x188>)
 810346a:	4293      	cmp	r3, r2
 810346c:	d002      	beq.n	8103474 <HAL_ADC_Start+0x88>
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	e000      	b.n	8103476 <HAL_ADC_Start+0x8a>
 8103474:	4b3e      	ldr	r3, [pc, #248]	; (8103570 <HAL_ADC_Start+0x184>)
 8103476:	687a      	ldr	r2, [r7, #4]
 8103478:	6812      	ldr	r2, [r2, #0]
 810347a:	4293      	cmp	r3, r2
 810347c:	d002      	beq.n	8103484 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810347e:	693b      	ldr	r3, [r7, #16]
 8103480:	2b00      	cmp	r3, #0
 8103482:	d105      	bne.n	8103490 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103488:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810349c:	d106      	bne.n	81034ac <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034a2:	f023 0206 	bic.w	r2, r3, #6
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	659a      	str	r2, [r3, #88]	; 0x58
 81034aa:	e002      	b.n	81034b2 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	2200      	movs	r2, #0
 81034b0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81034b2:	687b      	ldr	r3, [r7, #4]
 81034b4:	681b      	ldr	r3, [r3, #0]
 81034b6:	221c      	movs	r2, #28
 81034b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	2200      	movs	r2, #0
 81034be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	4a2b      	ldr	r2, [pc, #172]	; (8103574 <HAL_ADC_Start+0x188>)
 81034c8:	4293      	cmp	r3, r2
 81034ca:	d002      	beq.n	81034d2 <HAL_ADC_Start+0xe6>
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	e000      	b.n	81034d4 <HAL_ADC_Start+0xe8>
 81034d2:	4b27      	ldr	r3, [pc, #156]	; (8103570 <HAL_ADC_Start+0x184>)
 81034d4:	687a      	ldr	r2, [r7, #4]
 81034d6:	6812      	ldr	r2, [r2, #0]
 81034d8:	4293      	cmp	r3, r2
 81034da:	d008      	beq.n	81034ee <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81034dc:	693b      	ldr	r3, [r7, #16]
 81034de:	2b00      	cmp	r3, #0
 81034e0:	d005      	beq.n	81034ee <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81034e2:	693b      	ldr	r3, [r7, #16]
 81034e4:	2b05      	cmp	r3, #5
 81034e6:	d002      	beq.n	81034ee <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81034e8:	693b      	ldr	r3, [r7, #16]
 81034ea:	2b09      	cmp	r3, #9
 81034ec:	d114      	bne.n	8103518 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	68db      	ldr	r3, [r3, #12]
 81034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81034f8:	2b00      	cmp	r3, #0
 81034fa:	d007      	beq.n	810350c <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103500:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8103504:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	681b      	ldr	r3, [r3, #0]
 8103510:	4618      	mov	r0, r3
 8103512:	f7ff fd67 	bl	8102fe4 <LL_ADC_REG_StartConversion>
 8103516:	e025      	b.n	8103564 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810351c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	681b      	ldr	r3, [r3, #0]
 8103528:	4a12      	ldr	r2, [pc, #72]	; (8103574 <HAL_ADC_Start+0x188>)
 810352a:	4293      	cmp	r3, r2
 810352c:	d002      	beq.n	8103534 <HAL_ADC_Start+0x148>
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	e000      	b.n	8103536 <HAL_ADC_Start+0x14a>
 8103534:	4b0e      	ldr	r3, [pc, #56]	; (8103570 <HAL_ADC_Start+0x184>)
 8103536:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8103538:	68fb      	ldr	r3, [r7, #12]
 810353a:	68db      	ldr	r3, [r3, #12]
 810353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103540:	2b00      	cmp	r3, #0
 8103542:	d00f      	beq.n	8103564 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103548:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 810354c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	655a      	str	r2, [r3, #84]	; 0x54
 8103554:	e006      	b.n	8103564 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	2200      	movs	r2, #0
 810355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 810355e:	e001      	b.n	8103564 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8103560:	2302      	movs	r3, #2
 8103562:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8103564:	7dfb      	ldrb	r3, [r7, #23]
}
 8103566:	4618      	mov	r0, r3
 8103568:	3718      	adds	r7, #24
 810356a:	46bd      	mov	sp, r7
 810356c:	bd80      	pop	{r7, pc}
 810356e:	bf00      	nop
 8103570:	40022000 	.word	0x40022000
 8103574:	40022100 	.word	0x40022100
 8103578:	40022300 	.word	0x40022300
 810357c:	58026300 	.word	0x58026300

08103580 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8103580:	b580      	push	{r7, lr}
 8103582:	b084      	sub	sp, #16
 8103584:	af00      	add	r7, sp, #0
 8103586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810358e:	2b01      	cmp	r3, #1
 8103590:	d101      	bne.n	8103596 <HAL_ADC_Stop+0x16>
 8103592:	2302      	movs	r3, #2
 8103594:	e023      	b.n	81035de <HAL_ADC_Stop+0x5e>
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	2201      	movs	r2, #1
 810359a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 810359e:	2103      	movs	r1, #3
 81035a0:	6878      	ldr	r0, [r7, #4]
 81035a2:	f000 fc73 	bl	8103e8c <ADC_ConversionStop>
 81035a6:	4603      	mov	r3, r0
 81035a8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 81035aa:	7bfb      	ldrb	r3, [r7, #15]
 81035ac:	2b00      	cmp	r3, #0
 81035ae:	d111      	bne.n	81035d4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 81035b0:	6878      	ldr	r0, [r7, #4]
 81035b2:	f000 fdb1 	bl	8104118 <ADC_Disable>
 81035b6:	4603      	mov	r3, r0
 81035b8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 81035ba:	7bfb      	ldrb	r3, [r7, #15]
 81035bc:	2b00      	cmp	r3, #0
 81035be:	d109      	bne.n	81035d4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 81035c8:	f023 0301 	bic.w	r3, r3, #1
 81035cc:	f043 0201 	orr.w	r2, r3, #1
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	2200      	movs	r2, #0
 81035d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 81035de:	4618      	mov	r0, r3
 81035e0:	3710      	adds	r7, #16
 81035e2:	46bd      	mov	sp, r7
 81035e4:	bd80      	pop	{r7, pc}
	...

081035e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 81035e8:	b580      	push	{r7, lr}
 81035ea:	b088      	sub	sp, #32
 81035ec:	af00      	add	r7, sp, #0
 81035ee:	6078      	str	r0, [r7, #4]
 81035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	4a72      	ldr	r2, [pc, #456]	; (81037c0 <HAL_ADC_PollForConversion+0x1d8>)
 81035f8:	4293      	cmp	r3, r2
 81035fa:	d004      	beq.n	8103606 <HAL_ADC_PollForConversion+0x1e>
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	4a70      	ldr	r2, [pc, #448]	; (81037c4 <HAL_ADC_PollForConversion+0x1dc>)
 8103602:	4293      	cmp	r3, r2
 8103604:	d101      	bne.n	810360a <HAL_ADC_PollForConversion+0x22>
 8103606:	4b70      	ldr	r3, [pc, #448]	; (81037c8 <HAL_ADC_PollForConversion+0x1e0>)
 8103608:	e000      	b.n	810360c <HAL_ADC_PollForConversion+0x24>
 810360a:	4b70      	ldr	r3, [pc, #448]	; (81037cc <HAL_ADC_PollForConversion+0x1e4>)
 810360c:	4618      	mov	r0, r3
 810360e:	f7ff fc31 	bl	8102e74 <LL_ADC_GetMultimode>
 8103612:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	691b      	ldr	r3, [r3, #16]
 8103618:	2b08      	cmp	r3, #8
 810361a:	d102      	bne.n	8103622 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 810361c:	2308      	movs	r3, #8
 810361e:	61fb      	str	r3, [r7, #28]
 8103620:	e037      	b.n	8103692 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103622:	697b      	ldr	r3, [r7, #20]
 8103624:	2b00      	cmp	r3, #0
 8103626:	d005      	beq.n	8103634 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103628:	697b      	ldr	r3, [r7, #20]
 810362a:	2b05      	cmp	r3, #5
 810362c:	d002      	beq.n	8103634 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810362e:	697b      	ldr	r3, [r7, #20]
 8103630:	2b09      	cmp	r3, #9
 8103632:	d111      	bne.n	8103658 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	68db      	ldr	r3, [r3, #12]
 810363a:	f003 0301 	and.w	r3, r3, #1
 810363e:	2b00      	cmp	r3, #0
 8103640:	d007      	beq.n	8103652 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103646:	f043 0220 	orr.w	r2, r3, #32
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 810364e:	2301      	movs	r3, #1
 8103650:	e0b1      	b.n	81037b6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8103652:	2304      	movs	r3, #4
 8103654:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8103656:	e01c      	b.n	8103692 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a58      	ldr	r2, [pc, #352]	; (81037c0 <HAL_ADC_PollForConversion+0x1d8>)
 810365e:	4293      	cmp	r3, r2
 8103660:	d004      	beq.n	810366c <HAL_ADC_PollForConversion+0x84>
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	4a57      	ldr	r2, [pc, #348]	; (81037c4 <HAL_ADC_PollForConversion+0x1dc>)
 8103668:	4293      	cmp	r3, r2
 810366a:	d101      	bne.n	8103670 <HAL_ADC_PollForConversion+0x88>
 810366c:	4b56      	ldr	r3, [pc, #344]	; (81037c8 <HAL_ADC_PollForConversion+0x1e0>)
 810366e:	e000      	b.n	8103672 <HAL_ADC_PollForConversion+0x8a>
 8103670:	4b56      	ldr	r3, [pc, #344]	; (81037cc <HAL_ADC_PollForConversion+0x1e4>)
 8103672:	4618      	mov	r0, r3
 8103674:	f7ff fc0c 	bl	8102e90 <LL_ADC_GetMultiDMATransfer>
 8103678:	4603      	mov	r3, r0
 810367a:	2b00      	cmp	r3, #0
 810367c:	d007      	beq.n	810368e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103682:	f043 0220 	orr.w	r2, r3, #32
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 810368a:	2301      	movs	r3, #1
 810368c:	e093      	b.n	81037b6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 810368e:	2304      	movs	r3, #4
 8103690:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8103692:	f7ff fa9d 	bl	8102bd0 <HAL_GetTick>
 8103696:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8103698:	e021      	b.n	81036de <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 810369a:	683b      	ldr	r3, [r7, #0]
 810369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036a0:	d01d      	beq.n	81036de <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 81036a2:	f7ff fa95 	bl	8102bd0 <HAL_GetTick>
 81036a6:	4602      	mov	r2, r0
 81036a8:	693b      	ldr	r3, [r7, #16]
 81036aa:	1ad3      	subs	r3, r2, r3
 81036ac:	683a      	ldr	r2, [r7, #0]
 81036ae:	429a      	cmp	r2, r3
 81036b0:	d302      	bcc.n	81036b8 <HAL_ADC_PollForConversion+0xd0>
 81036b2:	683b      	ldr	r3, [r7, #0]
 81036b4:	2b00      	cmp	r3, #0
 81036b6:	d112      	bne.n	81036de <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	681b      	ldr	r3, [r3, #0]
 81036bc:	681a      	ldr	r2, [r3, #0]
 81036be:	69fb      	ldr	r3, [r7, #28]
 81036c0:	4013      	ands	r3, r2
 81036c2:	2b00      	cmp	r3, #0
 81036c4:	d10b      	bne.n	81036de <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036ca:	f043 0204 	orr.w	r2, r3, #4
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	2200      	movs	r2, #0
 81036d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 81036da:	2303      	movs	r3, #3
 81036dc:	e06b      	b.n	81037b6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	681a      	ldr	r2, [r3, #0]
 81036e4:	69fb      	ldr	r3, [r7, #28]
 81036e6:	4013      	ands	r3, r2
 81036e8:	2b00      	cmp	r3, #0
 81036ea:	d0d6      	beq.n	810369a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	4618      	mov	r0, r3
 81036fe:	f7ff fb2b 	bl	8102d58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103702:	4603      	mov	r3, r0
 8103704:	2b00      	cmp	r3, #0
 8103706:	d01c      	beq.n	8103742 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	7d5b      	ldrb	r3, [r3, #21]
 810370c:	2b00      	cmp	r3, #0
 810370e:	d118      	bne.n	8103742 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	f003 0308 	and.w	r3, r3, #8
 810371a:	2b08      	cmp	r3, #8
 810371c:	d111      	bne.n	8103742 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810372e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103732:	2b00      	cmp	r3, #0
 8103734:	d105      	bne.n	8103742 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810373a:	f043 0201 	orr.w	r2, r3, #1
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4a1f      	ldr	r2, [pc, #124]	; (81037c4 <HAL_ADC_PollForConversion+0x1dc>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d002      	beq.n	8103752 <HAL_ADC_PollForConversion+0x16a>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	e000      	b.n	8103754 <HAL_ADC_PollForConversion+0x16c>
 8103752:	4b1b      	ldr	r3, [pc, #108]	; (81037c0 <HAL_ADC_PollForConversion+0x1d8>)
 8103754:	687a      	ldr	r2, [r7, #4]
 8103756:	6812      	ldr	r2, [r2, #0]
 8103758:	4293      	cmp	r3, r2
 810375a:	d008      	beq.n	810376e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810375c:	697b      	ldr	r3, [r7, #20]
 810375e:	2b00      	cmp	r3, #0
 8103760:	d005      	beq.n	810376e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103762:	697b      	ldr	r3, [r7, #20]
 8103764:	2b05      	cmp	r3, #5
 8103766:	d002      	beq.n	810376e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103768:	697b      	ldr	r3, [r7, #20]
 810376a:	2b09      	cmp	r3, #9
 810376c:	d104      	bne.n	8103778 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	681b      	ldr	r3, [r3, #0]
 8103772:	68db      	ldr	r3, [r3, #12]
 8103774:	61bb      	str	r3, [r7, #24]
 8103776:	e00c      	b.n	8103792 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	4a11      	ldr	r2, [pc, #68]	; (81037c4 <HAL_ADC_PollForConversion+0x1dc>)
 810377e:	4293      	cmp	r3, r2
 8103780:	d002      	beq.n	8103788 <HAL_ADC_PollForConversion+0x1a0>
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	e000      	b.n	810378a <HAL_ADC_PollForConversion+0x1a2>
 8103788:	4b0d      	ldr	r3, [pc, #52]	; (81037c0 <HAL_ADC_PollForConversion+0x1d8>)
 810378a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 810378c:	68fb      	ldr	r3, [r7, #12]
 810378e:	68db      	ldr	r3, [r3, #12]
 8103790:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8103792:	69fb      	ldr	r3, [r7, #28]
 8103794:	2b08      	cmp	r3, #8
 8103796:	d104      	bne.n	81037a2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	2208      	movs	r2, #8
 810379e:	601a      	str	r2, [r3, #0]
 81037a0:	e008      	b.n	81037b4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 81037a2:	69bb      	ldr	r3, [r7, #24]
 81037a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81037a8:	2b00      	cmp	r3, #0
 81037aa:	d103      	bne.n	81037b4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	220c      	movs	r2, #12
 81037b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 81037b4:	2300      	movs	r3, #0
}
 81037b6:	4618      	mov	r0, r3
 81037b8:	3720      	adds	r7, #32
 81037ba:	46bd      	mov	sp, r7
 81037bc:	bd80      	pop	{r7, pc}
 81037be:	bf00      	nop
 81037c0:	40022000 	.word	0x40022000
 81037c4:	40022100 	.word	0x40022100
 81037c8:	40022300 	.word	0x40022300
 81037cc:	58026300 	.word	0x58026300

081037d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 81037d0:	b480      	push	{r7}
 81037d2:	b083      	sub	sp, #12
 81037d4:	af00      	add	r7, sp, #0
 81037d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	681b      	ldr	r3, [r3, #0]
 81037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 81037de:	4618      	mov	r0, r3
 81037e0:	370c      	adds	r7, #12
 81037e2:	46bd      	mov	sp, r7
 81037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e8:	4770      	bx	lr
	...

081037ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81037ec:	b590      	push	{r4, r7, lr}
 81037ee:	b0a1      	sub	sp, #132	; 0x84
 81037f0:	af00      	add	r7, sp, #0
 81037f2:	6078      	str	r0, [r7, #4]
 81037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81037f6:	2300      	movs	r3, #0
 81037f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81037fc:	2300      	movs	r3, #0
 81037fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103800:	683b      	ldr	r3, [r7, #0]
 8103802:	68db      	ldr	r3, [r3, #12]
 8103804:	4a9d      	ldr	r2, [pc, #628]	; (8103a7c <HAL_ADC_ConfigChannel+0x290>)
 8103806:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810380e:	2b01      	cmp	r3, #1
 8103810:	d101      	bne.n	8103816 <HAL_ADC_ConfigChannel+0x2a>
 8103812:	2302      	movs	r3, #2
 8103814:	e321      	b.n	8103e5a <HAL_ADC_ConfigChannel+0x66e>
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	2201      	movs	r2, #1
 810381a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	681b      	ldr	r3, [r3, #0]
 8103822:	4618      	mov	r0, r3
 8103824:	f7ff fc06 	bl	8103034 <LL_ADC_REG_IsConversionOngoing>
 8103828:	4603      	mov	r3, r0
 810382a:	2b00      	cmp	r3, #0
 810382c:	f040 8306 	bne.w	8103e3c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103830:	683b      	ldr	r3, [r7, #0]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103838:	2b00      	cmp	r3, #0
 810383a:	d108      	bne.n	810384e <HAL_ADC_ConfigChannel+0x62>
 810383c:	683b      	ldr	r3, [r7, #0]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	0e9b      	lsrs	r3, r3, #26
 8103842:	f003 031f 	and.w	r3, r3, #31
 8103846:	2201      	movs	r2, #1
 8103848:	fa02 f303 	lsl.w	r3, r2, r3
 810384c:	e016      	b.n	810387c <HAL_ADC_ConfigChannel+0x90>
 810384e:	683b      	ldr	r3, [r7, #0]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103856:	fa93 f3a3 	rbit	r3, r3
 810385a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 810385c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810385e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103862:	2b00      	cmp	r3, #0
 8103864:	d101      	bne.n	810386a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8103866:	2320      	movs	r3, #32
 8103868:	e003      	b.n	8103872 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 810386a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810386c:	fab3 f383 	clz	r3, r3
 8103870:	b2db      	uxtb	r3, r3
 8103872:	f003 031f 	and.w	r3, r3, #31
 8103876:	2201      	movs	r2, #1
 8103878:	fa02 f303 	lsl.w	r3, r2, r3
 810387c:	687a      	ldr	r2, [r7, #4]
 810387e:	6812      	ldr	r2, [r2, #0]
 8103880:	69d1      	ldr	r1, [r2, #28]
 8103882:	687a      	ldr	r2, [r7, #4]
 8103884:	6812      	ldr	r2, [r2, #0]
 8103886:	430b      	orrs	r3, r1
 8103888:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	6818      	ldr	r0, [r3, #0]
 810388e:	683b      	ldr	r3, [r7, #0]
 8103890:	6859      	ldr	r1, [r3, #4]
 8103892:	683b      	ldr	r3, [r7, #0]
 8103894:	681b      	ldr	r3, [r3, #0]
 8103896:	461a      	mov	r2, r3
 8103898:	f7ff fa71 	bl	8102d7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	681b      	ldr	r3, [r3, #0]
 81038a0:	4618      	mov	r0, r3
 81038a2:	f7ff fbc7 	bl	8103034 <LL_ADC_REG_IsConversionOngoing>
 81038a6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	4618      	mov	r0, r3
 81038ae:	f7ff fbe8 	bl	8103082 <LL_ADC_INJ_IsConversionOngoing>
 81038b2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81038b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81038b6:	2b00      	cmp	r3, #0
 81038b8:	f040 80b3 	bne.w	8103a22 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81038bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81038be:	2b00      	cmp	r3, #0
 81038c0:	f040 80af 	bne.w	8103a22 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	6818      	ldr	r0, [r3, #0]
 81038c8:	683b      	ldr	r3, [r7, #0]
 81038ca:	6819      	ldr	r1, [r3, #0]
 81038cc:	683b      	ldr	r3, [r7, #0]
 81038ce:	689b      	ldr	r3, [r3, #8]
 81038d0:	461a      	mov	r2, r3
 81038d2:	f7ff fa80 	bl	8102dd6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81038d6:	4b6a      	ldr	r3, [pc, #424]	; (8103a80 <HAL_ADC_ConfigChannel+0x294>)
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81038de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81038e2:	d10b      	bne.n	81038fc <HAL_ADC_ConfigChannel+0x110>
 81038e4:	683b      	ldr	r3, [r7, #0]
 81038e6:	695a      	ldr	r2, [r3, #20]
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	68db      	ldr	r3, [r3, #12]
 81038ee:	089b      	lsrs	r3, r3, #2
 81038f0:	f003 0307 	and.w	r3, r3, #7
 81038f4:	005b      	lsls	r3, r3, #1
 81038f6:	fa02 f303 	lsl.w	r3, r2, r3
 81038fa:	e01d      	b.n	8103938 <HAL_ADC_ConfigChannel+0x14c>
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	68db      	ldr	r3, [r3, #12]
 8103902:	f003 0310 	and.w	r3, r3, #16
 8103906:	2b00      	cmp	r3, #0
 8103908:	d10b      	bne.n	8103922 <HAL_ADC_ConfigChannel+0x136>
 810390a:	683b      	ldr	r3, [r7, #0]
 810390c:	695a      	ldr	r2, [r3, #20]
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	681b      	ldr	r3, [r3, #0]
 8103912:	68db      	ldr	r3, [r3, #12]
 8103914:	089b      	lsrs	r3, r3, #2
 8103916:	f003 0307 	and.w	r3, r3, #7
 810391a:	005b      	lsls	r3, r3, #1
 810391c:	fa02 f303 	lsl.w	r3, r2, r3
 8103920:	e00a      	b.n	8103938 <HAL_ADC_ConfigChannel+0x14c>
 8103922:	683b      	ldr	r3, [r7, #0]
 8103924:	695a      	ldr	r2, [r3, #20]
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	68db      	ldr	r3, [r3, #12]
 810392c:	089b      	lsrs	r3, r3, #2
 810392e:	f003 0304 	and.w	r3, r3, #4
 8103932:	005b      	lsls	r3, r3, #1
 8103934:	fa02 f303 	lsl.w	r3, r2, r3
 8103938:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810393a:	683b      	ldr	r3, [r7, #0]
 810393c:	691b      	ldr	r3, [r3, #16]
 810393e:	2b04      	cmp	r3, #4
 8103940:	d027      	beq.n	8103992 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	6818      	ldr	r0, [r3, #0]
 8103946:	683b      	ldr	r3, [r7, #0]
 8103948:	6919      	ldr	r1, [r3, #16]
 810394a:	683b      	ldr	r3, [r7, #0]
 810394c:	681a      	ldr	r2, [r3, #0]
 810394e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103950:	f7ff f9ae 	bl	8102cb0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	6818      	ldr	r0, [r3, #0]
 8103958:	683b      	ldr	r3, [r7, #0]
 810395a:	6919      	ldr	r1, [r3, #16]
 810395c:	683b      	ldr	r3, [r7, #0]
 810395e:	7e5b      	ldrb	r3, [r3, #25]
 8103960:	2b01      	cmp	r3, #1
 8103962:	d102      	bne.n	810396a <HAL_ADC_ConfigChannel+0x17e>
 8103964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103968:	e000      	b.n	810396c <HAL_ADC_ConfigChannel+0x180>
 810396a:	2300      	movs	r3, #0
 810396c:	461a      	mov	r2, r3
 810396e:	f7ff f9d8 	bl	8102d22 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	6818      	ldr	r0, [r3, #0]
 8103976:	683b      	ldr	r3, [r7, #0]
 8103978:	6919      	ldr	r1, [r3, #16]
 810397a:	683b      	ldr	r3, [r7, #0]
 810397c:	7e1b      	ldrb	r3, [r3, #24]
 810397e:	2b01      	cmp	r3, #1
 8103980:	d102      	bne.n	8103988 <HAL_ADC_ConfigChannel+0x19c>
 8103982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103986:	e000      	b.n	810398a <HAL_ADC_ConfigChannel+0x19e>
 8103988:	2300      	movs	r3, #0
 810398a:	461a      	mov	r2, r3
 810398c:	f7ff f9b0 	bl	8102cf0 <LL_ADC_SetDataRightShift>
 8103990:	e047      	b.n	8103a22 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	681b      	ldr	r3, [r3, #0]
 8103996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810399c:	683b      	ldr	r3, [r7, #0]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	069b      	lsls	r3, r3, #26
 81039a2:	429a      	cmp	r2, r3
 81039a4:	d107      	bne.n	81039b6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81039b4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81039bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039c0:	683b      	ldr	r3, [r7, #0]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	069b      	lsls	r3, r3, #26
 81039c6:	429a      	cmp	r2, r3
 81039c8:	d107      	bne.n	81039da <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81039d8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81039e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039e4:	683b      	ldr	r3, [r7, #0]
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	069b      	lsls	r3, r3, #26
 81039ea:	429a      	cmp	r2, r3
 81039ec:	d107      	bne.n	81039fe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81039fc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103a04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a08:	683b      	ldr	r3, [r7, #0]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	069b      	lsls	r3, r3, #26
 8103a0e:	429a      	cmp	r2, r3
 8103a10:	d107      	bne.n	8103a22 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103a20:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	4618      	mov	r0, r3
 8103a28:	f7ff fab6 	bl	8102f98 <LL_ADC_IsEnabled>
 8103a2c:	4603      	mov	r3, r0
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	f040 820d 	bne.w	8103e4e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	6818      	ldr	r0, [r3, #0]
 8103a38:	683b      	ldr	r3, [r7, #0]
 8103a3a:	6819      	ldr	r1, [r3, #0]
 8103a3c:	683b      	ldr	r3, [r7, #0]
 8103a3e:	68db      	ldr	r3, [r3, #12]
 8103a40:	461a      	mov	r2, r3
 8103a42:	f7ff f9f3 	bl	8102e2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103a46:	683b      	ldr	r3, [r7, #0]
 8103a48:	68db      	ldr	r3, [r3, #12]
 8103a4a:	4a0c      	ldr	r2, [pc, #48]	; (8103a7c <HAL_ADC_ConfigChannel+0x290>)
 8103a4c:	4293      	cmp	r3, r2
 8103a4e:	f040 8133 	bne.w	8103cb8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103a56:	683b      	ldr	r3, [r7, #0]
 8103a58:	681b      	ldr	r3, [r3, #0]
 8103a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d110      	bne.n	8103a84 <HAL_ADC_ConfigChannel+0x298>
 8103a62:	683b      	ldr	r3, [r7, #0]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	0e9b      	lsrs	r3, r3, #26
 8103a68:	3301      	adds	r3, #1
 8103a6a:	f003 031f 	and.w	r3, r3, #31
 8103a6e:	2b09      	cmp	r3, #9
 8103a70:	bf94      	ite	ls
 8103a72:	2301      	movls	r3, #1
 8103a74:	2300      	movhi	r3, #0
 8103a76:	b2db      	uxtb	r3, r3
 8103a78:	e01e      	b.n	8103ab8 <HAL_ADC_ConfigChannel+0x2cc>
 8103a7a:	bf00      	nop
 8103a7c:	47ff0000 	.word	0x47ff0000
 8103a80:	5c001000 	.word	0x5c001000
 8103a84:	683b      	ldr	r3, [r7, #0]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8103a8c:	fa93 f3a3 	rbit	r3, r3
 8103a90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103a94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103a98:	2b00      	cmp	r3, #0
 8103a9a:	d101      	bne.n	8103aa0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8103a9c:	2320      	movs	r3, #32
 8103a9e:	e003      	b.n	8103aa8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103aa2:	fab3 f383 	clz	r3, r3
 8103aa6:	b2db      	uxtb	r3, r3
 8103aa8:	3301      	adds	r3, #1
 8103aaa:	f003 031f 	and.w	r3, r3, #31
 8103aae:	2b09      	cmp	r3, #9
 8103ab0:	bf94      	ite	ls
 8103ab2:	2301      	movls	r3, #1
 8103ab4:	2300      	movhi	r3, #0
 8103ab6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103ab8:	2b00      	cmp	r3, #0
 8103aba:	d079      	beq.n	8103bb0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103abc:	683b      	ldr	r3, [r7, #0]
 8103abe:	681b      	ldr	r3, [r3, #0]
 8103ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103ac4:	2b00      	cmp	r3, #0
 8103ac6:	d107      	bne.n	8103ad8 <HAL_ADC_ConfigChannel+0x2ec>
 8103ac8:	683b      	ldr	r3, [r7, #0]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	0e9b      	lsrs	r3, r3, #26
 8103ace:	3301      	adds	r3, #1
 8103ad0:	069b      	lsls	r3, r3, #26
 8103ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103ad6:	e015      	b.n	8103b04 <HAL_ADC_ConfigChannel+0x318>
 8103ad8:	683b      	ldr	r3, [r7, #0]
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103ae0:	fa93 f3a3 	rbit	r3, r3
 8103ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103ae8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d101      	bne.n	8103af4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103af0:	2320      	movs	r3, #32
 8103af2:	e003      	b.n	8103afc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103af6:	fab3 f383 	clz	r3, r3
 8103afa:	b2db      	uxtb	r3, r3
 8103afc:	3301      	adds	r3, #1
 8103afe:	069b      	lsls	r3, r3, #26
 8103b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b04:	683b      	ldr	r3, [r7, #0]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d109      	bne.n	8103b24 <HAL_ADC_ConfigChannel+0x338>
 8103b10:	683b      	ldr	r3, [r7, #0]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	0e9b      	lsrs	r3, r3, #26
 8103b16:	3301      	adds	r3, #1
 8103b18:	f003 031f 	and.w	r3, r3, #31
 8103b1c:	2101      	movs	r1, #1
 8103b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8103b22:	e017      	b.n	8103b54 <HAL_ADC_ConfigChannel+0x368>
 8103b24:	683b      	ldr	r3, [r7, #0]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103b2c:	fa93 f3a3 	rbit	r3, r3
 8103b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	d101      	bne.n	8103b40 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103b3c:	2320      	movs	r3, #32
 8103b3e:	e003      	b.n	8103b48 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103b42:	fab3 f383 	clz	r3, r3
 8103b46:	b2db      	uxtb	r3, r3
 8103b48:	3301      	adds	r3, #1
 8103b4a:	f003 031f 	and.w	r3, r3, #31
 8103b4e:	2101      	movs	r1, #1
 8103b50:	fa01 f303 	lsl.w	r3, r1, r3
 8103b54:	ea42 0103 	orr.w	r1, r2, r3
 8103b58:	683b      	ldr	r3, [r7, #0]
 8103b5a:	681b      	ldr	r3, [r3, #0]
 8103b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b60:	2b00      	cmp	r3, #0
 8103b62:	d10a      	bne.n	8103b7a <HAL_ADC_ConfigChannel+0x38e>
 8103b64:	683b      	ldr	r3, [r7, #0]
 8103b66:	681b      	ldr	r3, [r3, #0]
 8103b68:	0e9b      	lsrs	r3, r3, #26
 8103b6a:	3301      	adds	r3, #1
 8103b6c:	f003 021f 	and.w	r2, r3, #31
 8103b70:	4613      	mov	r3, r2
 8103b72:	005b      	lsls	r3, r3, #1
 8103b74:	4413      	add	r3, r2
 8103b76:	051b      	lsls	r3, r3, #20
 8103b78:	e018      	b.n	8103bac <HAL_ADC_ConfigChannel+0x3c0>
 8103b7a:	683b      	ldr	r3, [r7, #0]
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103b82:	fa93 f3a3 	rbit	r3, r3
 8103b86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b8e:	2b00      	cmp	r3, #0
 8103b90:	d101      	bne.n	8103b96 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103b92:	2320      	movs	r3, #32
 8103b94:	e003      	b.n	8103b9e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b98:	fab3 f383 	clz	r3, r3
 8103b9c:	b2db      	uxtb	r3, r3
 8103b9e:	3301      	adds	r3, #1
 8103ba0:	f003 021f 	and.w	r2, r3, #31
 8103ba4:	4613      	mov	r3, r2
 8103ba6:	005b      	lsls	r3, r3, #1
 8103ba8:	4413      	add	r3, r2
 8103baa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103bac:	430b      	orrs	r3, r1
 8103bae:	e07e      	b.n	8103cae <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103bb0:	683b      	ldr	r3, [r7, #0]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	d107      	bne.n	8103bcc <HAL_ADC_ConfigChannel+0x3e0>
 8103bbc:	683b      	ldr	r3, [r7, #0]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	0e9b      	lsrs	r3, r3, #26
 8103bc2:	3301      	adds	r3, #1
 8103bc4:	069b      	lsls	r3, r3, #26
 8103bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103bca:	e015      	b.n	8103bf8 <HAL_ADC_ConfigChannel+0x40c>
 8103bcc:	683b      	ldr	r3, [r7, #0]
 8103bce:	681b      	ldr	r3, [r3, #0]
 8103bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103bd4:	fa93 f3a3 	rbit	r3, r3
 8103bd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103be0:	2b00      	cmp	r3, #0
 8103be2:	d101      	bne.n	8103be8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103be4:	2320      	movs	r3, #32
 8103be6:	e003      	b.n	8103bf0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103bea:	fab3 f383 	clz	r3, r3
 8103bee:	b2db      	uxtb	r3, r3
 8103bf0:	3301      	adds	r3, #1
 8103bf2:	069b      	lsls	r3, r3, #26
 8103bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103bf8:	683b      	ldr	r3, [r7, #0]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103c00:	2b00      	cmp	r3, #0
 8103c02:	d109      	bne.n	8103c18 <HAL_ADC_ConfigChannel+0x42c>
 8103c04:	683b      	ldr	r3, [r7, #0]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	0e9b      	lsrs	r3, r3, #26
 8103c0a:	3301      	adds	r3, #1
 8103c0c:	f003 031f 	and.w	r3, r3, #31
 8103c10:	2101      	movs	r1, #1
 8103c12:	fa01 f303 	lsl.w	r3, r1, r3
 8103c16:	e017      	b.n	8103c48 <HAL_ADC_ConfigChannel+0x45c>
 8103c18:	683b      	ldr	r3, [r7, #0]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c1e:	69fb      	ldr	r3, [r7, #28]
 8103c20:	fa93 f3a3 	rbit	r3, r3
 8103c24:	61bb      	str	r3, [r7, #24]
  return result;
 8103c26:	69bb      	ldr	r3, [r7, #24]
 8103c28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103c2a:	6a3b      	ldr	r3, [r7, #32]
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d101      	bne.n	8103c34 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103c30:	2320      	movs	r3, #32
 8103c32:	e003      	b.n	8103c3c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103c34:	6a3b      	ldr	r3, [r7, #32]
 8103c36:	fab3 f383 	clz	r3, r3
 8103c3a:	b2db      	uxtb	r3, r3
 8103c3c:	3301      	adds	r3, #1
 8103c3e:	f003 031f 	and.w	r3, r3, #31
 8103c42:	2101      	movs	r1, #1
 8103c44:	fa01 f303 	lsl.w	r3, r1, r3
 8103c48:	ea42 0103 	orr.w	r1, r2, r3
 8103c4c:	683b      	ldr	r3, [r7, #0]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	d10d      	bne.n	8103c74 <HAL_ADC_ConfigChannel+0x488>
 8103c58:	683b      	ldr	r3, [r7, #0]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	0e9b      	lsrs	r3, r3, #26
 8103c5e:	3301      	adds	r3, #1
 8103c60:	f003 021f 	and.w	r2, r3, #31
 8103c64:	4613      	mov	r3, r2
 8103c66:	005b      	lsls	r3, r3, #1
 8103c68:	4413      	add	r3, r2
 8103c6a:	3b1e      	subs	r3, #30
 8103c6c:	051b      	lsls	r3, r3, #20
 8103c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103c72:	e01b      	b.n	8103cac <HAL_ADC_ConfigChannel+0x4c0>
 8103c74:	683b      	ldr	r3, [r7, #0]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c7a:	693b      	ldr	r3, [r7, #16]
 8103c7c:	fa93 f3a3 	rbit	r3, r3
 8103c80:	60fb      	str	r3, [r7, #12]
  return result;
 8103c82:	68fb      	ldr	r3, [r7, #12]
 8103c84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103c86:	697b      	ldr	r3, [r7, #20]
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d101      	bne.n	8103c90 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103c8c:	2320      	movs	r3, #32
 8103c8e:	e003      	b.n	8103c98 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103c90:	697b      	ldr	r3, [r7, #20]
 8103c92:	fab3 f383 	clz	r3, r3
 8103c96:	b2db      	uxtb	r3, r3
 8103c98:	3301      	adds	r3, #1
 8103c9a:	f003 021f 	and.w	r2, r3, #31
 8103c9e:	4613      	mov	r3, r2
 8103ca0:	005b      	lsls	r3, r3, #1
 8103ca2:	4413      	add	r3, r2
 8103ca4:	3b1e      	subs	r3, #30
 8103ca6:	051b      	lsls	r3, r3, #20
 8103ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103cac:	430b      	orrs	r3, r1
 8103cae:	683a      	ldr	r2, [r7, #0]
 8103cb0:	6892      	ldr	r2, [r2, #8]
 8103cb2:	4619      	mov	r1, r3
 8103cb4:	f7ff f88f 	bl	8102dd6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103cb8:	683b      	ldr	r3, [r7, #0]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	2b00      	cmp	r3, #0
 8103cbe:	f280 80c6 	bge.w	8103e4e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	681b      	ldr	r3, [r3, #0]
 8103cc6:	4a67      	ldr	r2, [pc, #412]	; (8103e64 <HAL_ADC_ConfigChannel+0x678>)
 8103cc8:	4293      	cmp	r3, r2
 8103cca:	d004      	beq.n	8103cd6 <HAL_ADC_ConfigChannel+0x4ea>
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	4a65      	ldr	r2, [pc, #404]	; (8103e68 <HAL_ADC_ConfigChannel+0x67c>)
 8103cd2:	4293      	cmp	r3, r2
 8103cd4:	d101      	bne.n	8103cda <HAL_ADC_ConfigChannel+0x4ee>
 8103cd6:	4b65      	ldr	r3, [pc, #404]	; (8103e6c <HAL_ADC_ConfigChannel+0x680>)
 8103cd8:	e000      	b.n	8103cdc <HAL_ADC_ConfigChannel+0x4f0>
 8103cda:	4b65      	ldr	r3, [pc, #404]	; (8103e70 <HAL_ADC_ConfigChannel+0x684>)
 8103cdc:	4618      	mov	r0, r3
 8103cde:	f7fe ffd9 	bl	8102c94 <LL_ADC_GetCommonPathInternalCh>
 8103ce2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	681b      	ldr	r3, [r3, #0]
 8103ce8:	4a5e      	ldr	r2, [pc, #376]	; (8103e64 <HAL_ADC_ConfigChannel+0x678>)
 8103cea:	4293      	cmp	r3, r2
 8103cec:	d004      	beq.n	8103cf8 <HAL_ADC_ConfigChannel+0x50c>
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681b      	ldr	r3, [r3, #0]
 8103cf2:	4a5d      	ldr	r2, [pc, #372]	; (8103e68 <HAL_ADC_ConfigChannel+0x67c>)
 8103cf4:	4293      	cmp	r3, r2
 8103cf6:	d10e      	bne.n	8103d16 <HAL_ADC_ConfigChannel+0x52a>
 8103cf8:	485a      	ldr	r0, [pc, #360]	; (8103e64 <HAL_ADC_ConfigChannel+0x678>)
 8103cfa:	f7ff f94d 	bl	8102f98 <LL_ADC_IsEnabled>
 8103cfe:	4604      	mov	r4, r0
 8103d00:	4859      	ldr	r0, [pc, #356]	; (8103e68 <HAL_ADC_ConfigChannel+0x67c>)
 8103d02:	f7ff f949 	bl	8102f98 <LL_ADC_IsEnabled>
 8103d06:	4603      	mov	r3, r0
 8103d08:	4323      	orrs	r3, r4
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	bf0c      	ite	eq
 8103d0e:	2301      	moveq	r3, #1
 8103d10:	2300      	movne	r3, #0
 8103d12:	b2db      	uxtb	r3, r3
 8103d14:	e008      	b.n	8103d28 <HAL_ADC_ConfigChannel+0x53c>
 8103d16:	4857      	ldr	r0, [pc, #348]	; (8103e74 <HAL_ADC_ConfigChannel+0x688>)
 8103d18:	f7ff f93e 	bl	8102f98 <LL_ADC_IsEnabled>
 8103d1c:	4603      	mov	r3, r0
 8103d1e:	2b00      	cmp	r3, #0
 8103d20:	bf0c      	ite	eq
 8103d22:	2301      	moveq	r3, #1
 8103d24:	2300      	movne	r3, #0
 8103d26:	b2db      	uxtb	r3, r3
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	d07d      	beq.n	8103e28 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103d2c:	683b      	ldr	r3, [r7, #0]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	4a51      	ldr	r2, [pc, #324]	; (8103e78 <HAL_ADC_ConfigChannel+0x68c>)
 8103d32:	4293      	cmp	r3, r2
 8103d34:	d130      	bne.n	8103d98 <HAL_ADC_ConfigChannel+0x5ac>
 8103d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103d3c:	2b00      	cmp	r3, #0
 8103d3e:	d12b      	bne.n	8103d98 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	681b      	ldr	r3, [r3, #0]
 8103d44:	4a4b      	ldr	r2, [pc, #300]	; (8103e74 <HAL_ADC_ConfigChannel+0x688>)
 8103d46:	4293      	cmp	r3, r2
 8103d48:	f040 8081 	bne.w	8103e4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	4a44      	ldr	r2, [pc, #272]	; (8103e64 <HAL_ADC_ConfigChannel+0x678>)
 8103d52:	4293      	cmp	r3, r2
 8103d54:	d004      	beq.n	8103d60 <HAL_ADC_ConfigChannel+0x574>
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	681b      	ldr	r3, [r3, #0]
 8103d5a:	4a43      	ldr	r2, [pc, #268]	; (8103e68 <HAL_ADC_ConfigChannel+0x67c>)
 8103d5c:	4293      	cmp	r3, r2
 8103d5e:	d101      	bne.n	8103d64 <HAL_ADC_ConfigChannel+0x578>
 8103d60:	4a42      	ldr	r2, [pc, #264]	; (8103e6c <HAL_ADC_ConfigChannel+0x680>)
 8103d62:	e000      	b.n	8103d66 <HAL_ADC_ConfigChannel+0x57a>
 8103d64:	4a42      	ldr	r2, [pc, #264]	; (8103e70 <HAL_ADC_ConfigChannel+0x684>)
 8103d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103d6c:	4619      	mov	r1, r3
 8103d6e:	4610      	mov	r0, r2
 8103d70:	f7fe ff7d 	bl	8102c6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103d74:	4b41      	ldr	r3, [pc, #260]	; (8103e7c <HAL_ADC_ConfigChannel+0x690>)
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	099b      	lsrs	r3, r3, #6
 8103d7a:	4a41      	ldr	r2, [pc, #260]	; (8103e80 <HAL_ADC_ConfigChannel+0x694>)
 8103d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8103d80:	099b      	lsrs	r3, r3, #6
 8103d82:	3301      	adds	r3, #1
 8103d84:	005b      	lsls	r3, r3, #1
 8103d86:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d88:	e002      	b.n	8103d90 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103d8a:	68bb      	ldr	r3, [r7, #8]
 8103d8c:	3b01      	subs	r3, #1
 8103d8e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d90:	68bb      	ldr	r3, [r7, #8]
 8103d92:	2b00      	cmp	r3, #0
 8103d94:	d1f9      	bne.n	8103d8a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103d96:	e05a      	b.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103d98:	683b      	ldr	r3, [r7, #0]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	4a39      	ldr	r2, [pc, #228]	; (8103e84 <HAL_ADC_ConfigChannel+0x698>)
 8103d9e:	4293      	cmp	r3, r2
 8103da0:	d11e      	bne.n	8103de0 <HAL_ADC_ConfigChannel+0x5f4>
 8103da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	d119      	bne.n	8103de0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	4a30      	ldr	r2, [pc, #192]	; (8103e74 <HAL_ADC_ConfigChannel+0x688>)
 8103db2:	4293      	cmp	r3, r2
 8103db4:	d14b      	bne.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	4a2a      	ldr	r2, [pc, #168]	; (8103e64 <HAL_ADC_ConfigChannel+0x678>)
 8103dbc:	4293      	cmp	r3, r2
 8103dbe:	d004      	beq.n	8103dca <HAL_ADC_ConfigChannel+0x5de>
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	4a28      	ldr	r2, [pc, #160]	; (8103e68 <HAL_ADC_ConfigChannel+0x67c>)
 8103dc6:	4293      	cmp	r3, r2
 8103dc8:	d101      	bne.n	8103dce <HAL_ADC_ConfigChannel+0x5e2>
 8103dca:	4a28      	ldr	r2, [pc, #160]	; (8103e6c <HAL_ADC_ConfigChannel+0x680>)
 8103dcc:	e000      	b.n	8103dd0 <HAL_ADC_ConfigChannel+0x5e4>
 8103dce:	4a28      	ldr	r2, [pc, #160]	; (8103e70 <HAL_ADC_ConfigChannel+0x684>)
 8103dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103dd6:	4619      	mov	r1, r3
 8103dd8:	4610      	mov	r0, r2
 8103dda:	f7fe ff48 	bl	8102c6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103dde:	e036      	b.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103de0:	683b      	ldr	r3, [r7, #0]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	4a28      	ldr	r2, [pc, #160]	; (8103e88 <HAL_ADC_ConfigChannel+0x69c>)
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d131      	bne.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
 8103dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103df0:	2b00      	cmp	r3, #0
 8103df2:	d12c      	bne.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	4a1e      	ldr	r2, [pc, #120]	; (8103e74 <HAL_ADC_ConfigChannel+0x688>)
 8103dfa:	4293      	cmp	r3, r2
 8103dfc:	d127      	bne.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	4a18      	ldr	r2, [pc, #96]	; (8103e64 <HAL_ADC_ConfigChannel+0x678>)
 8103e04:	4293      	cmp	r3, r2
 8103e06:	d004      	beq.n	8103e12 <HAL_ADC_ConfigChannel+0x626>
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	681b      	ldr	r3, [r3, #0]
 8103e0c:	4a16      	ldr	r2, [pc, #88]	; (8103e68 <HAL_ADC_ConfigChannel+0x67c>)
 8103e0e:	4293      	cmp	r3, r2
 8103e10:	d101      	bne.n	8103e16 <HAL_ADC_ConfigChannel+0x62a>
 8103e12:	4a16      	ldr	r2, [pc, #88]	; (8103e6c <HAL_ADC_ConfigChannel+0x680>)
 8103e14:	e000      	b.n	8103e18 <HAL_ADC_ConfigChannel+0x62c>
 8103e16:	4a16      	ldr	r2, [pc, #88]	; (8103e70 <HAL_ADC_ConfigChannel+0x684>)
 8103e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103e1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103e1e:	4619      	mov	r1, r3
 8103e20:	4610      	mov	r0, r2
 8103e22:	f7fe ff24 	bl	8102c6e <LL_ADC_SetCommonPathInternalCh>
 8103e26:	e012      	b.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e2c:	f043 0220 	orr.w	r2, r3, #32
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103e34:	2301      	movs	r3, #1
 8103e36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103e3a:	e008      	b.n	8103e4e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e40:	f043 0220 	orr.w	r2, r3, #32
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103e48:	2301      	movs	r3, #1
 8103e4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	2200      	movs	r2, #0
 8103e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103e56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103e5a:	4618      	mov	r0, r3
 8103e5c:	3784      	adds	r7, #132	; 0x84
 8103e5e:	46bd      	mov	sp, r7
 8103e60:	bd90      	pop	{r4, r7, pc}
 8103e62:	bf00      	nop
 8103e64:	40022000 	.word	0x40022000
 8103e68:	40022100 	.word	0x40022100
 8103e6c:	40022300 	.word	0x40022300
 8103e70:	58026300 	.word	0x58026300
 8103e74:	58026000 	.word	0x58026000
 8103e78:	cb840000 	.word	0xcb840000
 8103e7c:	10000000 	.word	0x10000000
 8103e80:	053e2d63 	.word	0x053e2d63
 8103e84:	c7520000 	.word	0xc7520000
 8103e88:	cfb80000 	.word	0xcfb80000

08103e8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8103e8c:	b580      	push	{r7, lr}
 8103e8e:	b088      	sub	sp, #32
 8103e90:	af00      	add	r7, sp, #0
 8103e92:	6078      	str	r0, [r7, #4]
 8103e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8103e96:	2300      	movs	r3, #0
 8103e98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8103e9a:	683b      	ldr	r3, [r7, #0]
 8103e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	4618      	mov	r0, r3
 8103ea4:	f7ff f8c6 	bl	8103034 <LL_ADC_REG_IsConversionOngoing>
 8103ea8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	4618      	mov	r0, r3
 8103eb0:	f7ff f8e7 	bl	8103082 <LL_ADC_INJ_IsConversionOngoing>
 8103eb4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8103eb6:	693b      	ldr	r3, [r7, #16]
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d103      	bne.n	8103ec4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8103ebc:	68fb      	ldr	r3, [r7, #12]
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	f000 8098 	beq.w	8103ff4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	68db      	ldr	r3, [r3, #12]
 8103eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103ece:	2b00      	cmp	r3, #0
 8103ed0:	d02a      	beq.n	8103f28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	7d5b      	ldrb	r3, [r3, #21]
 8103ed6:	2b01      	cmp	r3, #1
 8103ed8:	d126      	bne.n	8103f28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	7d1b      	ldrb	r3, [r3, #20]
 8103ede:	2b01      	cmp	r3, #1
 8103ee0:	d122      	bne.n	8103f28 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8103ee2:	2301      	movs	r3, #1
 8103ee4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8103ee6:	e014      	b.n	8103f12 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8103ee8:	69fb      	ldr	r3, [r7, #28]
 8103eea:	4a45      	ldr	r2, [pc, #276]	; (8104000 <ADC_ConversionStop+0x174>)
 8103eec:	4293      	cmp	r3, r2
 8103eee:	d90d      	bls.n	8103f0c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ef4:	f043 0210 	orr.w	r2, r3, #16
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f00:	f043 0201 	orr.w	r2, r3, #1
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8103f08:	2301      	movs	r3, #1
 8103f0a:	e074      	b.n	8103ff6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8103f0c:	69fb      	ldr	r3, [r7, #28]
 8103f0e:	3301      	adds	r3, #1
 8103f10:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103f1c:	2b40      	cmp	r3, #64	; 0x40
 8103f1e:	d1e3      	bne.n	8103ee8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	2240      	movs	r2, #64	; 0x40
 8103f26:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8103f28:	69bb      	ldr	r3, [r7, #24]
 8103f2a:	2b02      	cmp	r3, #2
 8103f2c:	d014      	beq.n	8103f58 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	681b      	ldr	r3, [r3, #0]
 8103f32:	4618      	mov	r0, r3
 8103f34:	f7ff f87e 	bl	8103034 <LL_ADC_REG_IsConversionOngoing>
 8103f38:	4603      	mov	r3, r0
 8103f3a:	2b00      	cmp	r3, #0
 8103f3c:	d00c      	beq.n	8103f58 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	4618      	mov	r0, r3
 8103f44:	f7ff f83b 	bl	8102fbe <LL_ADC_IsDisableOngoing>
 8103f48:	4603      	mov	r3, r0
 8103f4a:	2b00      	cmp	r3, #0
 8103f4c:	d104      	bne.n	8103f58 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4618      	mov	r0, r3
 8103f54:	f7ff f85a 	bl	810300c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8103f58:	69bb      	ldr	r3, [r7, #24]
 8103f5a:	2b01      	cmp	r3, #1
 8103f5c:	d014      	beq.n	8103f88 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	4618      	mov	r0, r3
 8103f64:	f7ff f88d 	bl	8103082 <LL_ADC_INJ_IsConversionOngoing>
 8103f68:	4603      	mov	r3, r0
 8103f6a:	2b00      	cmp	r3, #0
 8103f6c:	d00c      	beq.n	8103f88 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	4618      	mov	r0, r3
 8103f74:	f7ff f823 	bl	8102fbe <LL_ADC_IsDisableOngoing>
 8103f78:	4603      	mov	r3, r0
 8103f7a:	2b00      	cmp	r3, #0
 8103f7c:	d104      	bne.n	8103f88 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	4618      	mov	r0, r3
 8103f84:	f7ff f869 	bl	810305a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8103f88:	69bb      	ldr	r3, [r7, #24]
 8103f8a:	2b02      	cmp	r3, #2
 8103f8c:	d005      	beq.n	8103f9a <ADC_ConversionStop+0x10e>
 8103f8e:	69bb      	ldr	r3, [r7, #24]
 8103f90:	2b03      	cmp	r3, #3
 8103f92:	d105      	bne.n	8103fa0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8103f94:	230c      	movs	r3, #12
 8103f96:	617b      	str	r3, [r7, #20]
        break;
 8103f98:	e005      	b.n	8103fa6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8103f9a:	2308      	movs	r3, #8
 8103f9c:	617b      	str	r3, [r7, #20]
        break;
 8103f9e:	e002      	b.n	8103fa6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8103fa0:	2304      	movs	r3, #4
 8103fa2:	617b      	str	r3, [r7, #20]
        break;
 8103fa4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8103fa6:	f7fe fe13 	bl	8102bd0 <HAL_GetTick>
 8103faa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8103fac:	e01b      	b.n	8103fe6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8103fae:	f7fe fe0f 	bl	8102bd0 <HAL_GetTick>
 8103fb2:	4602      	mov	r2, r0
 8103fb4:	68bb      	ldr	r3, [r7, #8]
 8103fb6:	1ad3      	subs	r3, r2, r3
 8103fb8:	2b05      	cmp	r3, #5
 8103fba:	d914      	bls.n	8103fe6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	689a      	ldr	r2, [r3, #8]
 8103fc2:	697b      	ldr	r3, [r7, #20]
 8103fc4:	4013      	ands	r3, r2
 8103fc6:	2b00      	cmp	r3, #0
 8103fc8:	d00d      	beq.n	8103fe6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fce:	f043 0210 	orr.w	r2, r3, #16
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103fda:	f043 0201 	orr.w	r2, r3, #1
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8103fe2:	2301      	movs	r3, #1
 8103fe4:	e007      	b.n	8103ff6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	689a      	ldr	r2, [r3, #8]
 8103fec:	697b      	ldr	r3, [r7, #20]
 8103fee:	4013      	ands	r3, r2
 8103ff0:	2b00      	cmp	r3, #0
 8103ff2:	d1dc      	bne.n	8103fae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8103ff4:	2300      	movs	r3, #0
}
 8103ff6:	4618      	mov	r0, r3
 8103ff8:	3720      	adds	r7, #32
 8103ffa:	46bd      	mov	sp, r7
 8103ffc:	bd80      	pop	{r7, pc}
 8103ffe:	bf00      	nop
 8104000:	000cdbff 	.word	0x000cdbff

08104004 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8104004:	b580      	push	{r7, lr}
 8104006:	b084      	sub	sp, #16
 8104008:	af00      	add	r7, sp, #0
 810400a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	681b      	ldr	r3, [r3, #0]
 8104010:	4618      	mov	r0, r3
 8104012:	f7fe ffc1 	bl	8102f98 <LL_ADC_IsEnabled>
 8104016:	4603      	mov	r3, r0
 8104018:	2b00      	cmp	r3, #0
 810401a:	d16e      	bne.n	81040fa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	681b      	ldr	r3, [r3, #0]
 8104020:	689a      	ldr	r2, [r3, #8]
 8104022:	4b38      	ldr	r3, [pc, #224]	; (8104104 <ADC_Enable+0x100>)
 8104024:	4013      	ands	r3, r2
 8104026:	2b00      	cmp	r3, #0
 8104028:	d00d      	beq.n	8104046 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810402e:	f043 0210 	orr.w	r2, r3, #16
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810403a:	f043 0201 	orr.w	r2, r3, #1
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8104042:	2301      	movs	r3, #1
 8104044:	e05a      	b.n	81040fc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4618      	mov	r0, r3
 810404c:	f7fe ff7c 	bl	8102f48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8104050:	f7fe fdbe 	bl	8102bd0 <HAL_GetTick>
 8104054:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a2b      	ldr	r2, [pc, #172]	; (8104108 <ADC_Enable+0x104>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d004      	beq.n	810406a <ADC_Enable+0x66>
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a29      	ldr	r2, [pc, #164]	; (810410c <ADC_Enable+0x108>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d101      	bne.n	810406e <ADC_Enable+0x6a>
 810406a:	4b29      	ldr	r3, [pc, #164]	; (8104110 <ADC_Enable+0x10c>)
 810406c:	e000      	b.n	8104070 <ADC_Enable+0x6c>
 810406e:	4b29      	ldr	r3, [pc, #164]	; (8104114 <ADC_Enable+0x110>)
 8104070:	4618      	mov	r0, r3
 8104072:	f7fe feff 	bl	8102e74 <LL_ADC_GetMultimode>
 8104076:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	4a23      	ldr	r2, [pc, #140]	; (810410c <ADC_Enable+0x108>)
 810407e:	4293      	cmp	r3, r2
 8104080:	d002      	beq.n	8104088 <ADC_Enable+0x84>
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	e000      	b.n	810408a <ADC_Enable+0x86>
 8104088:	4b1f      	ldr	r3, [pc, #124]	; (8104108 <ADC_Enable+0x104>)
 810408a:	687a      	ldr	r2, [r7, #4]
 810408c:	6812      	ldr	r2, [r2, #0]
 810408e:	4293      	cmp	r3, r2
 8104090:	d02c      	beq.n	81040ec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104092:	68bb      	ldr	r3, [r7, #8]
 8104094:	2b00      	cmp	r3, #0
 8104096:	d130      	bne.n	81040fa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8104098:	e028      	b.n	81040ec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	4618      	mov	r0, r3
 81040a0:	f7fe ff7a 	bl	8102f98 <LL_ADC_IsEnabled>
 81040a4:	4603      	mov	r3, r0
 81040a6:	2b00      	cmp	r3, #0
 81040a8:	d104      	bne.n	81040b4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	681b      	ldr	r3, [r3, #0]
 81040ae:	4618      	mov	r0, r3
 81040b0:	f7fe ff4a 	bl	8102f48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81040b4:	f7fe fd8c 	bl	8102bd0 <HAL_GetTick>
 81040b8:	4602      	mov	r2, r0
 81040ba:	68fb      	ldr	r3, [r7, #12]
 81040bc:	1ad3      	subs	r3, r2, r3
 81040be:	2b02      	cmp	r3, #2
 81040c0:	d914      	bls.n	81040ec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	f003 0301 	and.w	r3, r3, #1
 81040cc:	2b01      	cmp	r3, #1
 81040ce:	d00d      	beq.n	81040ec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040d4:	f043 0210 	orr.w	r2, r3, #16
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81040e0:	f043 0201 	orr.w	r2, r3, #1
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 81040e8:	2301      	movs	r3, #1
 81040ea:	e007      	b.n	81040fc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	681b      	ldr	r3, [r3, #0]
 81040f2:	f003 0301 	and.w	r3, r3, #1
 81040f6:	2b01      	cmp	r3, #1
 81040f8:	d1cf      	bne.n	810409a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81040fa:	2300      	movs	r3, #0
}
 81040fc:	4618      	mov	r0, r3
 81040fe:	3710      	adds	r7, #16
 8104100:	46bd      	mov	sp, r7
 8104102:	bd80      	pop	{r7, pc}
 8104104:	8000003f 	.word	0x8000003f
 8104108:	40022000 	.word	0x40022000
 810410c:	40022100 	.word	0x40022100
 8104110:	40022300 	.word	0x40022300
 8104114:	58026300 	.word	0x58026300

08104118 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8104118:	b580      	push	{r7, lr}
 810411a:	b084      	sub	sp, #16
 810411c:	af00      	add	r7, sp, #0
 810411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	4618      	mov	r0, r3
 8104126:	f7fe ff4a 	bl	8102fbe <LL_ADC_IsDisableOngoing>
 810412a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	4618      	mov	r0, r3
 8104132:	f7fe ff31 	bl	8102f98 <LL_ADC_IsEnabled>
 8104136:	4603      	mov	r3, r0
 8104138:	2b00      	cmp	r3, #0
 810413a:	d047      	beq.n	81041cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	2b00      	cmp	r3, #0
 8104140:	d144      	bne.n	81041cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	689b      	ldr	r3, [r3, #8]
 8104148:	f003 030d 	and.w	r3, r3, #13
 810414c:	2b01      	cmp	r3, #1
 810414e:	d10c      	bne.n	810416a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	4618      	mov	r0, r3
 8104156:	f7fe ff0b 	bl	8102f70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	2203      	movs	r2, #3
 8104160:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8104162:	f7fe fd35 	bl	8102bd0 <HAL_GetTick>
 8104166:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104168:	e029      	b.n	81041be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810416e:	f043 0210 	orr.w	r2, r3, #16
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810417a:	f043 0201 	orr.w	r2, r3, #1
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8104182:	2301      	movs	r3, #1
 8104184:	e023      	b.n	81041ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8104186:	f7fe fd23 	bl	8102bd0 <HAL_GetTick>
 810418a:	4602      	mov	r2, r0
 810418c:	68bb      	ldr	r3, [r7, #8]
 810418e:	1ad3      	subs	r3, r2, r3
 8104190:	2b02      	cmp	r3, #2
 8104192:	d914      	bls.n	81041be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	689b      	ldr	r3, [r3, #8]
 810419a:	f003 0301 	and.w	r3, r3, #1
 810419e:	2b00      	cmp	r3, #0
 81041a0:	d00d      	beq.n	81041be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041a6:	f043 0210 	orr.w	r2, r3, #16
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041b2:	f043 0201 	orr.w	r2, r3, #1
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 81041ba:	2301      	movs	r3, #1
 81041bc:	e007      	b.n	81041ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	681b      	ldr	r3, [r3, #0]
 81041c2:	689b      	ldr	r3, [r3, #8]
 81041c4:	f003 0301 	and.w	r3, r3, #1
 81041c8:	2b00      	cmp	r3, #0
 81041ca:	d1dc      	bne.n	8104186 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81041cc:	2300      	movs	r3, #0
}
 81041ce:	4618      	mov	r0, r3
 81041d0:	3710      	adds	r7, #16
 81041d2:	46bd      	mov	sp, r7
 81041d4:	bd80      	pop	{r7, pc}
	...

081041d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81041d8:	b580      	push	{r7, lr}
 81041da:	b084      	sub	sp, #16
 81041dc:	af00      	add	r7, sp, #0
 81041de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	4a79      	ldr	r2, [pc, #484]	; (81043cc <ADC_ConfigureBoostMode+0x1f4>)
 81041e6:	4293      	cmp	r3, r2
 81041e8:	d004      	beq.n	81041f4 <ADC_ConfigureBoostMode+0x1c>
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	4a78      	ldr	r2, [pc, #480]	; (81043d0 <ADC_ConfigureBoostMode+0x1f8>)
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d109      	bne.n	8104208 <ADC_ConfigureBoostMode+0x30>
 81041f4:	4b77      	ldr	r3, [pc, #476]	; (81043d4 <ADC_ConfigureBoostMode+0x1fc>)
 81041f6:	689b      	ldr	r3, [r3, #8]
 81041f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81041fc:	2b00      	cmp	r3, #0
 81041fe:	bf14      	ite	ne
 8104200:	2301      	movne	r3, #1
 8104202:	2300      	moveq	r3, #0
 8104204:	b2db      	uxtb	r3, r3
 8104206:	e008      	b.n	810421a <ADC_ConfigureBoostMode+0x42>
 8104208:	4b73      	ldr	r3, [pc, #460]	; (81043d8 <ADC_ConfigureBoostMode+0x200>)
 810420a:	689b      	ldr	r3, [r3, #8]
 810420c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104210:	2b00      	cmp	r3, #0
 8104212:	bf14      	ite	ne
 8104214:	2301      	movne	r3, #1
 8104216:	2300      	moveq	r3, #0
 8104218:	b2db      	uxtb	r3, r3
 810421a:	2b00      	cmp	r3, #0
 810421c:	d01c      	beq.n	8104258 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810421e:	f000 ff2b 	bl	8105078 <HAL_RCC_GetHCLKFreq>
 8104222:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	685b      	ldr	r3, [r3, #4]
 8104228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810422c:	d010      	beq.n	8104250 <ADC_ConfigureBoostMode+0x78>
 810422e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104232:	d871      	bhi.n	8104318 <ADC_ConfigureBoostMode+0x140>
 8104234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104238:	d002      	beq.n	8104240 <ADC_ConfigureBoostMode+0x68>
 810423a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810423e:	d16b      	bne.n	8104318 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	685b      	ldr	r3, [r3, #4]
 8104244:	0c1b      	lsrs	r3, r3, #16
 8104246:	68fa      	ldr	r2, [r7, #12]
 8104248:	fbb2 f3f3 	udiv	r3, r2, r3
 810424c:	60fb      	str	r3, [r7, #12]
        break;
 810424e:	e066      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8104250:	68fb      	ldr	r3, [r7, #12]
 8104252:	089b      	lsrs	r3, r3, #2
 8104254:	60fb      	str	r3, [r7, #12]
        break;
 8104256:	e062      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8104258:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 810425c:	f001 feb0 	bl	8105fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8104260:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104262:	687b      	ldr	r3, [r7, #4]
 8104264:	685b      	ldr	r3, [r3, #4]
 8104266:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810426a:	d051      	beq.n	8104310 <ADC_ConfigureBoostMode+0x138>
 810426c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8104270:	d854      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 8104272:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8104276:	d047      	beq.n	8104308 <ADC_ConfigureBoostMode+0x130>
 8104278:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810427c:	d84e      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 810427e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8104282:	d03d      	beq.n	8104300 <ADC_ConfigureBoostMode+0x128>
 8104284:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8104288:	d848      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 810428a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810428e:	d033      	beq.n	81042f8 <ADC_ConfigureBoostMode+0x120>
 8104290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104294:	d842      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 8104296:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810429a:	d029      	beq.n	81042f0 <ADC_ConfigureBoostMode+0x118>
 810429c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81042a0:	d83c      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 81042a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81042a6:	d01a      	beq.n	81042de <ADC_ConfigureBoostMode+0x106>
 81042a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81042ac:	d836      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 81042ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81042b2:	d014      	beq.n	81042de <ADC_ConfigureBoostMode+0x106>
 81042b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81042b8:	d830      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 81042ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81042be:	d00e      	beq.n	81042de <ADC_ConfigureBoostMode+0x106>
 81042c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81042c4:	d82a      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 81042c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81042ca:	d008      	beq.n	81042de <ADC_ConfigureBoostMode+0x106>
 81042cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81042d0:	d824      	bhi.n	810431c <ADC_ConfigureBoostMode+0x144>
 81042d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81042d6:	d002      	beq.n	81042de <ADC_ConfigureBoostMode+0x106>
 81042d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81042dc:	d11e      	bne.n	810431c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	685b      	ldr	r3, [r3, #4]
 81042e2:	0c9b      	lsrs	r3, r3, #18
 81042e4:	005b      	lsls	r3, r3, #1
 81042e6:	68fa      	ldr	r2, [r7, #12]
 81042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 81042ec:	60fb      	str	r3, [r7, #12]
        break;
 81042ee:	e016      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	091b      	lsrs	r3, r3, #4
 81042f4:	60fb      	str	r3, [r7, #12]
        break;
 81042f6:	e012      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	095b      	lsrs	r3, r3, #5
 81042fc:	60fb      	str	r3, [r7, #12]
        break;
 81042fe:	e00e      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	099b      	lsrs	r3, r3, #6
 8104304:	60fb      	str	r3, [r7, #12]
        break;
 8104306:	e00a      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	09db      	lsrs	r3, r3, #7
 810430c:	60fb      	str	r3, [r7, #12]
        break;
 810430e:	e006      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8104310:	68fb      	ldr	r3, [r7, #12]
 8104312:	0a1b      	lsrs	r3, r3, #8
 8104314:	60fb      	str	r3, [r7, #12]
        break;
 8104316:	e002      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
        break;
 8104318:	bf00      	nop
 810431a:	e000      	b.n	810431e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 810431c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810431e:	f7fe fc87 	bl	8102c30 <HAL_GetREVID>
 8104322:	4603      	mov	r3, r0
 8104324:	f241 0203 	movw	r2, #4099	; 0x1003
 8104328:	4293      	cmp	r3, r2
 810432a:	d815      	bhi.n	8104358 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 810432c:	68fb      	ldr	r3, [r7, #12]
 810432e:	4a2b      	ldr	r2, [pc, #172]	; (81043dc <ADC_ConfigureBoostMode+0x204>)
 8104330:	4293      	cmp	r3, r2
 8104332:	d908      	bls.n	8104346 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	689a      	ldr	r2, [r3, #8]
 810433a:	687b      	ldr	r3, [r7, #4]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104342:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8104344:	e03e      	b.n	81043c4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	689a      	ldr	r2, [r3, #8]
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104354:	609a      	str	r2, [r3, #8]
}
 8104356:	e035      	b.n	81043c4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	085b      	lsrs	r3, r3, #1
 810435c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	4a1f      	ldr	r2, [pc, #124]	; (81043e0 <ADC_ConfigureBoostMode+0x208>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d808      	bhi.n	8104378 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	689a      	ldr	r2, [r3, #8]
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	681b      	ldr	r3, [r3, #0]
 8104370:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8104374:	609a      	str	r2, [r3, #8]
}
 8104376:	e025      	b.n	81043c4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8104378:	68fb      	ldr	r3, [r7, #12]
 810437a:	4a1a      	ldr	r2, [pc, #104]	; (81043e4 <ADC_ConfigureBoostMode+0x20c>)
 810437c:	4293      	cmp	r3, r2
 810437e:	d80a      	bhi.n	8104396 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	689b      	ldr	r3, [r3, #8]
 8104386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104392:	609a      	str	r2, [r3, #8]
}
 8104394:	e016      	b.n	81043c4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8104396:	68fb      	ldr	r3, [r7, #12]
 8104398:	4a13      	ldr	r2, [pc, #76]	; (81043e8 <ADC_ConfigureBoostMode+0x210>)
 810439a:	4293      	cmp	r3, r2
 810439c:	d80a      	bhi.n	81043b4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	689b      	ldr	r3, [r3, #8]
 81043a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	681b      	ldr	r3, [r3, #0]
 81043ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81043b0:	609a      	str	r2, [r3, #8]
}
 81043b2:	e007      	b.n	81043c4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	689a      	ldr	r2, [r3, #8]
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81043c2:	609a      	str	r2, [r3, #8]
}
 81043c4:	bf00      	nop
 81043c6:	3710      	adds	r7, #16
 81043c8:	46bd      	mov	sp, r7
 81043ca:	bd80      	pop	{r7, pc}
 81043cc:	40022000 	.word	0x40022000
 81043d0:	40022100 	.word	0x40022100
 81043d4:	40022300 	.word	0x40022300
 81043d8:	58026300 	.word	0x58026300
 81043dc:	01312d00 	.word	0x01312d00
 81043e0:	005f5e10 	.word	0x005f5e10
 81043e4:	00bebc20 	.word	0x00bebc20
 81043e8:	017d7840 	.word	0x017d7840

081043ec <LL_ADC_IsEnabled>:
{
 81043ec:	b480      	push	{r7}
 81043ee:	b083      	sub	sp, #12
 81043f0:	af00      	add	r7, sp, #0
 81043f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	689b      	ldr	r3, [r3, #8]
 81043f8:	f003 0301 	and.w	r3, r3, #1
 81043fc:	2b01      	cmp	r3, #1
 81043fe:	d101      	bne.n	8104404 <LL_ADC_IsEnabled+0x18>
 8104400:	2301      	movs	r3, #1
 8104402:	e000      	b.n	8104406 <LL_ADC_IsEnabled+0x1a>
 8104404:	2300      	movs	r3, #0
}
 8104406:	4618      	mov	r0, r3
 8104408:	370c      	adds	r7, #12
 810440a:	46bd      	mov	sp, r7
 810440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104410:	4770      	bx	lr

08104412 <LL_ADC_REG_IsConversionOngoing>:
{
 8104412:	b480      	push	{r7}
 8104414:	b083      	sub	sp, #12
 8104416:	af00      	add	r7, sp, #0
 8104418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	689b      	ldr	r3, [r3, #8]
 810441e:	f003 0304 	and.w	r3, r3, #4
 8104422:	2b04      	cmp	r3, #4
 8104424:	d101      	bne.n	810442a <LL_ADC_REG_IsConversionOngoing+0x18>
 8104426:	2301      	movs	r3, #1
 8104428:	e000      	b.n	810442c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810442a:	2300      	movs	r3, #0
}
 810442c:	4618      	mov	r0, r3
 810442e:	370c      	adds	r7, #12
 8104430:	46bd      	mov	sp, r7
 8104432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104436:	4770      	bx	lr

08104438 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104438:	b590      	push	{r4, r7, lr}
 810443a:	b09f      	sub	sp, #124	; 0x7c
 810443c:	af00      	add	r7, sp, #0
 810443e:	6078      	str	r0, [r7, #4]
 8104440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104442:	2300      	movs	r3, #0
 8104444:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810444e:	2b01      	cmp	r3, #1
 8104450:	d101      	bne.n	8104456 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8104452:	2302      	movs	r3, #2
 8104454:	e0c4      	b.n	81045e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	2201      	movs	r2, #1
 810445a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810445e:	2300      	movs	r3, #0
 8104460:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8104462:	2300      	movs	r3, #0
 8104464:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	4a5f      	ldr	r2, [pc, #380]	; (81045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810446c:	4293      	cmp	r3, r2
 810446e:	d102      	bne.n	8104476 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8104470:	4b5e      	ldr	r3, [pc, #376]	; (81045ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104472:	60bb      	str	r3, [r7, #8]
 8104474:	e001      	b.n	810447a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8104476:	2300      	movs	r3, #0
 8104478:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810447a:	68bb      	ldr	r3, [r7, #8]
 810447c:	2b00      	cmp	r3, #0
 810447e:	d10b      	bne.n	8104498 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104484:	f043 0220 	orr.w	r2, r3, #32
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	2200      	movs	r2, #0
 8104490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8104494:	2301      	movs	r3, #1
 8104496:	e0a3      	b.n	81045e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104498:	68bb      	ldr	r3, [r7, #8]
 810449a:	4618      	mov	r0, r3
 810449c:	f7ff ffb9 	bl	8104412 <LL_ADC_REG_IsConversionOngoing>
 81044a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81044a2:	687b      	ldr	r3, [r7, #4]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	4618      	mov	r0, r3
 81044a8:	f7ff ffb3 	bl	8104412 <LL_ADC_REG_IsConversionOngoing>
 81044ac:	4603      	mov	r3, r0
 81044ae:	2b00      	cmp	r3, #0
 81044b0:	f040 8085 	bne.w	81045be <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81044b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81044b6:	2b00      	cmp	r3, #0
 81044b8:	f040 8081 	bne.w	81045be <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	4a49      	ldr	r2, [pc, #292]	; (81045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81044c2:	4293      	cmp	r3, r2
 81044c4:	d004      	beq.n	81044d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	4a48      	ldr	r2, [pc, #288]	; (81045ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81044cc:	4293      	cmp	r3, r2
 81044ce:	d101      	bne.n	81044d4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81044d0:	4b47      	ldr	r3, [pc, #284]	; (81045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81044d2:	e000      	b.n	81044d6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81044d4:	4b47      	ldr	r3, [pc, #284]	; (81045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81044d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81044d8:	683b      	ldr	r3, [r7, #0]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	2b00      	cmp	r3, #0
 81044de:	d03b      	beq.n	8104558 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81044e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81044e2:	689b      	ldr	r3, [r3, #8]
 81044e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81044e8:	683b      	ldr	r3, [r7, #0]
 81044ea:	685b      	ldr	r3, [r3, #4]
 81044ec:	431a      	orrs	r2, r3
 81044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81044f0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	4a3c      	ldr	r2, [pc, #240]	; (81045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81044f8:	4293      	cmp	r3, r2
 81044fa:	d004      	beq.n	8104506 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	4a3a      	ldr	r2, [pc, #232]	; (81045ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104502:	4293      	cmp	r3, r2
 8104504:	d10e      	bne.n	8104524 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104506:	4838      	ldr	r0, [pc, #224]	; (81045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104508:	f7ff ff70 	bl	81043ec <LL_ADC_IsEnabled>
 810450c:	4604      	mov	r4, r0
 810450e:	4837      	ldr	r0, [pc, #220]	; (81045ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104510:	f7ff ff6c 	bl	81043ec <LL_ADC_IsEnabled>
 8104514:	4603      	mov	r3, r0
 8104516:	4323      	orrs	r3, r4
 8104518:	2b00      	cmp	r3, #0
 810451a:	bf0c      	ite	eq
 810451c:	2301      	moveq	r3, #1
 810451e:	2300      	movne	r3, #0
 8104520:	b2db      	uxtb	r3, r3
 8104522:	e008      	b.n	8104536 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104524:	4834      	ldr	r0, [pc, #208]	; (81045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104526:	f7ff ff61 	bl	81043ec <LL_ADC_IsEnabled>
 810452a:	4603      	mov	r3, r0
 810452c:	2b00      	cmp	r3, #0
 810452e:	bf0c      	ite	eq
 8104530:	2301      	moveq	r3, #1
 8104532:	2300      	movne	r3, #0
 8104534:	b2db      	uxtb	r3, r3
 8104536:	2b00      	cmp	r3, #0
 8104538:	d04b      	beq.n	81045d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810453c:	689b      	ldr	r3, [r3, #8]
 810453e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8104542:	f023 030f 	bic.w	r3, r3, #15
 8104546:	683a      	ldr	r2, [r7, #0]
 8104548:	6811      	ldr	r1, [r2, #0]
 810454a:	683a      	ldr	r2, [r7, #0]
 810454c:	6892      	ldr	r2, [r2, #8]
 810454e:	430a      	orrs	r2, r1
 8104550:	431a      	orrs	r2, r3
 8104552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104554:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104556:	e03c      	b.n	81045d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810455a:	689b      	ldr	r3, [r3, #8]
 810455c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104562:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	4a1f      	ldr	r2, [pc, #124]	; (81045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810456a:	4293      	cmp	r3, r2
 810456c:	d004      	beq.n	8104578 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a1e      	ldr	r2, [pc, #120]	; (81045ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104574:	4293      	cmp	r3, r2
 8104576:	d10e      	bne.n	8104596 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104578:	481b      	ldr	r0, [pc, #108]	; (81045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810457a:	f7ff ff37 	bl	81043ec <LL_ADC_IsEnabled>
 810457e:	4604      	mov	r4, r0
 8104580:	481a      	ldr	r0, [pc, #104]	; (81045ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104582:	f7ff ff33 	bl	81043ec <LL_ADC_IsEnabled>
 8104586:	4603      	mov	r3, r0
 8104588:	4323      	orrs	r3, r4
 810458a:	2b00      	cmp	r3, #0
 810458c:	bf0c      	ite	eq
 810458e:	2301      	moveq	r3, #1
 8104590:	2300      	movne	r3, #0
 8104592:	b2db      	uxtb	r3, r3
 8104594:	e008      	b.n	81045a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8104596:	4818      	ldr	r0, [pc, #96]	; (81045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104598:	f7ff ff28 	bl	81043ec <LL_ADC_IsEnabled>
 810459c:	4603      	mov	r3, r0
 810459e:	2b00      	cmp	r3, #0
 81045a0:	bf0c      	ite	eq
 81045a2:	2301      	moveq	r3, #1
 81045a4:	2300      	movne	r3, #0
 81045a6:	b2db      	uxtb	r3, r3
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	d012      	beq.n	81045d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81045ae:	689b      	ldr	r3, [r3, #8]
 81045b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81045b4:	f023 030f 	bic.w	r3, r3, #15
 81045b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81045ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81045bc:	e009      	b.n	81045d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81045c2:	f043 0220 	orr.w	r2, r3, #32
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81045ca:	2301      	movs	r3, #1
 81045cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81045d0:	e000      	b.n	81045d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81045d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	2200      	movs	r2, #0
 81045d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81045dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81045e0:	4618      	mov	r0, r3
 81045e2:	377c      	adds	r7, #124	; 0x7c
 81045e4:	46bd      	mov	sp, r7
 81045e6:	bd90      	pop	{r4, r7, pc}
 81045e8:	40022000 	.word	0x40022000
 81045ec:	40022100 	.word	0x40022100
 81045f0:	40022300 	.word	0x40022300
 81045f4:	58026300 	.word	0x58026300
 81045f8:	58026000 	.word	0x58026000

081045fc <__NVIC_SetPriorityGrouping>:
{
 81045fc:	b480      	push	{r7}
 81045fe:	b085      	sub	sp, #20
 8104600:	af00      	add	r7, sp, #0
 8104602:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	f003 0307 	and.w	r3, r3, #7
 810460a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810460c:	4b0c      	ldr	r3, [pc, #48]	; (8104640 <__NVIC_SetPriorityGrouping+0x44>)
 810460e:	68db      	ldr	r3, [r3, #12]
 8104610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104612:	68ba      	ldr	r2, [r7, #8]
 8104614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104618:	4013      	ands	r3, r2
 810461a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104620:	68bb      	ldr	r3, [r7, #8]
 8104622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810462c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810462e:	4a04      	ldr	r2, [pc, #16]	; (8104640 <__NVIC_SetPriorityGrouping+0x44>)
 8104630:	68bb      	ldr	r3, [r7, #8]
 8104632:	60d3      	str	r3, [r2, #12]
}
 8104634:	bf00      	nop
 8104636:	3714      	adds	r7, #20
 8104638:	46bd      	mov	sp, r7
 810463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810463e:	4770      	bx	lr
 8104640:	e000ed00 	.word	0xe000ed00

08104644 <__NVIC_GetPriorityGrouping>:
{
 8104644:	b480      	push	{r7}
 8104646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104648:	4b04      	ldr	r3, [pc, #16]	; (810465c <__NVIC_GetPriorityGrouping+0x18>)
 810464a:	68db      	ldr	r3, [r3, #12]
 810464c:	0a1b      	lsrs	r3, r3, #8
 810464e:	f003 0307 	and.w	r3, r3, #7
}
 8104652:	4618      	mov	r0, r3
 8104654:	46bd      	mov	sp, r7
 8104656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810465a:	4770      	bx	lr
 810465c:	e000ed00 	.word	0xe000ed00

08104660 <__NVIC_EnableIRQ>:
{
 8104660:	b480      	push	{r7}
 8104662:	b083      	sub	sp, #12
 8104664:	af00      	add	r7, sp, #0
 8104666:	4603      	mov	r3, r0
 8104668:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810466a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810466e:	2b00      	cmp	r3, #0
 8104670:	db0b      	blt.n	810468a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104672:	88fb      	ldrh	r3, [r7, #6]
 8104674:	f003 021f 	and.w	r2, r3, #31
 8104678:	4907      	ldr	r1, [pc, #28]	; (8104698 <__NVIC_EnableIRQ+0x38>)
 810467a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810467e:	095b      	lsrs	r3, r3, #5
 8104680:	2001      	movs	r0, #1
 8104682:	fa00 f202 	lsl.w	r2, r0, r2
 8104686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810468a:	bf00      	nop
 810468c:	370c      	adds	r7, #12
 810468e:	46bd      	mov	sp, r7
 8104690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104694:	4770      	bx	lr
 8104696:	bf00      	nop
 8104698:	e000e100 	.word	0xe000e100

0810469c <__NVIC_SetPriority>:
{
 810469c:	b480      	push	{r7}
 810469e:	b083      	sub	sp, #12
 81046a0:	af00      	add	r7, sp, #0
 81046a2:	4603      	mov	r3, r0
 81046a4:	6039      	str	r1, [r7, #0]
 81046a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81046a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81046ac:	2b00      	cmp	r3, #0
 81046ae:	db0a      	blt.n	81046c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81046b0:	683b      	ldr	r3, [r7, #0]
 81046b2:	b2da      	uxtb	r2, r3
 81046b4:	490c      	ldr	r1, [pc, #48]	; (81046e8 <__NVIC_SetPriority+0x4c>)
 81046b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81046ba:	0112      	lsls	r2, r2, #4
 81046bc:	b2d2      	uxtb	r2, r2
 81046be:	440b      	add	r3, r1
 81046c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81046c4:	e00a      	b.n	81046dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81046c6:	683b      	ldr	r3, [r7, #0]
 81046c8:	b2da      	uxtb	r2, r3
 81046ca:	4908      	ldr	r1, [pc, #32]	; (81046ec <__NVIC_SetPriority+0x50>)
 81046cc:	88fb      	ldrh	r3, [r7, #6]
 81046ce:	f003 030f 	and.w	r3, r3, #15
 81046d2:	3b04      	subs	r3, #4
 81046d4:	0112      	lsls	r2, r2, #4
 81046d6:	b2d2      	uxtb	r2, r2
 81046d8:	440b      	add	r3, r1
 81046da:	761a      	strb	r2, [r3, #24]
}
 81046dc:	bf00      	nop
 81046de:	370c      	adds	r7, #12
 81046e0:	46bd      	mov	sp, r7
 81046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046e6:	4770      	bx	lr
 81046e8:	e000e100 	.word	0xe000e100
 81046ec:	e000ed00 	.word	0xe000ed00

081046f0 <NVIC_EncodePriority>:
{
 81046f0:	b480      	push	{r7}
 81046f2:	b089      	sub	sp, #36	; 0x24
 81046f4:	af00      	add	r7, sp, #0
 81046f6:	60f8      	str	r0, [r7, #12]
 81046f8:	60b9      	str	r1, [r7, #8]
 81046fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81046fc:	68fb      	ldr	r3, [r7, #12]
 81046fe:	f003 0307 	and.w	r3, r3, #7
 8104702:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104704:	69fb      	ldr	r3, [r7, #28]
 8104706:	f1c3 0307 	rsb	r3, r3, #7
 810470a:	2b04      	cmp	r3, #4
 810470c:	bf28      	it	cs
 810470e:	2304      	movcs	r3, #4
 8104710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104712:	69fb      	ldr	r3, [r7, #28]
 8104714:	3304      	adds	r3, #4
 8104716:	2b06      	cmp	r3, #6
 8104718:	d902      	bls.n	8104720 <NVIC_EncodePriority+0x30>
 810471a:	69fb      	ldr	r3, [r7, #28]
 810471c:	3b03      	subs	r3, #3
 810471e:	e000      	b.n	8104722 <NVIC_EncodePriority+0x32>
 8104720:	2300      	movs	r3, #0
 8104722:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104724:	f04f 32ff 	mov.w	r2, #4294967295
 8104728:	69bb      	ldr	r3, [r7, #24]
 810472a:	fa02 f303 	lsl.w	r3, r2, r3
 810472e:	43da      	mvns	r2, r3
 8104730:	68bb      	ldr	r3, [r7, #8]
 8104732:	401a      	ands	r2, r3
 8104734:	697b      	ldr	r3, [r7, #20]
 8104736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104738:	f04f 31ff 	mov.w	r1, #4294967295
 810473c:	697b      	ldr	r3, [r7, #20]
 810473e:	fa01 f303 	lsl.w	r3, r1, r3
 8104742:	43d9      	mvns	r1, r3
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104748:	4313      	orrs	r3, r2
}
 810474a:	4618      	mov	r0, r3
 810474c:	3724      	adds	r7, #36	; 0x24
 810474e:	46bd      	mov	sp, r7
 8104750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104754:	4770      	bx	lr
	...

08104758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104758:	b580      	push	{r7, lr}
 810475a:	b082      	sub	sp, #8
 810475c:	af00      	add	r7, sp, #0
 810475e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	3b01      	subs	r3, #1
 8104764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104768:	d301      	bcc.n	810476e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810476a:	2301      	movs	r3, #1
 810476c:	e00f      	b.n	810478e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810476e:	4a0a      	ldr	r2, [pc, #40]	; (8104798 <SysTick_Config+0x40>)
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	3b01      	subs	r3, #1
 8104774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104776:	210f      	movs	r1, #15
 8104778:	f04f 30ff 	mov.w	r0, #4294967295
 810477c:	f7ff ff8e 	bl	810469c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104780:	4b05      	ldr	r3, [pc, #20]	; (8104798 <SysTick_Config+0x40>)
 8104782:	2200      	movs	r2, #0
 8104784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104786:	4b04      	ldr	r3, [pc, #16]	; (8104798 <SysTick_Config+0x40>)
 8104788:	2207      	movs	r2, #7
 810478a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810478c:	2300      	movs	r3, #0
}
 810478e:	4618      	mov	r0, r3
 8104790:	3708      	adds	r7, #8
 8104792:	46bd      	mov	sp, r7
 8104794:	bd80      	pop	{r7, pc}
 8104796:	bf00      	nop
 8104798:	e000e010 	.word	0xe000e010

0810479c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810479c:	b580      	push	{r7, lr}
 810479e:	b082      	sub	sp, #8
 81047a0:	af00      	add	r7, sp, #0
 81047a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81047a4:	6878      	ldr	r0, [r7, #4]
 81047a6:	f7ff ff29 	bl	81045fc <__NVIC_SetPriorityGrouping>
}
 81047aa:	bf00      	nop
 81047ac:	3708      	adds	r7, #8
 81047ae:	46bd      	mov	sp, r7
 81047b0:	bd80      	pop	{r7, pc}

081047b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81047b2:	b580      	push	{r7, lr}
 81047b4:	b086      	sub	sp, #24
 81047b6:	af00      	add	r7, sp, #0
 81047b8:	4603      	mov	r3, r0
 81047ba:	60b9      	str	r1, [r7, #8]
 81047bc:	607a      	str	r2, [r7, #4]
 81047be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81047c0:	f7ff ff40 	bl	8104644 <__NVIC_GetPriorityGrouping>
 81047c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81047c6:	687a      	ldr	r2, [r7, #4]
 81047c8:	68b9      	ldr	r1, [r7, #8]
 81047ca:	6978      	ldr	r0, [r7, #20]
 81047cc:	f7ff ff90 	bl	81046f0 <NVIC_EncodePriority>
 81047d0:	4602      	mov	r2, r0
 81047d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81047d6:	4611      	mov	r1, r2
 81047d8:	4618      	mov	r0, r3
 81047da:	f7ff ff5f 	bl	810469c <__NVIC_SetPriority>
}
 81047de:	bf00      	nop
 81047e0:	3718      	adds	r7, #24
 81047e2:	46bd      	mov	sp, r7
 81047e4:	bd80      	pop	{r7, pc}

081047e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81047e6:	b580      	push	{r7, lr}
 81047e8:	b082      	sub	sp, #8
 81047ea:	af00      	add	r7, sp, #0
 81047ec:	4603      	mov	r3, r0
 81047ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81047f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81047f4:	4618      	mov	r0, r3
 81047f6:	f7ff ff33 	bl	8104660 <__NVIC_EnableIRQ>
}
 81047fa:	bf00      	nop
 81047fc:	3708      	adds	r7, #8
 81047fe:	46bd      	mov	sp, r7
 8104800:	bd80      	pop	{r7, pc}

08104802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104802:	b580      	push	{r7, lr}
 8104804:	b082      	sub	sp, #8
 8104806:	af00      	add	r7, sp, #0
 8104808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810480a:	6878      	ldr	r0, [r7, #4]
 810480c:	f7ff ffa4 	bl	8104758 <SysTick_Config>
 8104810:	4603      	mov	r3, r0
}
 8104812:	4618      	mov	r0, r3
 8104814:	3708      	adds	r7, #8
 8104816:	46bd      	mov	sp, r7
 8104818:	bd80      	pop	{r7, pc}
	...

0810481c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810481c:	b480      	push	{r7}
 810481e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104820:	4b07      	ldr	r3, [pc, #28]	; (8104840 <HAL_GetCurrentCPUID+0x24>)
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	091b      	lsrs	r3, r3, #4
 8104826:	f003 030f 	and.w	r3, r3, #15
 810482a:	2b07      	cmp	r3, #7
 810482c:	d101      	bne.n	8104832 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810482e:	2303      	movs	r3, #3
 8104830:	e000      	b.n	8104834 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104832:	2301      	movs	r3, #1
  }
}
 8104834:	4618      	mov	r0, r3
 8104836:	46bd      	mov	sp, r7
 8104838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810483c:	4770      	bx	lr
 810483e:	bf00      	nop
 8104840:	e000ed00 	.word	0xe000ed00

08104844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104844:	b480      	push	{r7}
 8104846:	b089      	sub	sp, #36	; 0x24
 8104848:	af00      	add	r7, sp, #0
 810484a:	6078      	str	r0, [r7, #4]
 810484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810484e:	2300      	movs	r3, #0
 8104850:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104852:	4b89      	ldr	r3, [pc, #548]	; (8104a78 <HAL_GPIO_Init+0x234>)
 8104854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104856:	e194      	b.n	8104b82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104858:	683b      	ldr	r3, [r7, #0]
 810485a:	681a      	ldr	r2, [r3, #0]
 810485c:	2101      	movs	r1, #1
 810485e:	69fb      	ldr	r3, [r7, #28]
 8104860:	fa01 f303 	lsl.w	r3, r1, r3
 8104864:	4013      	ands	r3, r2
 8104866:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104868:	693b      	ldr	r3, [r7, #16]
 810486a:	2b00      	cmp	r3, #0
 810486c:	f000 8186 	beq.w	8104b7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104870:	683b      	ldr	r3, [r7, #0]
 8104872:	685b      	ldr	r3, [r3, #4]
 8104874:	f003 0303 	and.w	r3, r3, #3
 8104878:	2b01      	cmp	r3, #1
 810487a:	d005      	beq.n	8104888 <HAL_GPIO_Init+0x44>
 810487c:	683b      	ldr	r3, [r7, #0]
 810487e:	685b      	ldr	r3, [r3, #4]
 8104880:	f003 0303 	and.w	r3, r3, #3
 8104884:	2b02      	cmp	r3, #2
 8104886:	d130      	bne.n	81048ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	689b      	ldr	r3, [r3, #8]
 810488c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810488e:	69fb      	ldr	r3, [r7, #28]
 8104890:	005b      	lsls	r3, r3, #1
 8104892:	2203      	movs	r2, #3
 8104894:	fa02 f303 	lsl.w	r3, r2, r3
 8104898:	43db      	mvns	r3, r3
 810489a:	69ba      	ldr	r2, [r7, #24]
 810489c:	4013      	ands	r3, r2
 810489e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81048a0:	683b      	ldr	r3, [r7, #0]
 81048a2:	68da      	ldr	r2, [r3, #12]
 81048a4:	69fb      	ldr	r3, [r7, #28]
 81048a6:	005b      	lsls	r3, r3, #1
 81048a8:	fa02 f303 	lsl.w	r3, r2, r3
 81048ac:	69ba      	ldr	r2, [r7, #24]
 81048ae:	4313      	orrs	r3, r2
 81048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	69ba      	ldr	r2, [r7, #24]
 81048b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	685b      	ldr	r3, [r3, #4]
 81048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81048be:	2201      	movs	r2, #1
 81048c0:	69fb      	ldr	r3, [r7, #28]
 81048c2:	fa02 f303 	lsl.w	r3, r2, r3
 81048c6:	43db      	mvns	r3, r3
 81048c8:	69ba      	ldr	r2, [r7, #24]
 81048ca:	4013      	ands	r3, r2
 81048cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81048ce:	683b      	ldr	r3, [r7, #0]
 81048d0:	685b      	ldr	r3, [r3, #4]
 81048d2:	091b      	lsrs	r3, r3, #4
 81048d4:	f003 0201 	and.w	r2, r3, #1
 81048d8:	69fb      	ldr	r3, [r7, #28]
 81048da:	fa02 f303 	lsl.w	r3, r2, r3
 81048de:	69ba      	ldr	r2, [r7, #24]
 81048e0:	4313      	orrs	r3, r2
 81048e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	69ba      	ldr	r2, [r7, #24]
 81048e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81048ea:	683b      	ldr	r3, [r7, #0]
 81048ec:	685b      	ldr	r3, [r3, #4]
 81048ee:	f003 0303 	and.w	r3, r3, #3
 81048f2:	2b03      	cmp	r3, #3
 81048f4:	d017      	beq.n	8104926 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	68db      	ldr	r3, [r3, #12]
 81048fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81048fc:	69fb      	ldr	r3, [r7, #28]
 81048fe:	005b      	lsls	r3, r3, #1
 8104900:	2203      	movs	r2, #3
 8104902:	fa02 f303 	lsl.w	r3, r2, r3
 8104906:	43db      	mvns	r3, r3
 8104908:	69ba      	ldr	r2, [r7, #24]
 810490a:	4013      	ands	r3, r2
 810490c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810490e:	683b      	ldr	r3, [r7, #0]
 8104910:	689a      	ldr	r2, [r3, #8]
 8104912:	69fb      	ldr	r3, [r7, #28]
 8104914:	005b      	lsls	r3, r3, #1
 8104916:	fa02 f303 	lsl.w	r3, r2, r3
 810491a:	69ba      	ldr	r2, [r7, #24]
 810491c:	4313      	orrs	r3, r2
 810491e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	69ba      	ldr	r2, [r7, #24]
 8104924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104926:	683b      	ldr	r3, [r7, #0]
 8104928:	685b      	ldr	r3, [r3, #4]
 810492a:	f003 0303 	and.w	r3, r3, #3
 810492e:	2b02      	cmp	r3, #2
 8104930:	d123      	bne.n	810497a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104932:	69fb      	ldr	r3, [r7, #28]
 8104934:	08da      	lsrs	r2, r3, #3
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	3208      	adds	r2, #8
 810493a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810493e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104940:	69fb      	ldr	r3, [r7, #28]
 8104942:	f003 0307 	and.w	r3, r3, #7
 8104946:	009b      	lsls	r3, r3, #2
 8104948:	220f      	movs	r2, #15
 810494a:	fa02 f303 	lsl.w	r3, r2, r3
 810494e:	43db      	mvns	r3, r3
 8104950:	69ba      	ldr	r2, [r7, #24]
 8104952:	4013      	ands	r3, r2
 8104954:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104956:	683b      	ldr	r3, [r7, #0]
 8104958:	691a      	ldr	r2, [r3, #16]
 810495a:	69fb      	ldr	r3, [r7, #28]
 810495c:	f003 0307 	and.w	r3, r3, #7
 8104960:	009b      	lsls	r3, r3, #2
 8104962:	fa02 f303 	lsl.w	r3, r2, r3
 8104966:	69ba      	ldr	r2, [r7, #24]
 8104968:	4313      	orrs	r3, r2
 810496a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810496c:	69fb      	ldr	r3, [r7, #28]
 810496e:	08da      	lsrs	r2, r3, #3
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	3208      	adds	r2, #8
 8104974:	69b9      	ldr	r1, [r7, #24]
 8104976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104980:	69fb      	ldr	r3, [r7, #28]
 8104982:	005b      	lsls	r3, r3, #1
 8104984:	2203      	movs	r2, #3
 8104986:	fa02 f303 	lsl.w	r3, r2, r3
 810498a:	43db      	mvns	r3, r3
 810498c:	69ba      	ldr	r2, [r7, #24]
 810498e:	4013      	ands	r3, r2
 8104990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104992:	683b      	ldr	r3, [r7, #0]
 8104994:	685b      	ldr	r3, [r3, #4]
 8104996:	f003 0203 	and.w	r2, r3, #3
 810499a:	69fb      	ldr	r3, [r7, #28]
 810499c:	005b      	lsls	r3, r3, #1
 810499e:	fa02 f303 	lsl.w	r3, r2, r3
 81049a2:	69ba      	ldr	r2, [r7, #24]
 81049a4:	4313      	orrs	r3, r2
 81049a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	69ba      	ldr	r2, [r7, #24]
 81049ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81049ae:	683b      	ldr	r3, [r7, #0]
 81049b0:	685b      	ldr	r3, [r3, #4]
 81049b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81049b6:	2b00      	cmp	r3, #0
 81049b8:	f000 80e0 	beq.w	8104b7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81049bc:	4b2f      	ldr	r3, [pc, #188]	; (8104a7c <HAL_GPIO_Init+0x238>)
 81049be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81049c2:	4a2e      	ldr	r2, [pc, #184]	; (8104a7c <HAL_GPIO_Init+0x238>)
 81049c4:	f043 0302 	orr.w	r3, r3, #2
 81049c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81049cc:	4b2b      	ldr	r3, [pc, #172]	; (8104a7c <HAL_GPIO_Init+0x238>)
 81049ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81049d2:	f003 0302 	and.w	r3, r3, #2
 81049d6:	60fb      	str	r3, [r7, #12]
 81049d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81049da:	4a29      	ldr	r2, [pc, #164]	; (8104a80 <HAL_GPIO_Init+0x23c>)
 81049dc:	69fb      	ldr	r3, [r7, #28]
 81049de:	089b      	lsrs	r3, r3, #2
 81049e0:	3302      	adds	r3, #2
 81049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81049e8:	69fb      	ldr	r3, [r7, #28]
 81049ea:	f003 0303 	and.w	r3, r3, #3
 81049ee:	009b      	lsls	r3, r3, #2
 81049f0:	220f      	movs	r2, #15
 81049f2:	fa02 f303 	lsl.w	r3, r2, r3
 81049f6:	43db      	mvns	r3, r3
 81049f8:	69ba      	ldr	r2, [r7, #24]
 81049fa:	4013      	ands	r3, r2
 81049fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	4a20      	ldr	r2, [pc, #128]	; (8104a84 <HAL_GPIO_Init+0x240>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d052      	beq.n	8104aac <HAL_GPIO_Init+0x268>
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	4a1f      	ldr	r2, [pc, #124]	; (8104a88 <HAL_GPIO_Init+0x244>)
 8104a0a:	4293      	cmp	r3, r2
 8104a0c:	d031      	beq.n	8104a72 <HAL_GPIO_Init+0x22e>
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	4a1e      	ldr	r2, [pc, #120]	; (8104a8c <HAL_GPIO_Init+0x248>)
 8104a12:	4293      	cmp	r3, r2
 8104a14:	d02b      	beq.n	8104a6e <HAL_GPIO_Init+0x22a>
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	4a1d      	ldr	r2, [pc, #116]	; (8104a90 <HAL_GPIO_Init+0x24c>)
 8104a1a:	4293      	cmp	r3, r2
 8104a1c:	d025      	beq.n	8104a6a <HAL_GPIO_Init+0x226>
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	4a1c      	ldr	r2, [pc, #112]	; (8104a94 <HAL_GPIO_Init+0x250>)
 8104a22:	4293      	cmp	r3, r2
 8104a24:	d01f      	beq.n	8104a66 <HAL_GPIO_Init+0x222>
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	4a1b      	ldr	r2, [pc, #108]	; (8104a98 <HAL_GPIO_Init+0x254>)
 8104a2a:	4293      	cmp	r3, r2
 8104a2c:	d019      	beq.n	8104a62 <HAL_GPIO_Init+0x21e>
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	4a1a      	ldr	r2, [pc, #104]	; (8104a9c <HAL_GPIO_Init+0x258>)
 8104a32:	4293      	cmp	r3, r2
 8104a34:	d013      	beq.n	8104a5e <HAL_GPIO_Init+0x21a>
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	4a19      	ldr	r2, [pc, #100]	; (8104aa0 <HAL_GPIO_Init+0x25c>)
 8104a3a:	4293      	cmp	r3, r2
 8104a3c:	d00d      	beq.n	8104a5a <HAL_GPIO_Init+0x216>
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	4a18      	ldr	r2, [pc, #96]	; (8104aa4 <HAL_GPIO_Init+0x260>)
 8104a42:	4293      	cmp	r3, r2
 8104a44:	d007      	beq.n	8104a56 <HAL_GPIO_Init+0x212>
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	4a17      	ldr	r2, [pc, #92]	; (8104aa8 <HAL_GPIO_Init+0x264>)
 8104a4a:	4293      	cmp	r3, r2
 8104a4c:	d101      	bne.n	8104a52 <HAL_GPIO_Init+0x20e>
 8104a4e:	2309      	movs	r3, #9
 8104a50:	e02d      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a52:	230a      	movs	r3, #10
 8104a54:	e02b      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a56:	2308      	movs	r3, #8
 8104a58:	e029      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a5a:	2307      	movs	r3, #7
 8104a5c:	e027      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a5e:	2306      	movs	r3, #6
 8104a60:	e025      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a62:	2305      	movs	r3, #5
 8104a64:	e023      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a66:	2304      	movs	r3, #4
 8104a68:	e021      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a6a:	2303      	movs	r3, #3
 8104a6c:	e01f      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a6e:	2302      	movs	r3, #2
 8104a70:	e01d      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a72:	2301      	movs	r3, #1
 8104a74:	e01b      	b.n	8104aae <HAL_GPIO_Init+0x26a>
 8104a76:	bf00      	nop
 8104a78:	580000c0 	.word	0x580000c0
 8104a7c:	58024400 	.word	0x58024400
 8104a80:	58000400 	.word	0x58000400
 8104a84:	58020000 	.word	0x58020000
 8104a88:	58020400 	.word	0x58020400
 8104a8c:	58020800 	.word	0x58020800
 8104a90:	58020c00 	.word	0x58020c00
 8104a94:	58021000 	.word	0x58021000
 8104a98:	58021400 	.word	0x58021400
 8104a9c:	58021800 	.word	0x58021800
 8104aa0:	58021c00 	.word	0x58021c00
 8104aa4:	58022000 	.word	0x58022000
 8104aa8:	58022400 	.word	0x58022400
 8104aac:	2300      	movs	r3, #0
 8104aae:	69fa      	ldr	r2, [r7, #28]
 8104ab0:	f002 0203 	and.w	r2, r2, #3
 8104ab4:	0092      	lsls	r2, r2, #2
 8104ab6:	4093      	lsls	r3, r2
 8104ab8:	69ba      	ldr	r2, [r7, #24]
 8104aba:	4313      	orrs	r3, r2
 8104abc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104abe:	4938      	ldr	r1, [pc, #224]	; (8104ba0 <HAL_GPIO_Init+0x35c>)
 8104ac0:	69fb      	ldr	r3, [r7, #28]
 8104ac2:	089b      	lsrs	r3, r3, #2
 8104ac4:	3302      	adds	r3, #2
 8104ac6:	69ba      	ldr	r2, [r7, #24]
 8104ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104ad4:	693b      	ldr	r3, [r7, #16]
 8104ad6:	43db      	mvns	r3, r3
 8104ad8:	69ba      	ldr	r2, [r7, #24]
 8104ada:	4013      	ands	r3, r2
 8104adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104ade:	683b      	ldr	r3, [r7, #0]
 8104ae0:	685b      	ldr	r3, [r3, #4]
 8104ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d003      	beq.n	8104af2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104aea:	69ba      	ldr	r2, [r7, #24]
 8104aec:	693b      	ldr	r3, [r7, #16]
 8104aee:	4313      	orrs	r3, r2
 8104af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104af6:	69bb      	ldr	r3, [r7, #24]
 8104af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104afe:	685b      	ldr	r3, [r3, #4]
 8104b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104b02:	693b      	ldr	r3, [r7, #16]
 8104b04:	43db      	mvns	r3, r3
 8104b06:	69ba      	ldr	r2, [r7, #24]
 8104b08:	4013      	ands	r3, r2
 8104b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104b0c:	683b      	ldr	r3, [r7, #0]
 8104b0e:	685b      	ldr	r3, [r3, #4]
 8104b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104b14:	2b00      	cmp	r3, #0
 8104b16:	d003      	beq.n	8104b20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104b18:	69ba      	ldr	r2, [r7, #24]
 8104b1a:	693b      	ldr	r3, [r7, #16]
 8104b1c:	4313      	orrs	r3, r2
 8104b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104b24:	69bb      	ldr	r3, [r7, #24]
 8104b26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104b28:	697b      	ldr	r3, [r7, #20]
 8104b2a:	685b      	ldr	r3, [r3, #4]
 8104b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104b2e:	693b      	ldr	r3, [r7, #16]
 8104b30:	43db      	mvns	r3, r3
 8104b32:	69ba      	ldr	r2, [r7, #24]
 8104b34:	4013      	ands	r3, r2
 8104b36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104b38:	683b      	ldr	r3, [r7, #0]
 8104b3a:	685b      	ldr	r3, [r3, #4]
 8104b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104b40:	2b00      	cmp	r3, #0
 8104b42:	d003      	beq.n	8104b4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104b44:	69ba      	ldr	r2, [r7, #24]
 8104b46:	693b      	ldr	r3, [r7, #16]
 8104b48:	4313      	orrs	r3, r2
 8104b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104b4c:	697b      	ldr	r3, [r7, #20]
 8104b4e:	69ba      	ldr	r2, [r7, #24]
 8104b50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104b52:	697b      	ldr	r3, [r7, #20]
 8104b54:	681b      	ldr	r3, [r3, #0]
 8104b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104b58:	693b      	ldr	r3, [r7, #16]
 8104b5a:	43db      	mvns	r3, r3
 8104b5c:	69ba      	ldr	r2, [r7, #24]
 8104b5e:	4013      	ands	r3, r2
 8104b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104b62:	683b      	ldr	r3, [r7, #0]
 8104b64:	685b      	ldr	r3, [r3, #4]
 8104b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104b6a:	2b00      	cmp	r3, #0
 8104b6c:	d003      	beq.n	8104b76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104b6e:	69ba      	ldr	r2, [r7, #24]
 8104b70:	693b      	ldr	r3, [r7, #16]
 8104b72:	4313      	orrs	r3, r2
 8104b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104b76:	697b      	ldr	r3, [r7, #20]
 8104b78:	69ba      	ldr	r2, [r7, #24]
 8104b7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104b7c:	69fb      	ldr	r3, [r7, #28]
 8104b7e:	3301      	adds	r3, #1
 8104b80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b82:	683b      	ldr	r3, [r7, #0]
 8104b84:	681a      	ldr	r2, [r3, #0]
 8104b86:	69fb      	ldr	r3, [r7, #28]
 8104b88:	fa22 f303 	lsr.w	r3, r2, r3
 8104b8c:	2b00      	cmp	r3, #0
 8104b8e:	f47f ae63 	bne.w	8104858 <HAL_GPIO_Init+0x14>
  }
}
 8104b92:	bf00      	nop
 8104b94:	bf00      	nop
 8104b96:	3724      	adds	r7, #36	; 0x24
 8104b98:	46bd      	mov	sp, r7
 8104b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b9e:	4770      	bx	lr
 8104ba0:	58000400 	.word	0x58000400

08104ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8104ba4:	b480      	push	{r7}
 8104ba6:	b085      	sub	sp, #20
 8104ba8:	af00      	add	r7, sp, #0
 8104baa:	6078      	str	r0, [r7, #4]
 8104bac:	460b      	mov	r3, r1
 8104bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	691a      	ldr	r2, [r3, #16]
 8104bb4:	887b      	ldrh	r3, [r7, #2]
 8104bb6:	4013      	ands	r3, r2
 8104bb8:	2b00      	cmp	r3, #0
 8104bba:	d002      	beq.n	8104bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8104bbc:	2301      	movs	r3, #1
 8104bbe:	73fb      	strb	r3, [r7, #15]
 8104bc0:	e001      	b.n	8104bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8104bc2:	2300      	movs	r3, #0
 8104bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8104bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8104bc8:	4618      	mov	r0, r3
 8104bca:	3714      	adds	r7, #20
 8104bcc:	46bd      	mov	sp, r7
 8104bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bd2:	4770      	bx	lr

08104bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104bd4:	b480      	push	{r7}
 8104bd6:	b083      	sub	sp, #12
 8104bd8:	af00      	add	r7, sp, #0
 8104bda:	6078      	str	r0, [r7, #4]
 8104bdc:	460b      	mov	r3, r1
 8104bde:	807b      	strh	r3, [r7, #2]
 8104be0:	4613      	mov	r3, r2
 8104be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104be4:	787b      	ldrb	r3, [r7, #1]
 8104be6:	2b00      	cmp	r3, #0
 8104be8:	d003      	beq.n	8104bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104bea:	887a      	ldrh	r2, [r7, #2]
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104bf0:	e003      	b.n	8104bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104bf2:	887b      	ldrh	r3, [r7, #2]
 8104bf4:	041a      	lsls	r2, r3, #16
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	619a      	str	r2, [r3, #24]
}
 8104bfa:	bf00      	nop
 8104bfc:	370c      	adds	r7, #12
 8104bfe:	46bd      	mov	sp, r7
 8104c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c04:	4770      	bx	lr
	...

08104c08 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104c08:	b480      	push	{r7}
 8104c0a:	b083      	sub	sp, #12
 8104c0c:	af00      	add	r7, sp, #0
 8104c0e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104c10:	4b05      	ldr	r3, [pc, #20]	; (8104c28 <HAL_HSEM_ActivateNotification+0x20>)
 8104c12:	681a      	ldr	r2, [r3, #0]
 8104c14:	4904      	ldr	r1, [pc, #16]	; (8104c28 <HAL_HSEM_ActivateNotification+0x20>)
 8104c16:	687b      	ldr	r3, [r7, #4]
 8104c18:	4313      	orrs	r3, r2
 8104c1a:	600b      	str	r3, [r1, #0]
#endif
}
 8104c1c:	bf00      	nop
 8104c1e:	370c      	adds	r7, #12
 8104c20:	46bd      	mov	sp, r7
 8104c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c26:	4770      	bx	lr
 8104c28:	58026510 	.word	0x58026510

08104c2c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8104c2c:	b580      	push	{r7, lr}
 8104c2e:	b082      	sub	sp, #8
 8104c30:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8104c32:	4b0a      	ldr	r3, [pc, #40]	; (8104c5c <HAL_HSEM_IRQHandler+0x30>)
 8104c34:	68db      	ldr	r3, [r3, #12]
 8104c36:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8104c38:	4b08      	ldr	r3, [pc, #32]	; (8104c5c <HAL_HSEM_IRQHandler+0x30>)
 8104c3a:	681a      	ldr	r2, [r3, #0]
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	43db      	mvns	r3, r3
 8104c40:	4906      	ldr	r1, [pc, #24]	; (8104c5c <HAL_HSEM_IRQHandler+0x30>)
 8104c42:	4013      	ands	r3, r2
 8104c44:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8104c46:	4a05      	ldr	r2, [pc, #20]	; (8104c5c <HAL_HSEM_IRQHandler+0x30>)
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8104c4c:	6878      	ldr	r0, [r7, #4]
 8104c4e:	f000 f807 	bl	8104c60 <HAL_HSEM_FreeCallback>
}
 8104c52:	bf00      	nop
 8104c54:	3708      	adds	r7, #8
 8104c56:	46bd      	mov	sp, r7
 8104c58:	bd80      	pop	{r7, pc}
 8104c5a:	bf00      	nop
 8104c5c:	58026510 	.word	0x58026510

08104c60 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8104c60:	b480      	push	{r7}
 8104c62:	b083      	sub	sp, #12
 8104c64:	af00      	add	r7, sp, #0
 8104c66:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8104c68:	bf00      	nop
 8104c6a:	370c      	adds	r7, #12
 8104c6c:	46bd      	mov	sp, r7
 8104c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c72:	4770      	bx	lr

08104c74 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104c74:	b580      	push	{r7, lr}
 8104c76:	b084      	sub	sp, #16
 8104c78:	af00      	add	r7, sp, #0
 8104c7a:	60f8      	str	r0, [r7, #12]
 8104c7c:	460b      	mov	r3, r1
 8104c7e:	607a      	str	r2, [r7, #4]
 8104c80:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104c82:	4b37      	ldr	r3, [pc, #220]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104c84:	681b      	ldr	r3, [r3, #0]
 8104c86:	f023 0201 	bic.w	r2, r3, #1
 8104c8a:	4935      	ldr	r1, [pc, #212]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104c8c:	68fb      	ldr	r3, [r7, #12]
 8104c8e:	4313      	orrs	r3, r2
 8104c90:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	2b00      	cmp	r3, #0
 8104c96:	d123      	bne.n	8104ce0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104c98:	f7ff fdc0 	bl	810481c <HAL_GetCurrentCPUID>
 8104c9c:	4603      	mov	r3, r0
 8104c9e:	2b03      	cmp	r3, #3
 8104ca0:	d158      	bne.n	8104d54 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104ca2:	4b2f      	ldr	r3, [pc, #188]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ca4:	691b      	ldr	r3, [r3, #16]
 8104ca6:	4a2e      	ldr	r2, [pc, #184]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ca8:	f023 0301 	bic.w	r3, r3, #1
 8104cac:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104cae:	4b2d      	ldr	r3, [pc, #180]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104cb0:	691b      	ldr	r3, [r3, #16]
 8104cb2:	4a2c      	ldr	r2, [pc, #176]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104cb4:	f043 0304 	orr.w	r3, r3, #4
 8104cb8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104cba:	f3bf 8f4f 	dsb	sy
}
 8104cbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104cc0:	f3bf 8f6f 	isb	sy
}
 8104cc4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104cc6:	7afb      	ldrb	r3, [r7, #11]
 8104cc8:	2b01      	cmp	r3, #1
 8104cca:	d101      	bne.n	8104cd0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104ccc:	bf30      	wfi
 8104cce:	e000      	b.n	8104cd2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104cd0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104cd2:	4b24      	ldr	r3, [pc, #144]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104cd4:	691b      	ldr	r3, [r3, #16]
 8104cd6:	4a23      	ldr	r2, [pc, #140]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104cd8:	f023 0304 	bic.w	r3, r3, #4
 8104cdc:	6113      	str	r3, [r2, #16]
 8104cde:	e03c      	b.n	8104d5a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	2b01      	cmp	r3, #1
 8104ce4:	d123      	bne.n	8104d2e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104ce6:	f7ff fd99 	bl	810481c <HAL_GetCurrentCPUID>
 8104cea:	4603      	mov	r3, r0
 8104cec:	2b01      	cmp	r3, #1
 8104cee:	d133      	bne.n	8104d58 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104cf0:	4b1b      	ldr	r3, [pc, #108]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104cf2:	695b      	ldr	r3, [r3, #20]
 8104cf4:	4a1a      	ldr	r2, [pc, #104]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104cf6:	f023 0302 	bic.w	r3, r3, #2
 8104cfa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104cfc:	4b19      	ldr	r3, [pc, #100]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104cfe:	691b      	ldr	r3, [r3, #16]
 8104d00:	4a18      	ldr	r2, [pc, #96]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d02:	f043 0304 	orr.w	r3, r3, #4
 8104d06:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104d08:	f3bf 8f4f 	dsb	sy
}
 8104d0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104d0e:	f3bf 8f6f 	isb	sy
}
 8104d12:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104d14:	7afb      	ldrb	r3, [r7, #11]
 8104d16:	2b01      	cmp	r3, #1
 8104d18:	d101      	bne.n	8104d1e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104d1a:	bf30      	wfi
 8104d1c:	e000      	b.n	8104d20 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104d1e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d20:	4b10      	ldr	r3, [pc, #64]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d22:	691b      	ldr	r3, [r3, #16]
 8104d24:	4a0f      	ldr	r2, [pc, #60]	; (8104d64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d26:	f023 0304 	bic.w	r3, r3, #4
 8104d2a:	6113      	str	r3, [r2, #16]
 8104d2c:	e015      	b.n	8104d5a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104d2e:	f7ff fd75 	bl	810481c <HAL_GetCurrentCPUID>
 8104d32:	4603      	mov	r3, r0
 8104d34:	2b03      	cmp	r3, #3
 8104d36:	d106      	bne.n	8104d46 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104d38:	4b09      	ldr	r3, [pc, #36]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d3a:	691b      	ldr	r3, [r3, #16]
 8104d3c:	4a08      	ldr	r2, [pc, #32]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d3e:	f023 0304 	bic.w	r3, r3, #4
 8104d42:	6113      	str	r3, [r2, #16]
 8104d44:	e009      	b.n	8104d5a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104d46:	4b06      	ldr	r3, [pc, #24]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d48:	695b      	ldr	r3, [r3, #20]
 8104d4a:	4a05      	ldr	r2, [pc, #20]	; (8104d60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d4c:	f023 0304 	bic.w	r3, r3, #4
 8104d50:	6153      	str	r3, [r2, #20]
 8104d52:	e002      	b.n	8104d5a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104d54:	bf00      	nop
 8104d56:	e000      	b.n	8104d5a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104d58:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104d5a:	3710      	adds	r7, #16
 8104d5c:	46bd      	mov	sp, r7
 8104d5e:	bd80      	pop	{r7, pc}
 8104d60:	58024800 	.word	0x58024800
 8104d64:	e000ed00 	.word	0xe000ed00

08104d68 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104d68:	b580      	push	{r7, lr}
 8104d6a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104d6c:	f7ff fd56 	bl	810481c <HAL_GetCurrentCPUID>
 8104d70:	4603      	mov	r3, r0
 8104d72:	2b03      	cmp	r3, #3
 8104d74:	d101      	bne.n	8104d7a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104d76:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104d78:	e001      	b.n	8104d7e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104d7a:	bf40      	sev
    __WFE ();
 8104d7c:	bf20      	wfe
}
 8104d7e:	bf00      	nop
 8104d80:	bd80      	pop	{r7, pc}
	...

08104d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104d84:	b480      	push	{r7}
 8104d86:	b089      	sub	sp, #36	; 0x24
 8104d88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104d8a:	4bb3      	ldr	r3, [pc, #716]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d8c:	691b      	ldr	r3, [r3, #16]
 8104d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104d92:	2b18      	cmp	r3, #24
 8104d94:	f200 8155 	bhi.w	8105042 <HAL_RCC_GetSysClockFreq+0x2be>
 8104d98:	a201      	add	r2, pc, #4	; (adr r2, 8104da0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d9e:	bf00      	nop
 8104da0:	08104e05 	.word	0x08104e05
 8104da4:	08105043 	.word	0x08105043
 8104da8:	08105043 	.word	0x08105043
 8104dac:	08105043 	.word	0x08105043
 8104db0:	08105043 	.word	0x08105043
 8104db4:	08105043 	.word	0x08105043
 8104db8:	08105043 	.word	0x08105043
 8104dbc:	08105043 	.word	0x08105043
 8104dc0:	08104e2b 	.word	0x08104e2b
 8104dc4:	08105043 	.word	0x08105043
 8104dc8:	08105043 	.word	0x08105043
 8104dcc:	08105043 	.word	0x08105043
 8104dd0:	08105043 	.word	0x08105043
 8104dd4:	08105043 	.word	0x08105043
 8104dd8:	08105043 	.word	0x08105043
 8104ddc:	08105043 	.word	0x08105043
 8104de0:	08104e31 	.word	0x08104e31
 8104de4:	08105043 	.word	0x08105043
 8104de8:	08105043 	.word	0x08105043
 8104dec:	08105043 	.word	0x08105043
 8104df0:	08105043 	.word	0x08105043
 8104df4:	08105043 	.word	0x08105043
 8104df8:	08105043 	.word	0x08105043
 8104dfc:	08105043 	.word	0x08105043
 8104e00:	08104e37 	.word	0x08104e37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104e04:	4b94      	ldr	r3, [pc, #592]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e06:	681b      	ldr	r3, [r3, #0]
 8104e08:	f003 0320 	and.w	r3, r3, #32
 8104e0c:	2b00      	cmp	r3, #0
 8104e0e:	d009      	beq.n	8104e24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104e10:	4b91      	ldr	r3, [pc, #580]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	08db      	lsrs	r3, r3, #3
 8104e16:	f003 0303 	and.w	r3, r3, #3
 8104e1a:	4a90      	ldr	r2, [pc, #576]	; (810505c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8104e20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8104e22:	e111      	b.n	8105048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104e24:	4b8d      	ldr	r3, [pc, #564]	; (810505c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104e26:	61bb      	str	r3, [r7, #24]
    break;
 8104e28:	e10e      	b.n	8105048 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104e2a:	4b8d      	ldr	r3, [pc, #564]	; (8105060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104e2c:	61bb      	str	r3, [r7, #24]
    break;
 8104e2e:	e10b      	b.n	8105048 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104e30:	4b8c      	ldr	r3, [pc, #560]	; (8105064 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104e32:	61bb      	str	r3, [r7, #24]
    break;
 8104e34:	e108      	b.n	8105048 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104e36:	4b88      	ldr	r3, [pc, #544]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e3a:	f003 0303 	and.w	r3, r3, #3
 8104e3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104e40:	4b85      	ldr	r3, [pc, #532]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e44:	091b      	lsrs	r3, r3, #4
 8104e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104e4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104e4c:	4b82      	ldr	r3, [pc, #520]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e50:	f003 0301 	and.w	r3, r3, #1
 8104e54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104e56:	4b80      	ldr	r3, [pc, #512]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104e5a:	08db      	lsrs	r3, r3, #3
 8104e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104e60:	68fa      	ldr	r2, [r7, #12]
 8104e62:	fb02 f303 	mul.w	r3, r2, r3
 8104e66:	ee07 3a90 	vmov	s15, r3
 8104e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8104e72:	693b      	ldr	r3, [r7, #16]
 8104e74:	2b00      	cmp	r3, #0
 8104e76:	f000 80e1 	beq.w	810503c <HAL_RCC_GetSysClockFreq+0x2b8>
 8104e7a:	697b      	ldr	r3, [r7, #20]
 8104e7c:	2b02      	cmp	r3, #2
 8104e7e:	f000 8083 	beq.w	8104f88 <HAL_RCC_GetSysClockFreq+0x204>
 8104e82:	697b      	ldr	r3, [r7, #20]
 8104e84:	2b02      	cmp	r3, #2
 8104e86:	f200 80a1 	bhi.w	8104fcc <HAL_RCC_GetSysClockFreq+0x248>
 8104e8a:	697b      	ldr	r3, [r7, #20]
 8104e8c:	2b00      	cmp	r3, #0
 8104e8e:	d003      	beq.n	8104e98 <HAL_RCC_GetSysClockFreq+0x114>
 8104e90:	697b      	ldr	r3, [r7, #20]
 8104e92:	2b01      	cmp	r3, #1
 8104e94:	d056      	beq.n	8104f44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104e96:	e099      	b.n	8104fcc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104e98:	4b6f      	ldr	r3, [pc, #444]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	f003 0320 	and.w	r3, r3, #32
 8104ea0:	2b00      	cmp	r3, #0
 8104ea2:	d02d      	beq.n	8104f00 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104ea4:	4b6c      	ldr	r3, [pc, #432]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	08db      	lsrs	r3, r3, #3
 8104eaa:	f003 0303 	and.w	r3, r3, #3
 8104eae:	4a6b      	ldr	r2, [pc, #428]	; (810505c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8104eb4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	ee07 3a90 	vmov	s15, r3
 8104ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ec0:	693b      	ldr	r3, [r7, #16]
 8104ec2:	ee07 3a90 	vmov	s15, r3
 8104ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ece:	4b62      	ldr	r3, [pc, #392]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ed6:	ee07 3a90 	vmov	s15, r3
 8104eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ee2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8105068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104efa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8104efe:	e087      	b.n	8105010 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104f00:	693b      	ldr	r3, [r7, #16]
 8104f02:	ee07 3a90 	vmov	s15, r3
 8104f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810506c <HAL_RCC_GetSysClockFreq+0x2e8>
 8104f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f12:	4b51      	ldr	r3, [pc, #324]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f1a:	ee07 3a90 	vmov	s15, r3
 8104f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8104f26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8105068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f42:	e065      	b.n	8105010 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104f44:	693b      	ldr	r3, [r7, #16]
 8104f46:	ee07 3a90 	vmov	s15, r3
 8104f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8105070 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f56:	4b40      	ldr	r3, [pc, #256]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f5e:	ee07 3a90 	vmov	s15, r3
 8104f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8104f6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8105068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f86:	e043      	b.n	8105010 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104f88:	693b      	ldr	r3, [r7, #16]
 8104f8a:	ee07 3a90 	vmov	s15, r3
 8104f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8105074 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f9a:	4b2f      	ldr	r3, [pc, #188]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fa2:	ee07 3a90 	vmov	s15, r3
 8104fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8104fae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8105068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104fca:	e021      	b.n	8105010 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104fcc:	693b      	ldr	r3, [r7, #16]
 8104fce:	ee07 3a90 	vmov	s15, r3
 8104fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8105070 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104fde:	4b1e      	ldr	r3, [pc, #120]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fe6:	ee07 3a90 	vmov	s15, r3
 8104fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ff2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8105068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105006:	ee67 7a27 	vmul.f32	s15, s14, s15
 810500a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810500e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105010:	4b11      	ldr	r3, [pc, #68]	; (8105058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105014:	0a5b      	lsrs	r3, r3, #9
 8105016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810501a:	3301      	adds	r3, #1
 810501c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810501e:	683b      	ldr	r3, [r7, #0]
 8105020:	ee07 3a90 	vmov	s15, r3
 8105024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105028:	edd7 6a07 	vldr	s13, [r7, #28]
 810502c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105034:	ee17 3a90 	vmov	r3, s15
 8105038:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810503a:	e005      	b.n	8105048 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810503c:	2300      	movs	r3, #0
 810503e:	61bb      	str	r3, [r7, #24]
    break;
 8105040:	e002      	b.n	8105048 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8105042:	4b07      	ldr	r3, [pc, #28]	; (8105060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105044:	61bb      	str	r3, [r7, #24]
    break;
 8105046:	bf00      	nop
  }

  return sysclockfreq;
 8105048:	69bb      	ldr	r3, [r7, #24]
}
 810504a:	4618      	mov	r0, r3
 810504c:	3724      	adds	r7, #36	; 0x24
 810504e:	46bd      	mov	sp, r7
 8105050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105054:	4770      	bx	lr
 8105056:	bf00      	nop
 8105058:	58024400 	.word	0x58024400
 810505c:	03d09000 	.word	0x03d09000
 8105060:	003d0900 	.word	0x003d0900
 8105064:	007a1200 	.word	0x007a1200
 8105068:	46000000 	.word	0x46000000
 810506c:	4c742400 	.word	0x4c742400
 8105070:	4a742400 	.word	0x4a742400
 8105074:	4af42400 	.word	0x4af42400

08105078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105078:	b580      	push	{r7, lr}
 810507a:	b082      	sub	sp, #8
 810507c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810507e:	f7ff fe81 	bl	8104d84 <HAL_RCC_GetSysClockFreq>
 8105082:	4602      	mov	r2, r0
 8105084:	4b11      	ldr	r3, [pc, #68]	; (81050cc <HAL_RCC_GetHCLKFreq+0x54>)
 8105086:	699b      	ldr	r3, [r3, #24]
 8105088:	0a1b      	lsrs	r3, r3, #8
 810508a:	f003 030f 	and.w	r3, r3, #15
 810508e:	4910      	ldr	r1, [pc, #64]	; (81050d0 <HAL_RCC_GetHCLKFreq+0x58>)
 8105090:	5ccb      	ldrb	r3, [r1, r3]
 8105092:	f003 031f 	and.w	r3, r3, #31
 8105096:	fa22 f303 	lsr.w	r3, r2, r3
 810509a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810509c:	4b0b      	ldr	r3, [pc, #44]	; (81050cc <HAL_RCC_GetHCLKFreq+0x54>)
 810509e:	699b      	ldr	r3, [r3, #24]
 81050a0:	f003 030f 	and.w	r3, r3, #15
 81050a4:	4a0a      	ldr	r2, [pc, #40]	; (81050d0 <HAL_RCC_GetHCLKFreq+0x58>)
 81050a6:	5cd3      	ldrb	r3, [r2, r3]
 81050a8:	f003 031f 	and.w	r3, r3, #31
 81050ac:	687a      	ldr	r2, [r7, #4]
 81050ae:	fa22 f303 	lsr.w	r3, r2, r3
 81050b2:	4a08      	ldr	r2, [pc, #32]	; (81050d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81050b4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81050b6:	4b07      	ldr	r3, [pc, #28]	; (81050d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	4a07      	ldr	r2, [pc, #28]	; (81050d8 <HAL_RCC_GetHCLKFreq+0x60>)
 81050bc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81050be:	4b05      	ldr	r3, [pc, #20]	; (81050d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81050c0:	681b      	ldr	r3, [r3, #0]
}
 81050c2:	4618      	mov	r0, r3
 81050c4:	3708      	adds	r7, #8
 81050c6:	46bd      	mov	sp, r7
 81050c8:	bd80      	pop	{r7, pc}
 81050ca:	bf00      	nop
 81050cc:	58024400 	.word	0x58024400
 81050d0:	0810a07c 	.word	0x0810a07c
 81050d4:	10000004 	.word	0x10000004
 81050d8:	10000000 	.word	0x10000000

081050dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81050dc:	b580      	push	{r7, lr}
 81050de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81050e0:	f7ff ffca 	bl	8105078 <HAL_RCC_GetHCLKFreq>
 81050e4:	4602      	mov	r2, r0
 81050e6:	4b06      	ldr	r3, [pc, #24]	; (8105100 <HAL_RCC_GetPCLK1Freq+0x24>)
 81050e8:	69db      	ldr	r3, [r3, #28]
 81050ea:	091b      	lsrs	r3, r3, #4
 81050ec:	f003 0307 	and.w	r3, r3, #7
 81050f0:	4904      	ldr	r1, [pc, #16]	; (8105104 <HAL_RCC_GetPCLK1Freq+0x28>)
 81050f2:	5ccb      	ldrb	r3, [r1, r3]
 81050f4:	f003 031f 	and.w	r3, r3, #31
 81050f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81050fc:	4618      	mov	r0, r3
 81050fe:	bd80      	pop	{r7, pc}
 8105100:	58024400 	.word	0x58024400
 8105104:	0810a07c 	.word	0x0810a07c

08105108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105108:	b580      	push	{r7, lr}
 810510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810510c:	f7ff ffb4 	bl	8105078 <HAL_RCC_GetHCLKFreq>
 8105110:	4602      	mov	r2, r0
 8105112:	4b06      	ldr	r3, [pc, #24]	; (810512c <HAL_RCC_GetPCLK2Freq+0x24>)
 8105114:	69db      	ldr	r3, [r3, #28]
 8105116:	0a1b      	lsrs	r3, r3, #8
 8105118:	f003 0307 	and.w	r3, r3, #7
 810511c:	4904      	ldr	r1, [pc, #16]	; (8105130 <HAL_RCC_GetPCLK2Freq+0x28>)
 810511e:	5ccb      	ldrb	r3, [r1, r3]
 8105120:	f003 031f 	and.w	r3, r3, #31
 8105124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105128:	4618      	mov	r0, r3
 810512a:	bd80      	pop	{r7, pc}
 810512c:	58024400 	.word	0x58024400
 8105130:	0810a07c 	.word	0x0810a07c

08105134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105134:	b580      	push	{r7, lr}
 8105136:	b086      	sub	sp, #24
 8105138:	af00      	add	r7, sp, #0
 810513a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810513c:	2300      	movs	r3, #0
 810513e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105140:	2300      	movs	r3, #0
 8105142:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	681b      	ldr	r3, [r3, #0]
 8105148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810514c:	2b00      	cmp	r3, #0
 810514e:	d03f      	beq.n	81051d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105158:	d02a      	beq.n	81051b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810515a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810515e:	d824      	bhi.n	81051aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105164:	d018      	beq.n	8105198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810516a:	d81e      	bhi.n	81051aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 810516c:	2b00      	cmp	r3, #0
 810516e:	d003      	beq.n	8105178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8105170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105174:	d007      	beq.n	8105186 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8105176:	e018      	b.n	81051aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105178:	4ba3      	ldr	r3, [pc, #652]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810517c:	4aa2      	ldr	r2, [pc, #648]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810517e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105184:	e015      	b.n	81051b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	3304      	adds	r3, #4
 810518a:	2102      	movs	r1, #2
 810518c:	4618      	mov	r0, r3
 810518e:	f001 fff9 	bl	8107184 <RCCEx_PLL2_Config>
 8105192:	4603      	mov	r3, r0
 8105194:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105196:	e00c      	b.n	81051b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	3324      	adds	r3, #36	; 0x24
 810519c:	2102      	movs	r1, #2
 810519e:	4618      	mov	r0, r3
 81051a0:	f002 f8a2 	bl	81072e8 <RCCEx_PLL3_Config>
 81051a4:	4603      	mov	r3, r0
 81051a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81051a8:	e003      	b.n	81051b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81051aa:	2301      	movs	r3, #1
 81051ac:	75fb      	strb	r3, [r7, #23]
      break;
 81051ae:	e000      	b.n	81051b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81051b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81051b2:	7dfb      	ldrb	r3, [r7, #23]
 81051b4:	2b00      	cmp	r3, #0
 81051b6:	d109      	bne.n	81051cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81051b8:	4b93      	ldr	r3, [pc, #588]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81051bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051c4:	4990      	ldr	r1, [pc, #576]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81051c6:	4313      	orrs	r3, r2
 81051c8:	650b      	str	r3, [r1, #80]	; 0x50
 81051ca:	e001      	b.n	81051d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051cc:	7dfb      	ldrb	r3, [r7, #23]
 81051ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81051d8:	2b00      	cmp	r3, #0
 81051da:	d03d      	beq.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051e0:	2b04      	cmp	r3, #4
 81051e2:	d826      	bhi.n	8105232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81051e4:	a201      	add	r2, pc, #4	; (adr r2, 81051ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051ea:	bf00      	nop
 81051ec:	08105201 	.word	0x08105201
 81051f0:	0810520f 	.word	0x0810520f
 81051f4:	08105221 	.word	0x08105221
 81051f8:	08105239 	.word	0x08105239
 81051fc:	08105239 	.word	0x08105239
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105200:	4b81      	ldr	r3, [pc, #516]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105204:	4a80      	ldr	r2, [pc, #512]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810520a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810520c:	e015      	b.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	3304      	adds	r3, #4
 8105212:	2100      	movs	r1, #0
 8105214:	4618      	mov	r0, r3
 8105216:	f001 ffb5 	bl	8107184 <RCCEx_PLL2_Config>
 810521a:	4603      	mov	r3, r0
 810521c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810521e:	e00c      	b.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	3324      	adds	r3, #36	; 0x24
 8105224:	2100      	movs	r1, #0
 8105226:	4618      	mov	r0, r3
 8105228:	f002 f85e 	bl	81072e8 <RCCEx_PLL3_Config>
 810522c:	4603      	mov	r3, r0
 810522e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105230:	e003      	b.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105232:	2301      	movs	r3, #1
 8105234:	75fb      	strb	r3, [r7, #23]
      break;
 8105236:	e000      	b.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105238:	bf00      	nop
    }

    if(ret == HAL_OK)
 810523a:	7dfb      	ldrb	r3, [r7, #23]
 810523c:	2b00      	cmp	r3, #0
 810523e:	d109      	bne.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105240:	4b71      	ldr	r3, [pc, #452]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105244:	f023 0207 	bic.w	r2, r3, #7
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810524c:	496e      	ldr	r1, [pc, #440]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810524e:	4313      	orrs	r3, r2
 8105250:	650b      	str	r3, [r1, #80]	; 0x50
 8105252:	e001      	b.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105254:	7dfb      	ldrb	r3, [r7, #23]
 8105256:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105260:	2b00      	cmp	r3, #0
 8105262:	d042      	beq.n	81052ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810526c:	d02b      	beq.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810526e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105272:	d825      	bhi.n	81052c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105274:	2bc0      	cmp	r3, #192	; 0xc0
 8105276:	d028      	beq.n	81052ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105278:	2bc0      	cmp	r3, #192	; 0xc0
 810527a:	d821      	bhi.n	81052c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810527c:	2b80      	cmp	r3, #128	; 0x80
 810527e:	d016      	beq.n	81052ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8105280:	2b80      	cmp	r3, #128	; 0x80
 8105282:	d81d      	bhi.n	81052c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105284:	2b00      	cmp	r3, #0
 8105286:	d002      	beq.n	810528e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8105288:	2b40      	cmp	r3, #64	; 0x40
 810528a:	d007      	beq.n	810529c <HAL_RCCEx_PeriphCLKConfig+0x168>
 810528c:	e018      	b.n	81052c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810528e:	4b5e      	ldr	r3, [pc, #376]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105292:	4a5d      	ldr	r2, [pc, #372]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810529a:	e017      	b.n	81052cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	3304      	adds	r3, #4
 81052a0:	2100      	movs	r1, #0
 81052a2:	4618      	mov	r0, r3
 81052a4:	f001 ff6e 	bl	8107184 <RCCEx_PLL2_Config>
 81052a8:	4603      	mov	r3, r0
 81052aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81052ac:	e00e      	b.n	81052cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	3324      	adds	r3, #36	; 0x24
 81052b2:	2100      	movs	r1, #0
 81052b4:	4618      	mov	r0, r3
 81052b6:	f002 f817 	bl	81072e8 <RCCEx_PLL3_Config>
 81052ba:	4603      	mov	r3, r0
 81052bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81052be:	e005      	b.n	81052cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81052c0:	2301      	movs	r3, #1
 81052c2:	75fb      	strb	r3, [r7, #23]
      break;
 81052c4:	e002      	b.n	81052cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81052c6:	bf00      	nop
 81052c8:	e000      	b.n	81052cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81052ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81052cc:	7dfb      	ldrb	r3, [r7, #23]
 81052ce:	2b00      	cmp	r3, #0
 81052d0:	d109      	bne.n	81052e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81052d2:	4b4d      	ldr	r3, [pc, #308]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81052d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81052d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81052de:	494a      	ldr	r1, [pc, #296]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81052e0:	4313      	orrs	r3, r2
 81052e2:	650b      	str	r3, [r1, #80]	; 0x50
 81052e4:	e001      	b.n	81052ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052e6:	7dfb      	ldrb	r3, [r7, #23]
 81052e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81052f2:	2b00      	cmp	r3, #0
 81052f4:	d049      	beq.n	810538a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81052fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105300:	d030      	beq.n	8105364 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105306:	d82a      	bhi.n	810535e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105308:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810530c:	d02c      	beq.n	8105368 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810530e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105312:	d824      	bhi.n	810535e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105318:	d018      	beq.n	810534c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810531a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810531e:	d81e      	bhi.n	810535e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105320:	2b00      	cmp	r3, #0
 8105322:	d003      	beq.n	810532c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105328:	d007      	beq.n	810533a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810532a:	e018      	b.n	810535e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810532c:	4b36      	ldr	r3, [pc, #216]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105330:	4a35      	ldr	r2, [pc, #212]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105338:	e017      	b.n	810536a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	3304      	adds	r3, #4
 810533e:	2100      	movs	r1, #0
 8105340:	4618      	mov	r0, r3
 8105342:	f001 ff1f 	bl	8107184 <RCCEx_PLL2_Config>
 8105346:	4603      	mov	r3, r0
 8105348:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810534a:	e00e      	b.n	810536a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	3324      	adds	r3, #36	; 0x24
 8105350:	2100      	movs	r1, #0
 8105352:	4618      	mov	r0, r3
 8105354:	f001 ffc8 	bl	81072e8 <RCCEx_PLL3_Config>
 8105358:	4603      	mov	r3, r0
 810535a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810535c:	e005      	b.n	810536a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810535e:	2301      	movs	r3, #1
 8105360:	75fb      	strb	r3, [r7, #23]
      break;
 8105362:	e002      	b.n	810536a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105364:	bf00      	nop
 8105366:	e000      	b.n	810536a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105368:	bf00      	nop
    }

    if(ret == HAL_OK)
 810536a:	7dfb      	ldrb	r3, [r7, #23]
 810536c:	2b00      	cmp	r3, #0
 810536e:	d10a      	bne.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105370:	4b25      	ldr	r3, [pc, #148]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105374:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810537e:	4922      	ldr	r1, [pc, #136]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105380:	4313      	orrs	r3, r2
 8105382:	658b      	str	r3, [r1, #88]	; 0x58
 8105384:	e001      	b.n	810538a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105386:	7dfb      	ldrb	r3, [r7, #23]
 8105388:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	681b      	ldr	r3, [r3, #0]
 810538e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105392:	2b00      	cmp	r3, #0
 8105394:	d04b      	beq.n	810542e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810539c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81053a0:	d030      	beq.n	8105404 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81053a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81053a6:	d82a      	bhi.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81053a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81053ac:	d02e      	beq.n	810540c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81053ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81053b2:	d824      	bhi.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81053b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81053b8:	d018      	beq.n	81053ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81053ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81053be:	d81e      	bhi.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d003      	beq.n	81053cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 81053c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81053c8:	d007      	beq.n	81053da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81053ca:	e018      	b.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81053cc:	4b0e      	ldr	r3, [pc, #56]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053d0:	4a0d      	ldr	r2, [pc, #52]	; (8105408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81053d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81053d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81053d8:	e019      	b.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	3304      	adds	r3, #4
 81053de:	2100      	movs	r1, #0
 81053e0:	4618      	mov	r0, r3
 81053e2:	f001 fecf 	bl	8107184 <RCCEx_PLL2_Config>
 81053e6:	4603      	mov	r3, r0
 81053e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81053ea:	e010      	b.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	3324      	adds	r3, #36	; 0x24
 81053f0:	2100      	movs	r1, #0
 81053f2:	4618      	mov	r0, r3
 81053f4:	f001 ff78 	bl	81072e8 <RCCEx_PLL3_Config>
 81053f8:	4603      	mov	r3, r0
 81053fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81053fc:	e007      	b.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81053fe:	2301      	movs	r3, #1
 8105400:	75fb      	strb	r3, [r7, #23]
      break;
 8105402:	e004      	b.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8105404:	bf00      	nop
 8105406:	e002      	b.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105408:	58024400 	.word	0x58024400
      break;
 810540c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810540e:	7dfb      	ldrb	r3, [r7, #23]
 8105410:	2b00      	cmp	r3, #0
 8105412:	d10a      	bne.n	810542a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105414:	4b99      	ldr	r3, [pc, #612]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105418:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105422:	4996      	ldr	r1, [pc, #600]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105424:	4313      	orrs	r3, r2
 8105426:	658b      	str	r3, [r1, #88]	; 0x58
 8105428:	e001      	b.n	810542e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810542a:	7dfb      	ldrb	r3, [r7, #23]
 810542c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	681b      	ldr	r3, [r3, #0]
 8105432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105436:	2b00      	cmp	r3, #0
 8105438:	d032      	beq.n	81054a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810543e:	2b30      	cmp	r3, #48	; 0x30
 8105440:	d01c      	beq.n	810547c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8105442:	2b30      	cmp	r3, #48	; 0x30
 8105444:	d817      	bhi.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105446:	2b20      	cmp	r3, #32
 8105448:	d00c      	beq.n	8105464 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810544a:	2b20      	cmp	r3, #32
 810544c:	d813      	bhi.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810544e:	2b00      	cmp	r3, #0
 8105450:	d016      	beq.n	8105480 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8105452:	2b10      	cmp	r3, #16
 8105454:	d10f      	bne.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105456:	4b89      	ldr	r3, [pc, #548]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810545a:	4a88      	ldr	r2, [pc, #544]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810545c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105460:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105462:	e00e      	b.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	3304      	adds	r3, #4
 8105468:	2102      	movs	r1, #2
 810546a:	4618      	mov	r0, r3
 810546c:	f001 fe8a 	bl	8107184 <RCCEx_PLL2_Config>
 8105470:	4603      	mov	r3, r0
 8105472:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105474:	e005      	b.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105476:	2301      	movs	r3, #1
 8105478:	75fb      	strb	r3, [r7, #23]
      break;
 810547a:	e002      	b.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810547c:	bf00      	nop
 810547e:	e000      	b.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105482:	7dfb      	ldrb	r3, [r7, #23]
 8105484:	2b00      	cmp	r3, #0
 8105486:	d109      	bne.n	810549c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105488:	4b7c      	ldr	r3, [pc, #496]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810548a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810548c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105494:	4979      	ldr	r1, [pc, #484]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105496:	4313      	orrs	r3, r2
 8105498:	64cb      	str	r3, [r1, #76]	; 0x4c
 810549a:	e001      	b.n	81054a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810549c:	7dfb      	ldrb	r3, [r7, #23]
 810549e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81054a8:	2b00      	cmp	r3, #0
 81054aa:	d047      	beq.n	810553c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81054ac:	687b      	ldr	r3, [r7, #4]
 81054ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81054b4:	d030      	beq.n	8105518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81054b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81054ba:	d82a      	bhi.n	8105512 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81054bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81054c0:	d02c      	beq.n	810551c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81054c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81054c6:	d824      	bhi.n	8105512 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81054c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81054cc:	d018      	beq.n	8105500 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81054ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81054d2:	d81e      	bhi.n	8105512 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81054d4:	2b00      	cmp	r3, #0
 81054d6:	d003      	beq.n	81054e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81054dc:	d007      	beq.n	81054ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81054de:	e018      	b.n	8105512 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81054e0:	4b66      	ldr	r3, [pc, #408]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054e4:	4a65      	ldr	r2, [pc, #404]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81054e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81054ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81054ec:	e017      	b.n	810551e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	3304      	adds	r3, #4
 81054f2:	2100      	movs	r1, #0
 81054f4:	4618      	mov	r0, r3
 81054f6:	f001 fe45 	bl	8107184 <RCCEx_PLL2_Config>
 81054fa:	4603      	mov	r3, r0
 81054fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81054fe:	e00e      	b.n	810551e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	3324      	adds	r3, #36	; 0x24
 8105504:	2100      	movs	r1, #0
 8105506:	4618      	mov	r0, r3
 8105508:	f001 feee 	bl	81072e8 <RCCEx_PLL3_Config>
 810550c:	4603      	mov	r3, r0
 810550e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105510:	e005      	b.n	810551e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105512:	2301      	movs	r3, #1
 8105514:	75fb      	strb	r3, [r7, #23]
      break;
 8105516:	e002      	b.n	810551e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105518:	bf00      	nop
 810551a:	e000      	b.n	810551e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 810551c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810551e:	7dfb      	ldrb	r3, [r7, #23]
 8105520:	2b00      	cmp	r3, #0
 8105522:	d109      	bne.n	8105538 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105524:	4b55      	ldr	r3, [pc, #340]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105528:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105530:	4952      	ldr	r1, [pc, #328]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105532:	4313      	orrs	r3, r2
 8105534:	650b      	str	r3, [r1, #80]	; 0x50
 8105536:	e001      	b.n	810553c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105538:	7dfb      	ldrb	r3, [r7, #23]
 810553a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	681b      	ldr	r3, [r3, #0]
 8105540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105544:	2b00      	cmp	r3, #0
 8105546:	d049      	beq.n	81055dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810554c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105550:	d02e      	beq.n	81055b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8105552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105556:	d828      	bhi.n	81055aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810555c:	d02a      	beq.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810555e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105562:	d822      	bhi.n	81055aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105564:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105568:	d026      	beq.n	81055b8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 810556a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810556e:	d81c      	bhi.n	81055aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105574:	d010      	beq.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810557a:	d816      	bhi.n	81055aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 810557c:	2b00      	cmp	r3, #0
 810557e:	d01d      	beq.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105584:	d111      	bne.n	81055aa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	3304      	adds	r3, #4
 810558a:	2101      	movs	r1, #1
 810558c:	4618      	mov	r0, r3
 810558e:	f001 fdf9 	bl	8107184 <RCCEx_PLL2_Config>
 8105592:	4603      	mov	r3, r0
 8105594:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105596:	e012      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	3324      	adds	r3, #36	; 0x24
 810559c:	2101      	movs	r1, #1
 810559e:	4618      	mov	r0, r3
 81055a0:	f001 fea2 	bl	81072e8 <RCCEx_PLL3_Config>
 81055a4:	4603      	mov	r3, r0
 81055a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81055a8:	e009      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81055aa:	2301      	movs	r3, #1
 81055ac:	75fb      	strb	r3, [r7, #23]
      break;
 81055ae:	e006      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81055b0:	bf00      	nop
 81055b2:	e004      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81055b4:	bf00      	nop
 81055b6:	e002      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81055b8:	bf00      	nop
 81055ba:	e000      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81055bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81055be:	7dfb      	ldrb	r3, [r7, #23]
 81055c0:	2b00      	cmp	r3, #0
 81055c2:	d109      	bne.n	81055d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81055c4:	4b2d      	ldr	r3, [pc, #180]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81055c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81055c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81055d0:	492a      	ldr	r1, [pc, #168]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81055d2:	4313      	orrs	r3, r2
 81055d4:	650b      	str	r3, [r1, #80]	; 0x50
 81055d6:	e001      	b.n	81055dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055d8:	7dfb      	ldrb	r3, [r7, #23]
 81055da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81055e4:	2b00      	cmp	r3, #0
 81055e6:	d04d      	beq.n	8105684 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81055ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81055f2:	d02e      	beq.n	8105652 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81055f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81055f8:	d828      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0x518>
 81055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81055fe:	d02a      	beq.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8105600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105604:	d822      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810560a:	d026      	beq.n	810565a <HAL_RCCEx_PeriphCLKConfig+0x526>
 810560c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105610:	d81c      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105616:	d010      	beq.n	810563a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8105618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810561c:	d816      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0x518>
 810561e:	2b00      	cmp	r3, #0
 8105620:	d01d      	beq.n	810565e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8105622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105626:	d111      	bne.n	810564c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105628:	687b      	ldr	r3, [r7, #4]
 810562a:	3304      	adds	r3, #4
 810562c:	2101      	movs	r1, #1
 810562e:	4618      	mov	r0, r3
 8105630:	f001 fda8 	bl	8107184 <RCCEx_PLL2_Config>
 8105634:	4603      	mov	r3, r0
 8105636:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105638:	e012      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	3324      	adds	r3, #36	; 0x24
 810563e:	2101      	movs	r1, #1
 8105640:	4618      	mov	r0, r3
 8105642:	f001 fe51 	bl	81072e8 <RCCEx_PLL3_Config>
 8105646:	4603      	mov	r3, r0
 8105648:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810564a:	e009      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810564c:	2301      	movs	r3, #1
 810564e:	75fb      	strb	r3, [r7, #23]
      break;
 8105650:	e006      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105652:	bf00      	nop
 8105654:	e004      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105656:	bf00      	nop
 8105658:	e002      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810565a:	bf00      	nop
 810565c:	e000      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810565e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105660:	7dfb      	ldrb	r3, [r7, #23]
 8105662:	2b00      	cmp	r3, #0
 8105664:	d10c      	bne.n	8105680 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105666:	4b05      	ldr	r3, [pc, #20]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810566a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105674:	4901      	ldr	r1, [pc, #4]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105676:	4313      	orrs	r3, r2
 8105678:	658b      	str	r3, [r1, #88]	; 0x58
 810567a:	e003      	b.n	8105684 <HAL_RCCEx_PeriphCLKConfig+0x550>
 810567c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105680:	7dfb      	ldrb	r3, [r7, #23]
 8105682:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810568c:	2b00      	cmp	r3, #0
 810568e:	d02f      	beq.n	81056f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105698:	d00e      	beq.n	81056b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 810569a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810569e:	d814      	bhi.n	81056ca <HAL_RCCEx_PeriphCLKConfig+0x596>
 81056a0:	2b00      	cmp	r3, #0
 81056a2:	d015      	beq.n	81056d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81056a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81056a8:	d10f      	bne.n	81056ca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81056aa:	4bb0      	ldr	r3, [pc, #704]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056ae:	4aaf      	ldr	r2, [pc, #700]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81056b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81056b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81056b6:	e00c      	b.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	3304      	adds	r3, #4
 81056bc:	2101      	movs	r1, #1
 81056be:	4618      	mov	r0, r3
 81056c0:	f001 fd60 	bl	8107184 <RCCEx_PLL2_Config>
 81056c4:	4603      	mov	r3, r0
 81056c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81056c8:	e003      	b.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81056ca:	2301      	movs	r3, #1
 81056cc:	75fb      	strb	r3, [r7, #23]
      break;
 81056ce:	e000      	b.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 81056d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81056d2:	7dfb      	ldrb	r3, [r7, #23]
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	d109      	bne.n	81056ec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81056d8:	4ba4      	ldr	r3, [pc, #656]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81056e4:	49a1      	ldr	r1, [pc, #644]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81056e6:	4313      	orrs	r3, r2
 81056e8:	650b      	str	r3, [r1, #80]	; 0x50
 81056ea:	e001      	b.n	81056f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056ec:	7dfb      	ldrb	r3, [r7, #23]
 81056ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	681b      	ldr	r3, [r3, #0]
 81056f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81056f8:	2b00      	cmp	r3, #0
 81056fa:	d032      	beq.n	8105762 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105700:	2b03      	cmp	r3, #3
 8105702:	d81b      	bhi.n	810573c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8105704:	a201      	add	r2, pc, #4	; (adr r2, 810570c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8105706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810570a:	bf00      	nop
 810570c:	08105743 	.word	0x08105743
 8105710:	0810571d 	.word	0x0810571d
 8105714:	0810572b 	.word	0x0810572b
 8105718:	08105743 	.word	0x08105743
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810571c:	4b93      	ldr	r3, [pc, #588]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105720:	4a92      	ldr	r2, [pc, #584]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105728:	e00c      	b.n	8105744 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810572a:	687b      	ldr	r3, [r7, #4]
 810572c:	3304      	adds	r3, #4
 810572e:	2102      	movs	r1, #2
 8105730:	4618      	mov	r0, r3
 8105732:	f001 fd27 	bl	8107184 <RCCEx_PLL2_Config>
 8105736:	4603      	mov	r3, r0
 8105738:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810573a:	e003      	b.n	8105744 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810573c:	2301      	movs	r3, #1
 810573e:	75fb      	strb	r3, [r7, #23]
      break;
 8105740:	e000      	b.n	8105744 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8105742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105744:	7dfb      	ldrb	r3, [r7, #23]
 8105746:	2b00      	cmp	r3, #0
 8105748:	d109      	bne.n	810575e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810574a:	4b88      	ldr	r3, [pc, #544]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810574e:	f023 0203 	bic.w	r2, r3, #3
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105756:	4985      	ldr	r1, [pc, #532]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105758:	4313      	orrs	r3, r2
 810575a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810575c:	e001      	b.n	8105762 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810575e:	7dfb      	ldrb	r3, [r7, #23]
 8105760:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105762:	687b      	ldr	r3, [r7, #4]
 8105764:	681b      	ldr	r3, [r3, #0]
 8105766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810576a:	2b00      	cmp	r3, #0
 810576c:	f000 8088 	beq.w	8105880 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105770:	4b7f      	ldr	r3, [pc, #508]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105772:	681b      	ldr	r3, [r3, #0]
 8105774:	4a7e      	ldr	r2, [pc, #504]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810577a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810577c:	f7fd fa28 	bl	8102bd0 <HAL_GetTick>
 8105780:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105782:	e009      	b.n	8105798 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105784:	f7fd fa24 	bl	8102bd0 <HAL_GetTick>
 8105788:	4602      	mov	r2, r0
 810578a:	693b      	ldr	r3, [r7, #16]
 810578c:	1ad3      	subs	r3, r2, r3
 810578e:	2b64      	cmp	r3, #100	; 0x64
 8105790:	d902      	bls.n	8105798 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8105792:	2303      	movs	r3, #3
 8105794:	75fb      	strb	r3, [r7, #23]
        break;
 8105796:	e005      	b.n	81057a4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105798:	4b75      	ldr	r3, [pc, #468]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81057a0:	2b00      	cmp	r3, #0
 81057a2:	d0ef      	beq.n	8105784 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81057a4:	7dfb      	ldrb	r3, [r7, #23]
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d168      	bne.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81057aa:	4b70      	ldr	r3, [pc, #448]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81057ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81057ae:	687b      	ldr	r3, [r7, #4]
 81057b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81057b4:	4053      	eors	r3, r2
 81057b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81057ba:	2b00      	cmp	r3, #0
 81057bc:	d013      	beq.n	81057e6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81057be:	4b6b      	ldr	r3, [pc, #428]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81057c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81057c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81057c8:	4b68      	ldr	r3, [pc, #416]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81057cc:	4a67      	ldr	r2, [pc, #412]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81057ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81057d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81057d4:	4b65      	ldr	r3, [pc, #404]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81057d8:	4a64      	ldr	r2, [pc, #400]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81057da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81057de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81057e0:	4a62      	ldr	r2, [pc, #392]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81057e2:	68fb      	ldr	r3, [r7, #12]
 81057e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81057ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81057f0:	d115      	bne.n	810581e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81057f2:	f7fd f9ed 	bl	8102bd0 <HAL_GetTick>
 81057f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81057f8:	e00b      	b.n	8105812 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81057fa:	f7fd f9e9 	bl	8102bd0 <HAL_GetTick>
 81057fe:	4602      	mov	r2, r0
 8105800:	693b      	ldr	r3, [r7, #16]
 8105802:	1ad3      	subs	r3, r2, r3
 8105804:	f241 3288 	movw	r2, #5000	; 0x1388
 8105808:	4293      	cmp	r3, r2
 810580a:	d902      	bls.n	8105812 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810580c:	2303      	movs	r3, #3
 810580e:	75fb      	strb	r3, [r7, #23]
            break;
 8105810:	e005      	b.n	810581e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105812:	4b56      	ldr	r3, [pc, #344]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105816:	f003 0302 	and.w	r3, r3, #2
 810581a:	2b00      	cmp	r3, #0
 810581c:	d0ed      	beq.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810581e:	7dfb      	ldrb	r3, [r7, #23]
 8105820:	2b00      	cmp	r3, #0
 8105822:	d128      	bne.n	8105876 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810582a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810582e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105832:	d10f      	bne.n	8105854 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8105834:	4b4d      	ldr	r3, [pc, #308]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105836:	691b      	ldr	r3, [r3, #16]
 8105838:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105842:	091b      	lsrs	r3, r3, #4
 8105844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105848:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810584c:	4947      	ldr	r1, [pc, #284]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810584e:	4313      	orrs	r3, r2
 8105850:	610b      	str	r3, [r1, #16]
 8105852:	e005      	b.n	8105860 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8105854:	4b45      	ldr	r3, [pc, #276]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105856:	691b      	ldr	r3, [r3, #16]
 8105858:	4a44      	ldr	r2, [pc, #272]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810585a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810585e:	6113      	str	r3, [r2, #16]
 8105860:	4b42      	ldr	r3, [pc, #264]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105862:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810586a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810586e:	493f      	ldr	r1, [pc, #252]	; (810596c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105870:	4313      	orrs	r3, r2
 8105872:	670b      	str	r3, [r1, #112]	; 0x70
 8105874:	e004      	b.n	8105880 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105876:	7dfb      	ldrb	r3, [r7, #23]
 8105878:	75bb      	strb	r3, [r7, #22]
 810587a:	e001      	b.n	8105880 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810587c:	7dfb      	ldrb	r3, [r7, #23]
 810587e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	f003 0301 	and.w	r3, r3, #1
 8105888:	2b00      	cmp	r3, #0
 810588a:	f000 8083 	beq.w	8105994 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810588e:	687b      	ldr	r3, [r7, #4]
 8105890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105892:	2b28      	cmp	r3, #40	; 0x28
 8105894:	d866      	bhi.n	8105964 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8105896:	a201      	add	r2, pc, #4	; (adr r2, 810589c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8105898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810589c:	08105975 	.word	0x08105975
 81058a0:	08105965 	.word	0x08105965
 81058a4:	08105965 	.word	0x08105965
 81058a8:	08105965 	.word	0x08105965
 81058ac:	08105965 	.word	0x08105965
 81058b0:	08105965 	.word	0x08105965
 81058b4:	08105965 	.word	0x08105965
 81058b8:	08105965 	.word	0x08105965
 81058bc:	08105941 	.word	0x08105941
 81058c0:	08105965 	.word	0x08105965
 81058c4:	08105965 	.word	0x08105965
 81058c8:	08105965 	.word	0x08105965
 81058cc:	08105965 	.word	0x08105965
 81058d0:	08105965 	.word	0x08105965
 81058d4:	08105965 	.word	0x08105965
 81058d8:	08105965 	.word	0x08105965
 81058dc:	08105953 	.word	0x08105953
 81058e0:	08105965 	.word	0x08105965
 81058e4:	08105965 	.word	0x08105965
 81058e8:	08105965 	.word	0x08105965
 81058ec:	08105965 	.word	0x08105965
 81058f0:	08105965 	.word	0x08105965
 81058f4:	08105965 	.word	0x08105965
 81058f8:	08105965 	.word	0x08105965
 81058fc:	08105975 	.word	0x08105975
 8105900:	08105965 	.word	0x08105965
 8105904:	08105965 	.word	0x08105965
 8105908:	08105965 	.word	0x08105965
 810590c:	08105965 	.word	0x08105965
 8105910:	08105965 	.word	0x08105965
 8105914:	08105965 	.word	0x08105965
 8105918:	08105965 	.word	0x08105965
 810591c:	08105975 	.word	0x08105975
 8105920:	08105965 	.word	0x08105965
 8105924:	08105965 	.word	0x08105965
 8105928:	08105965 	.word	0x08105965
 810592c:	08105965 	.word	0x08105965
 8105930:	08105965 	.word	0x08105965
 8105934:	08105965 	.word	0x08105965
 8105938:	08105965 	.word	0x08105965
 810593c:	08105975 	.word	0x08105975
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	3304      	adds	r3, #4
 8105944:	2101      	movs	r1, #1
 8105946:	4618      	mov	r0, r3
 8105948:	f001 fc1c 	bl	8107184 <RCCEx_PLL2_Config>
 810594c:	4603      	mov	r3, r0
 810594e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105950:	e011      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	3324      	adds	r3, #36	; 0x24
 8105956:	2101      	movs	r1, #1
 8105958:	4618      	mov	r0, r3
 810595a:	f001 fcc5 	bl	81072e8 <RCCEx_PLL3_Config>
 810595e:	4603      	mov	r3, r0
 8105960:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105962:	e008      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105964:	2301      	movs	r3, #1
 8105966:	75fb      	strb	r3, [r7, #23]
      break;
 8105968:	e005      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x842>
 810596a:	bf00      	nop
 810596c:	58024400 	.word	0x58024400
 8105970:	58024800 	.word	0x58024800
      break;
 8105974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105976:	7dfb      	ldrb	r3, [r7, #23]
 8105978:	2b00      	cmp	r3, #0
 810597a:	d109      	bne.n	8105990 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810597c:	4b96      	ldr	r3, [pc, #600]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105980:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105988:	4993      	ldr	r1, [pc, #588]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810598a:	4313      	orrs	r3, r2
 810598c:	654b      	str	r3, [r1, #84]	; 0x54
 810598e:	e001      	b.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105990:	7dfb      	ldrb	r3, [r7, #23]
 8105992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	f003 0302 	and.w	r3, r3, #2
 810599c:	2b00      	cmp	r3, #0
 810599e:	d038      	beq.n	8105a12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81059a4:	2b05      	cmp	r3, #5
 81059a6:	d821      	bhi.n	81059ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81059a8:	a201      	add	r2, pc, #4	; (adr r2, 81059b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059ae:	bf00      	nop
 81059b0:	081059f3 	.word	0x081059f3
 81059b4:	081059c9 	.word	0x081059c9
 81059b8:	081059db 	.word	0x081059db
 81059bc:	081059f3 	.word	0x081059f3
 81059c0:	081059f3 	.word	0x081059f3
 81059c4:	081059f3 	.word	0x081059f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	3304      	adds	r3, #4
 81059cc:	2101      	movs	r1, #1
 81059ce:	4618      	mov	r0, r3
 81059d0:	f001 fbd8 	bl	8107184 <RCCEx_PLL2_Config>
 81059d4:	4603      	mov	r3, r0
 81059d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81059d8:	e00c      	b.n	81059f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	3324      	adds	r3, #36	; 0x24
 81059de:	2101      	movs	r1, #1
 81059e0:	4618      	mov	r0, r3
 81059e2:	f001 fc81 	bl	81072e8 <RCCEx_PLL3_Config>
 81059e6:	4603      	mov	r3, r0
 81059e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81059ea:	e003      	b.n	81059f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81059ec:	2301      	movs	r3, #1
 81059ee:	75fb      	strb	r3, [r7, #23]
      break;
 81059f0:	e000      	b.n	81059f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81059f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81059f4:	7dfb      	ldrb	r3, [r7, #23]
 81059f6:	2b00      	cmp	r3, #0
 81059f8:	d109      	bne.n	8105a0e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81059fa:	4b77      	ldr	r3, [pc, #476]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81059fe:	f023 0207 	bic.w	r2, r3, #7
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105a06:	4974      	ldr	r1, [pc, #464]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105a08:	4313      	orrs	r3, r2
 8105a0a:	654b      	str	r3, [r1, #84]	; 0x54
 8105a0c:	e001      	b.n	8105a12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a0e:	7dfb      	ldrb	r3, [r7, #23]
 8105a10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	f003 0304 	and.w	r3, r3, #4
 8105a1a:	2b00      	cmp	r3, #0
 8105a1c:	d03a      	beq.n	8105a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105a24:	2b05      	cmp	r3, #5
 8105a26:	d821      	bhi.n	8105a6c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8105a28:	a201      	add	r2, pc, #4	; (adr r2, 8105a30 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8105a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a2e:	bf00      	nop
 8105a30:	08105a73 	.word	0x08105a73
 8105a34:	08105a49 	.word	0x08105a49
 8105a38:	08105a5b 	.word	0x08105a5b
 8105a3c:	08105a73 	.word	0x08105a73
 8105a40:	08105a73 	.word	0x08105a73
 8105a44:	08105a73 	.word	0x08105a73
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	3304      	adds	r3, #4
 8105a4c:	2101      	movs	r1, #1
 8105a4e:	4618      	mov	r0, r3
 8105a50:	f001 fb98 	bl	8107184 <RCCEx_PLL2_Config>
 8105a54:	4603      	mov	r3, r0
 8105a56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8105a58:	e00c      	b.n	8105a74 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	3324      	adds	r3, #36	; 0x24
 8105a5e:	2101      	movs	r1, #1
 8105a60:	4618      	mov	r0, r3
 8105a62:	f001 fc41 	bl	81072e8 <RCCEx_PLL3_Config>
 8105a66:	4603      	mov	r3, r0
 8105a68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8105a6a:	e003      	b.n	8105a74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105a6c:	2301      	movs	r3, #1
 8105a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8105a70:	e000      	b.n	8105a74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8105a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a74:	7dfb      	ldrb	r3, [r7, #23]
 8105a76:	2b00      	cmp	r3, #0
 8105a78:	d10a      	bne.n	8105a90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105a7a:	4b57      	ldr	r3, [pc, #348]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a7e:	f023 0207 	bic.w	r2, r3, #7
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105a88:	4953      	ldr	r1, [pc, #332]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105a8a:	4313      	orrs	r3, r2
 8105a8c:	658b      	str	r3, [r1, #88]	; 0x58
 8105a8e:	e001      	b.n	8105a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a90:	7dfb      	ldrb	r3, [r7, #23]
 8105a92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	f003 0320 	and.w	r3, r3, #32
 8105a9c:	2b00      	cmp	r3, #0
 8105a9e:	d04b      	beq.n	8105b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105aaa:	d02e      	beq.n	8105b0a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8105aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105ab0:	d828      	bhi.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105ab6:	d02a      	beq.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8105ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105abc:	d822      	bhi.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105abe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105ac2:	d026      	beq.n	8105b12 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8105ac4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105ac8:	d81c      	bhi.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ace:	d010      	beq.n	8105af2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8105ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ad4:	d816      	bhi.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d01d      	beq.n	8105b16 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8105ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105ade:	d111      	bne.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	3304      	adds	r3, #4
 8105ae4:	2100      	movs	r1, #0
 8105ae6:	4618      	mov	r0, r3
 8105ae8:	f001 fb4c 	bl	8107184 <RCCEx_PLL2_Config>
 8105aec:	4603      	mov	r3, r0
 8105aee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8105af0:	e012      	b.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	3324      	adds	r3, #36	; 0x24
 8105af6:	2102      	movs	r1, #2
 8105af8:	4618      	mov	r0, r3
 8105afa:	f001 fbf5 	bl	81072e8 <RCCEx_PLL3_Config>
 8105afe:	4603      	mov	r3, r0
 8105b00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8105b02:	e009      	b.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105b04:	2301      	movs	r3, #1
 8105b06:	75fb      	strb	r3, [r7, #23]
      break;
 8105b08:	e006      	b.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8105b0a:	bf00      	nop
 8105b0c:	e004      	b.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8105b0e:	bf00      	nop
 8105b10:	e002      	b.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8105b12:	bf00      	nop
 8105b14:	e000      	b.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8105b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b18:	7dfb      	ldrb	r3, [r7, #23]
 8105b1a:	2b00      	cmp	r3, #0
 8105b1c:	d10a      	bne.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105b1e:	4b2e      	ldr	r3, [pc, #184]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105b2c:	492a      	ldr	r1, [pc, #168]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105b2e:	4313      	orrs	r3, r2
 8105b30:	654b      	str	r3, [r1, #84]	; 0x54
 8105b32:	e001      	b.n	8105b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b34:	7dfb      	ldrb	r3, [r7, #23]
 8105b36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	d04d      	beq.n	8105be0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8105b44:	687b      	ldr	r3, [r7, #4]
 8105b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105b4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105b4e:	d02e      	beq.n	8105bae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8105b50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105b54:	d828      	bhi.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105b5a:	d02a      	beq.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8105b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105b60:	d822      	bhi.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105b62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105b66:	d026      	beq.n	8105bb6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8105b68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105b6c:	d81c      	bhi.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105b72:	d010      	beq.n	8105b96 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8105b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105b78:	d816      	bhi.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105b7a:	2b00      	cmp	r3, #0
 8105b7c:	d01d      	beq.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8105b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105b82:	d111      	bne.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	3304      	adds	r3, #4
 8105b88:	2100      	movs	r1, #0
 8105b8a:	4618      	mov	r0, r3
 8105b8c:	f001 fafa 	bl	8107184 <RCCEx_PLL2_Config>
 8105b90:	4603      	mov	r3, r0
 8105b92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105b94:	e012      	b.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	3324      	adds	r3, #36	; 0x24
 8105b9a:	2102      	movs	r1, #2
 8105b9c:	4618      	mov	r0, r3
 8105b9e:	f001 fba3 	bl	81072e8 <RCCEx_PLL3_Config>
 8105ba2:	4603      	mov	r3, r0
 8105ba4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105ba6:	e009      	b.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105ba8:	2301      	movs	r3, #1
 8105baa:	75fb      	strb	r3, [r7, #23]
      break;
 8105bac:	e006      	b.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105bae:	bf00      	nop
 8105bb0:	e004      	b.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105bb2:	bf00      	nop
 8105bb4:	e002      	b.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105bb6:	bf00      	nop
 8105bb8:	e000      	b.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105bbc:	7dfb      	ldrb	r3, [r7, #23]
 8105bbe:	2b00      	cmp	r3, #0
 8105bc0:	d10c      	bne.n	8105bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105bc2:	4b05      	ldr	r3, [pc, #20]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bc6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105bd0:	4901      	ldr	r1, [pc, #4]	; (8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105bd2:	4313      	orrs	r3, r2
 8105bd4:	658b      	str	r3, [r1, #88]	; 0x58
 8105bd6:	e003      	b.n	8105be0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8105bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bdc:	7dfb      	ldrb	r3, [r7, #23]
 8105bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105be8:	2b00      	cmp	r3, #0
 8105bea:	d04b      	beq.n	8105c84 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105bf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105bf6:	d02e      	beq.n	8105c56 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8105bf8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105bfc:	d828      	bhi.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8105bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105c02:	d02a      	beq.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8105c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105c08:	d822      	bhi.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8105c0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105c0e:	d026      	beq.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8105c10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105c14:	d81c      	bhi.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8105c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c1a:	d010      	beq.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8105c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c20:	d816      	bhi.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d01d      	beq.n	8105c62 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8105c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c2a:	d111      	bne.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	3304      	adds	r3, #4
 8105c30:	2100      	movs	r1, #0
 8105c32:	4618      	mov	r0, r3
 8105c34:	f001 faa6 	bl	8107184 <RCCEx_PLL2_Config>
 8105c38:	4603      	mov	r3, r0
 8105c3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105c3c:	e012      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105c3e:	687b      	ldr	r3, [r7, #4]
 8105c40:	3324      	adds	r3, #36	; 0x24
 8105c42:	2102      	movs	r1, #2
 8105c44:	4618      	mov	r0, r3
 8105c46:	f001 fb4f 	bl	81072e8 <RCCEx_PLL3_Config>
 8105c4a:	4603      	mov	r3, r0
 8105c4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105c4e:	e009      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105c50:	2301      	movs	r3, #1
 8105c52:	75fb      	strb	r3, [r7, #23]
      break;
 8105c54:	e006      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105c56:	bf00      	nop
 8105c58:	e004      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105c5a:	bf00      	nop
 8105c5c:	e002      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105c5e:	bf00      	nop
 8105c60:	e000      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c64:	7dfb      	ldrb	r3, [r7, #23]
 8105c66:	2b00      	cmp	r3, #0
 8105c68:	d10a      	bne.n	8105c80 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105c6a:	4b9d      	ldr	r3, [pc, #628]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105c78:	4999      	ldr	r1, [pc, #612]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105c7a:	4313      	orrs	r3, r2
 8105c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8105c7e:	e001      	b.n	8105c84 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c80:	7dfb      	ldrb	r3, [r7, #23]
 8105c82:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	f003 0308 	and.w	r3, r3, #8
 8105c8c:	2b00      	cmp	r3, #0
 8105c8e:	d01a      	beq.n	8105cc6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105c9a:	d10a      	bne.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	3324      	adds	r3, #36	; 0x24
 8105ca0:	2102      	movs	r1, #2
 8105ca2:	4618      	mov	r0, r3
 8105ca4:	f001 fb20 	bl	81072e8 <RCCEx_PLL3_Config>
 8105ca8:	4603      	mov	r3, r0
 8105caa:	2b00      	cmp	r3, #0
 8105cac:	d001      	beq.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8105cae:	2301      	movs	r3, #1
 8105cb0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105cb2:	4b8b      	ldr	r3, [pc, #556]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105cb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105cc0:	4987      	ldr	r1, [pc, #540]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105cc2:	4313      	orrs	r3, r2
 8105cc4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	f003 0310 	and.w	r3, r3, #16
 8105cce:	2b00      	cmp	r3, #0
 8105cd0:	d01a      	beq.n	8105d08 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105cdc:	d10a      	bne.n	8105cf4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	3324      	adds	r3, #36	; 0x24
 8105ce2:	2102      	movs	r1, #2
 8105ce4:	4618      	mov	r0, r3
 8105ce6:	f001 faff 	bl	81072e8 <RCCEx_PLL3_Config>
 8105cea:	4603      	mov	r3, r0
 8105cec:	2b00      	cmp	r3, #0
 8105cee:	d001      	beq.n	8105cf4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8105cf0:	2301      	movs	r3, #1
 8105cf2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105cf4:	4b7a      	ldr	r3, [pc, #488]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105d02:	4977      	ldr	r1, [pc, #476]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105d04:	4313      	orrs	r3, r2
 8105d06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	681b      	ldr	r3, [r3, #0]
 8105d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105d10:	2b00      	cmp	r3, #0
 8105d12:	d034      	beq.n	8105d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d1e:	d01d      	beq.n	8105d5c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8105d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d24:	d817      	bhi.n	8105d56 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8105d26:	2b00      	cmp	r3, #0
 8105d28:	d003      	beq.n	8105d32 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8105d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105d2e:	d009      	beq.n	8105d44 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8105d30:	e011      	b.n	8105d56 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	3304      	adds	r3, #4
 8105d36:	2100      	movs	r1, #0
 8105d38:	4618      	mov	r0, r3
 8105d3a:	f001 fa23 	bl	8107184 <RCCEx_PLL2_Config>
 8105d3e:	4603      	mov	r3, r0
 8105d40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105d42:	e00c      	b.n	8105d5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	3324      	adds	r3, #36	; 0x24
 8105d48:	2102      	movs	r1, #2
 8105d4a:	4618      	mov	r0, r3
 8105d4c:	f001 facc 	bl	81072e8 <RCCEx_PLL3_Config>
 8105d50:	4603      	mov	r3, r0
 8105d52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105d54:	e003      	b.n	8105d5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105d56:	2301      	movs	r3, #1
 8105d58:	75fb      	strb	r3, [r7, #23]
      break;
 8105d5a:	e000      	b.n	8105d5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8105d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d5e:	7dfb      	ldrb	r3, [r7, #23]
 8105d60:	2b00      	cmp	r3, #0
 8105d62:	d10a      	bne.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105d64:	4b5e      	ldr	r3, [pc, #376]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105d72:	495b      	ldr	r1, [pc, #364]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105d74:	4313      	orrs	r3, r2
 8105d76:	658b      	str	r3, [r1, #88]	; 0x58
 8105d78:	e001      	b.n	8105d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d7a:	7dfb      	ldrb	r3, [r7, #23]
 8105d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105d86:	2b00      	cmp	r3, #0
 8105d88:	d033      	beq.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8105d8a:	687b      	ldr	r3, [r7, #4]
 8105d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105d94:	d01c      	beq.n	8105dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8105d96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105d9a:	d816      	bhi.n	8105dca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8105d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105da0:	d003      	beq.n	8105daa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8105da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105da6:	d007      	beq.n	8105db8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8105da8:	e00f      	b.n	8105dca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105daa:	4b4d      	ldr	r3, [pc, #308]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dae:	4a4c      	ldr	r2, [pc, #304]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105db4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8105db6:	e00c      	b.n	8105dd2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	3324      	adds	r3, #36	; 0x24
 8105dbc:	2101      	movs	r1, #1
 8105dbe:	4618      	mov	r0, r3
 8105dc0:	f001 fa92 	bl	81072e8 <RCCEx_PLL3_Config>
 8105dc4:	4603      	mov	r3, r0
 8105dc6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8105dc8:	e003      	b.n	8105dd2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105dca:	2301      	movs	r3, #1
 8105dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8105dce:	e000      	b.n	8105dd2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8105dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105dd2:	7dfb      	ldrb	r3, [r7, #23]
 8105dd4:	2b00      	cmp	r3, #0
 8105dd6:	d10a      	bne.n	8105dee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105dd8:	4b41      	ldr	r3, [pc, #260]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105de6:	493e      	ldr	r1, [pc, #248]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105de8:	4313      	orrs	r3, r2
 8105dea:	654b      	str	r3, [r1, #84]	; 0x54
 8105dec:	e001      	b.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dee:	7dfb      	ldrb	r3, [r7, #23]
 8105df0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105df2:	687b      	ldr	r3, [r7, #4]
 8105df4:	681b      	ldr	r3, [r3, #0]
 8105df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105dfa:	2b00      	cmp	r3, #0
 8105dfc:	d029      	beq.n	8105e52 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e02:	2b00      	cmp	r3, #0
 8105e04:	d003      	beq.n	8105e0e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8105e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105e0a:	d007      	beq.n	8105e1c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8105e0c:	e00f      	b.n	8105e2e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e0e:	4b34      	ldr	r3, [pc, #208]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e12:	4a33      	ldr	r2, [pc, #204]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8105e1a:	e00b      	b.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	3304      	adds	r3, #4
 8105e20:	2102      	movs	r1, #2
 8105e22:	4618      	mov	r0, r3
 8105e24:	f001 f9ae 	bl	8107184 <RCCEx_PLL2_Config>
 8105e28:	4603      	mov	r3, r0
 8105e2a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8105e2c:	e002      	b.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8105e2e:	2301      	movs	r3, #1
 8105e30:	75fb      	strb	r3, [r7, #23]
      break;
 8105e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e34:	7dfb      	ldrb	r3, [r7, #23]
 8105e36:	2b00      	cmp	r3, #0
 8105e38:	d109      	bne.n	8105e4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105e3a:	4b29      	ldr	r3, [pc, #164]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e46:	4926      	ldr	r1, [pc, #152]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105e48:	4313      	orrs	r3, r2
 8105e4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105e4c:	e001      	b.n	8105e52 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e4e:	7dfb      	ldrb	r3, [r7, #23]
 8105e50:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105e5a:	2b00      	cmp	r3, #0
 8105e5c:	d00a      	beq.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105e5e:	687b      	ldr	r3, [r7, #4]
 8105e60:	3324      	adds	r3, #36	; 0x24
 8105e62:	2102      	movs	r1, #2
 8105e64:	4618      	mov	r0, r3
 8105e66:	f001 fa3f 	bl	81072e8 <RCCEx_PLL3_Config>
 8105e6a:	4603      	mov	r3, r0
 8105e6c:	2b00      	cmp	r3, #0
 8105e6e:	d001      	beq.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8105e70:	2301      	movs	r3, #1
 8105e72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105e74:	687b      	ldr	r3, [r7, #4]
 8105e76:	681b      	ldr	r3, [r3, #0]
 8105e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105e7c:	2b00      	cmp	r3, #0
 8105e7e:	d033      	beq.n	8105ee8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105e88:	d017      	beq.n	8105eba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8105e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105e8e:	d811      	bhi.n	8105eb4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105e94:	d013      	beq.n	8105ebe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8105e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105e9a:	d80b      	bhi.n	8105eb4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105e9c:	2b00      	cmp	r3, #0
 8105e9e:	d010      	beq.n	8105ec2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8105ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105ea4:	d106      	bne.n	8105eb4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ea6:	4b0e      	ldr	r3, [pc, #56]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105eaa:	4a0d      	ldr	r2, [pc, #52]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8105eb2:	e007      	b.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105eb4:	2301      	movs	r3, #1
 8105eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8105eb8:	e004      	b.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105eba:	bf00      	nop
 8105ebc:	e002      	b.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105ebe:	bf00      	nop
 8105ec0:	e000      	b.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ec4:	7dfb      	ldrb	r3, [r7, #23]
 8105ec6:	2b00      	cmp	r3, #0
 8105ec8:	d10c      	bne.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105eca:	4b05      	ldr	r3, [pc, #20]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105ed6:	4902      	ldr	r1, [pc, #8]	; (8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105ed8:	4313      	orrs	r3, r2
 8105eda:	654b      	str	r3, [r1, #84]	; 0x54
 8105edc:	e004      	b.n	8105ee8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8105ede:	bf00      	nop
 8105ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ee4:	7dfb      	ldrb	r3, [r7, #23]
 8105ee6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	681b      	ldr	r3, [r3, #0]
 8105eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105ef0:	2b00      	cmp	r3, #0
 8105ef2:	d008      	beq.n	8105f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105ef4:	4b31      	ldr	r3, [pc, #196]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8105efc:	687b      	ldr	r3, [r7, #4]
 8105efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f00:	492e      	ldr	r1, [pc, #184]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f02:	4313      	orrs	r3, r2
 8105f04:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	681b      	ldr	r3, [r3, #0]
 8105f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105f0e:	2b00      	cmp	r3, #0
 8105f10:	d009      	beq.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105f12:	4b2a      	ldr	r3, [pc, #168]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f14:	691b      	ldr	r3, [r3, #16]
 8105f16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105f20:	4926      	ldr	r1, [pc, #152]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f22:	4313      	orrs	r3, r2
 8105f24:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	681b      	ldr	r3, [r3, #0]
 8105f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105f2e:	2b00      	cmp	r3, #0
 8105f30:	d008      	beq.n	8105f44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105f32:	4b22      	ldr	r3, [pc, #136]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105f3e:	491f      	ldr	r1, [pc, #124]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f40:	4313      	orrs	r3, r2
 8105f42:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8105f4c:	2b00      	cmp	r3, #0
 8105f4e:	d00d      	beq.n	8105f6c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105f50:	4b1a      	ldr	r3, [pc, #104]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f52:	691b      	ldr	r3, [r3, #16]
 8105f54:	4a19      	ldr	r2, [pc, #100]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105f5a:	6113      	str	r3, [r2, #16]
 8105f5c:	4b17      	ldr	r3, [pc, #92]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f5e:	691a      	ldr	r2, [r3, #16]
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8105f66:	4915      	ldr	r1, [pc, #84]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f68:	4313      	orrs	r3, r2
 8105f6a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	2b00      	cmp	r3, #0
 8105f72:	da08      	bge.n	8105f86 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105f74:	4b11      	ldr	r3, [pc, #68]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f80:	490e      	ldr	r1, [pc, #56]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f82:	4313      	orrs	r3, r2
 8105f84:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	681b      	ldr	r3, [r3, #0]
 8105f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105f8e:	2b00      	cmp	r3, #0
 8105f90:	d009      	beq.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105f92:	4b0a      	ldr	r3, [pc, #40]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105fa0:	4906      	ldr	r1, [pc, #24]	; (8105fbc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105fa2:	4313      	orrs	r3, r2
 8105fa4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8105fa6:	7dbb      	ldrb	r3, [r7, #22]
 8105fa8:	2b00      	cmp	r3, #0
 8105faa:	d101      	bne.n	8105fb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8105fac:	2300      	movs	r3, #0
 8105fae:	e000      	b.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8105fb0:	2301      	movs	r3, #1
}
 8105fb2:	4618      	mov	r0, r3
 8105fb4:	3718      	adds	r7, #24
 8105fb6:	46bd      	mov	sp, r7
 8105fb8:	bd80      	pop	{r7, pc}
 8105fba:	bf00      	nop
 8105fbc:	58024400 	.word	0x58024400

08105fc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8105fc0:	b580      	push	{r7, lr}
 8105fc2:	b090      	sub	sp, #64	; 0x40
 8105fc4:	af00      	add	r7, sp, #0
 8105fc6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105fce:	f040 8095 	bne.w	81060fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8105fd2:	4b97      	ldr	r3, [pc, #604]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105fd6:	f003 0307 	and.w	r3, r3, #7
 8105fda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105fde:	2b04      	cmp	r3, #4
 8105fe0:	f200 8088 	bhi.w	81060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8105fe4:	a201      	add	r2, pc, #4	; (adr r2, 8105fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8105fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fea:	bf00      	nop
 8105fec:	08106001 	.word	0x08106001
 8105ff0:	08106029 	.word	0x08106029
 8105ff4:	08106051 	.word	0x08106051
 8105ff8:	081060ed 	.word	0x081060ed
 8105ffc:	08106079 	.word	0x08106079
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106000:	4b8b      	ldr	r3, [pc, #556]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810600c:	d108      	bne.n	8106020 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810600e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106012:	4618      	mov	r0, r3
 8106014:	f000 ff64 	bl	8106ee0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8106018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810601a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810601c:	f000 bc94 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106020:	2300      	movs	r3, #0
 8106022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106024:	f000 bc90 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106028:	4b81      	ldr	r3, [pc, #516]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106034:	d108      	bne.n	8106048 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106036:	f107 0318 	add.w	r3, r7, #24
 810603a:	4618      	mov	r0, r3
 810603c:	f000 fca8 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106040:	69bb      	ldr	r3, [r7, #24]
 8106042:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106044:	f000 bc80 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106048:	2300      	movs	r3, #0
 810604a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810604c:	f000 bc7c 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106050:	4b77      	ldr	r3, [pc, #476]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106052:	681b      	ldr	r3, [r3, #0]
 8106054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810605c:	d108      	bne.n	8106070 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810605e:	f107 030c 	add.w	r3, r7, #12
 8106062:	4618      	mov	r0, r3
 8106064:	f000 fde8 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106068:	68fb      	ldr	r3, [r7, #12]
 810606a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810606c:	f000 bc6c 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106070:	2300      	movs	r3, #0
 8106072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106074:	f000 bc68 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106078:	4b6d      	ldr	r3, [pc, #436]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810607a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810607c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106080:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106082:	4b6b      	ldr	r3, [pc, #428]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106084:	681b      	ldr	r3, [r3, #0]
 8106086:	f003 0304 	and.w	r3, r3, #4
 810608a:	2b04      	cmp	r3, #4
 810608c:	d10c      	bne.n	81060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106090:	2b00      	cmp	r3, #0
 8106092:	d109      	bne.n	81060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106094:	4b66      	ldr	r3, [pc, #408]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106096:	681b      	ldr	r3, [r3, #0]
 8106098:	08db      	lsrs	r3, r3, #3
 810609a:	f003 0303 	and.w	r3, r3, #3
 810609e:	4a65      	ldr	r2, [pc, #404]	; (8106234 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 81060a0:	fa22 f303 	lsr.w	r3, r2, r3
 81060a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81060a6:	e01f      	b.n	81060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81060a8:	4b61      	ldr	r3, [pc, #388]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81060b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81060b4:	d106      	bne.n	81060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 81060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81060b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81060bc:	d102      	bne.n	81060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81060be:	4b5e      	ldr	r3, [pc, #376]	; (8106238 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 81060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81060c2:	e011      	b.n	81060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81060c4:	4b5a      	ldr	r3, [pc, #360]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81060cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81060d0:	d106      	bne.n	81060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 81060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81060d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060d8:	d102      	bne.n	81060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81060da:	4b58      	ldr	r3, [pc, #352]	; (810623c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 81060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81060de:	e003      	b.n	81060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81060e0:	2300      	movs	r3, #0
 81060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81060e4:	f000 bc30 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81060e8:	f000 bc2e 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81060ec:	4b54      	ldr	r3, [pc, #336]	; (8106240 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 81060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060f0:	f000 bc2a 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81060f4:	2300      	movs	r3, #0
 81060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060f8:	f000 bc26 	b.w	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106102:	f040 809f 	bne.w	8106244 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8106106:	4b4a      	ldr	r3, [pc, #296]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810610a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810610e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106116:	d04d      	beq.n	81061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8106118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810611a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810611e:	f200 8084 	bhi.w	810622a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106124:	2bc0      	cmp	r3, #192	; 0xc0
 8106126:	d07d      	beq.n	8106224 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8106128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810612a:	2bc0      	cmp	r3, #192	; 0xc0
 810612c:	d87d      	bhi.n	810622a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106130:	2b80      	cmp	r3, #128	; 0x80
 8106132:	d02d      	beq.n	8106190 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8106134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106136:	2b80      	cmp	r3, #128	; 0x80
 8106138:	d877      	bhi.n	810622a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810613c:	2b00      	cmp	r3, #0
 810613e:	d003      	beq.n	8106148 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8106140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106142:	2b40      	cmp	r3, #64	; 0x40
 8106144:	d012      	beq.n	810616c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8106146:	e070      	b.n	810622a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106148:	4b39      	ldr	r3, [pc, #228]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810614a:	681b      	ldr	r3, [r3, #0]
 810614c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106154:	d107      	bne.n	8106166 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810615a:	4618      	mov	r0, r3
 810615c:	f000 fec0 	bl	8106ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106162:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106164:	e3f0      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106166:	2300      	movs	r3, #0
 8106168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810616a:	e3ed      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810616c:	4b30      	ldr	r3, [pc, #192]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106178:	d107      	bne.n	810618a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810617a:	f107 0318 	add.w	r3, r7, #24
 810617e:	4618      	mov	r0, r3
 8106180:	f000 fc06 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106184:	69bb      	ldr	r3, [r7, #24]
 8106186:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106188:	e3de      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810618a:	2300      	movs	r3, #0
 810618c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810618e:	e3db      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106190:	4b27      	ldr	r3, [pc, #156]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810619c:	d107      	bne.n	81061ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810619e:	f107 030c 	add.w	r3, r7, #12
 81061a2:	4618      	mov	r0, r3
 81061a4:	f000 fd48 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81061a8:	68fb      	ldr	r3, [r7, #12]
 81061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81061ac:	e3cc      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81061ae:	2300      	movs	r3, #0
 81061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81061b2:	e3c9      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81061b4:	4b1e      	ldr	r3, [pc, #120]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81061b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81061b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81061bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81061be:	4b1c      	ldr	r3, [pc, #112]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81061c0:	681b      	ldr	r3, [r3, #0]
 81061c2:	f003 0304 	and.w	r3, r3, #4
 81061c6:	2b04      	cmp	r3, #4
 81061c8:	d10c      	bne.n	81061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 81061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81061cc:	2b00      	cmp	r3, #0
 81061ce:	d109      	bne.n	81061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81061d0:	4b17      	ldr	r3, [pc, #92]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	08db      	lsrs	r3, r3, #3
 81061d6:	f003 0303 	and.w	r3, r3, #3
 81061da:	4a16      	ldr	r2, [pc, #88]	; (8106234 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 81061dc:	fa22 f303 	lsr.w	r3, r2, r3
 81061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81061e2:	e01e      	b.n	8106222 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81061e4:	4b12      	ldr	r3, [pc, #72]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81061e6:	681b      	ldr	r3, [r3, #0]
 81061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81061ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81061f0:	d106      	bne.n	8106200 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 81061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81061f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81061f8:	d102      	bne.n	8106200 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81061fa:	4b0f      	ldr	r3, [pc, #60]	; (8106238 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 81061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81061fe:	e010      	b.n	8106222 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106200:	4b0b      	ldr	r3, [pc, #44]	; (8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810620c:	d106      	bne.n	810621c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 810620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106214:	d102      	bne.n	810621c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106216:	4b09      	ldr	r3, [pc, #36]	; (810623c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106218:	63fb      	str	r3, [r7, #60]	; 0x3c
 810621a:	e002      	b.n	8106222 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810621c:	2300      	movs	r3, #0
 810621e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106220:	e392      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106222:	e391      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106224:	4b06      	ldr	r3, [pc, #24]	; (8106240 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106226:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106228:	e38e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 810622a:	2300      	movs	r3, #0
 810622c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810622e:	e38b      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106230:	58024400 	.word	0x58024400
 8106234:	03d09000 	.word	0x03d09000
 8106238:	003d0900 	.word	0x003d0900
 810623c:	007a1200 	.word	0x007a1200
 8106240:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810624a:	f040 809c 	bne.w	8106386 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 810624e:	4b9d      	ldr	r3, [pc, #628]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106252:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8106256:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810625a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810625e:	d054      	beq.n	810630a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8106260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106266:	f200 808b 	bhi.w	8106380 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 810626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810626c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106270:	f000 8083 	beq.w	810637a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8106274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106276:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810627a:	f200 8081 	bhi.w	8106380 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 810627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106284:	d02f      	beq.n	81062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8106286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810628c:	d878      	bhi.n	8106380 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 810628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106290:	2b00      	cmp	r3, #0
 8106292:	d004      	beq.n	810629e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8106294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810629a:	d012      	beq.n	81062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 810629c:	e070      	b.n	8106380 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810629e:	4b89      	ldr	r3, [pc, #548]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81062a0:	681b      	ldr	r3, [r3, #0]
 81062a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81062a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81062aa:	d107      	bne.n	81062bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81062ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81062b0:	4618      	mov	r0, r3
 81062b2:	f000 fe15 	bl	8106ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81062ba:	e345      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81062bc:	2300      	movs	r3, #0
 81062be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062c0:	e342      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81062c2:	4b80      	ldr	r3, [pc, #512]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81062c4:	681b      	ldr	r3, [r3, #0]
 81062c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81062ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81062ce:	d107      	bne.n	81062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81062d0:	f107 0318 	add.w	r3, r7, #24
 81062d4:	4618      	mov	r0, r3
 81062d6:	f000 fb5b 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81062da:	69bb      	ldr	r3, [r7, #24]
 81062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81062de:	e333      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81062e0:	2300      	movs	r3, #0
 81062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062e4:	e330      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81062e6:	4b77      	ldr	r3, [pc, #476]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81062e8:	681b      	ldr	r3, [r3, #0]
 81062ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81062ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81062f2:	d107      	bne.n	8106304 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81062f4:	f107 030c 	add.w	r3, r7, #12
 81062f8:	4618      	mov	r0, r3
 81062fa:	f000 fc9d 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81062fe:	68fb      	ldr	r3, [r7, #12]
 8106300:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106302:	e321      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106304:	2300      	movs	r3, #0
 8106306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106308:	e31e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810630a:	4b6e      	ldr	r3, [pc, #440]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810630c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810630e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106312:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106314:	4b6b      	ldr	r3, [pc, #428]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106316:	681b      	ldr	r3, [r3, #0]
 8106318:	f003 0304 	and.w	r3, r3, #4
 810631c:	2b04      	cmp	r3, #4
 810631e:	d10c      	bne.n	810633a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8106320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106322:	2b00      	cmp	r3, #0
 8106324:	d109      	bne.n	810633a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106326:	4b67      	ldr	r3, [pc, #412]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	08db      	lsrs	r3, r3, #3
 810632c:	f003 0303 	and.w	r3, r3, #3
 8106330:	4a65      	ldr	r2, [pc, #404]	; (81064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106332:	fa22 f303 	lsr.w	r3, r2, r3
 8106336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106338:	e01e      	b.n	8106378 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810633a:	4b62      	ldr	r3, [pc, #392]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106346:	d106      	bne.n	8106356 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8106348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810634a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810634e:	d102      	bne.n	8106356 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106350:	4b5e      	ldr	r3, [pc, #376]	; (81064cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106354:	e010      	b.n	8106378 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106356:	4b5b      	ldr	r3, [pc, #364]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810635e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106362:	d106      	bne.n	8106372 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8106364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810636a:	d102      	bne.n	8106372 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810636c:	4b58      	ldr	r3, [pc, #352]	; (81064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 810636e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106370:	e002      	b.n	8106378 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106372:	2300      	movs	r3, #0
 8106374:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106376:	e2e7      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106378:	e2e6      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810637a:	4b56      	ldr	r3, [pc, #344]	; (81064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 810637c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810637e:	e2e3      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106380:	2300      	movs	r3, #0
 8106382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106384:	e2e0      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810638c:	f040 80a7 	bne.w	81064de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8106390:	4b4c      	ldr	r3, [pc, #304]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106394:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106398:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810639c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81063a0:	d055      	beq.n	810644e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 81063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81063a8:	f200 8096 	bhi.w	81064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 81063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81063b2:	f000 8084 	beq.w	81064be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 81063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81063bc:	f200 808c 	bhi.w	81064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 81063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81063c6:	d030      	beq.n	810642a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 81063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81063ce:	f200 8083 	bhi.w	81064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 81063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063d4:	2b00      	cmp	r3, #0
 81063d6:	d004      	beq.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 81063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81063de:	d012      	beq.n	8106406 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 81063e0:	e07a      	b.n	81064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81063e2:	4b38      	ldr	r3, [pc, #224]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81063e4:	681b      	ldr	r3, [r3, #0]
 81063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81063ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81063ee:	d107      	bne.n	8106400 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81063f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81063f4:	4618      	mov	r0, r3
 81063f6:	f000 fd73 	bl	8106ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81063fe:	e2a3      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106400:	2300      	movs	r3, #0
 8106402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106404:	e2a0      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106406:	4b2f      	ldr	r3, [pc, #188]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810640e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106412:	d107      	bne.n	8106424 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106414:	f107 0318 	add.w	r3, r7, #24
 8106418:	4618      	mov	r0, r3
 810641a:	f000 fab9 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810641e:	69bb      	ldr	r3, [r7, #24]
 8106420:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8106422:	e291      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106424:	2300      	movs	r3, #0
 8106426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106428:	e28e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810642a:	4b26      	ldr	r3, [pc, #152]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810642c:	681b      	ldr	r3, [r3, #0]
 810642e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106436:	d107      	bne.n	8106448 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106438:	f107 030c 	add.w	r3, r7, #12
 810643c:	4618      	mov	r0, r3
 810643e:	f000 fbfb 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106442:	68fb      	ldr	r3, [r7, #12]
 8106444:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106446:	e27f      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106448:	2300      	movs	r3, #0
 810644a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810644c:	e27c      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810644e:	4b1d      	ldr	r3, [pc, #116]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106456:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106458:	4b1a      	ldr	r3, [pc, #104]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810645a:	681b      	ldr	r3, [r3, #0]
 810645c:	f003 0304 	and.w	r3, r3, #4
 8106460:	2b04      	cmp	r3, #4
 8106462:	d10c      	bne.n	810647e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8106464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106466:	2b00      	cmp	r3, #0
 8106468:	d109      	bne.n	810647e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810646a:	4b16      	ldr	r3, [pc, #88]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	08db      	lsrs	r3, r3, #3
 8106470:	f003 0303 	and.w	r3, r3, #3
 8106474:	4a14      	ldr	r2, [pc, #80]	; (81064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106476:	fa22 f303 	lsr.w	r3, r2, r3
 810647a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810647c:	e01e      	b.n	81064bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810647e:	4b11      	ldr	r3, [pc, #68]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106480:	681b      	ldr	r3, [r3, #0]
 8106482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810648a:	d106      	bne.n	810649a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 810648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810648e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106492:	d102      	bne.n	810649a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106494:	4b0d      	ldr	r3, [pc, #52]	; (81064cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106498:	e010      	b.n	81064bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810649a:	4b0a      	ldr	r3, [pc, #40]	; (81064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81064a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81064a6:	d106      	bne.n	81064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 81064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81064aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064ae:	d102      	bne.n	81064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81064b0:	4b07      	ldr	r3, [pc, #28]	; (81064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 81064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81064b4:	e002      	b.n	81064bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81064b6:	2300      	movs	r3, #0
 81064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81064ba:	e245      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81064bc:	e244      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81064be:	4b05      	ldr	r3, [pc, #20]	; (81064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 81064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81064c2:	e241      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81064c4:	58024400 	.word	0x58024400
 81064c8:	03d09000 	.word	0x03d09000
 81064cc:	003d0900 	.word	0x003d0900
 81064d0:	007a1200 	.word	0x007a1200
 81064d4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 81064d8:	2300      	movs	r3, #0
 81064da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81064dc:	e234      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81064e4:	f040 809c 	bne.w	8106620 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 81064e8:	4b9b      	ldr	r3, [pc, #620]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81064ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81064f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81064f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81064f8:	d054      	beq.n	81065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 81064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81064fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106500:	f200 808b 	bhi.w	810661a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106506:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810650a:	f000 8083 	beq.w	8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 810650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106514:	f200 8081 	bhi.w	810661a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810651a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810651e:	d02f      	beq.n	8106580 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8106520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106526:	d878      	bhi.n	810661a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810652a:	2b00      	cmp	r3, #0
 810652c:	d004      	beq.n	8106538 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 810652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106534:	d012      	beq.n	810655c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8106536:	e070      	b.n	810661a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106538:	4b87      	ldr	r3, [pc, #540]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810653a:	681b      	ldr	r3, [r3, #0]
 810653c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106544:	d107      	bne.n	8106556 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810654a:	4618      	mov	r0, r3
 810654c:	f000 fcc8 	bl	8106ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106552:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106554:	e1f8      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106556:	2300      	movs	r3, #0
 8106558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810655a:	e1f5      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810655c:	4b7e      	ldr	r3, [pc, #504]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810655e:	681b      	ldr	r3, [r3, #0]
 8106560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106568:	d107      	bne.n	810657a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810656a:	f107 0318 	add.w	r3, r7, #24
 810656e:	4618      	mov	r0, r3
 8106570:	f000 fa0e 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106574:	69bb      	ldr	r3, [r7, #24]
 8106576:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106578:	e1e6      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810657a:	2300      	movs	r3, #0
 810657c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810657e:	e1e3      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106580:	4b75      	ldr	r3, [pc, #468]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810658c:	d107      	bne.n	810659e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810658e:	f107 030c 	add.w	r3, r7, #12
 8106592:	4618      	mov	r0, r3
 8106594:	f000 fb50 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106598:	68fb      	ldr	r3, [r7, #12]
 810659a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810659c:	e1d4      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810659e:	2300      	movs	r3, #0
 81065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81065a2:	e1d1      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81065a4:	4b6c      	ldr	r3, [pc, #432]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81065a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81065a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81065ac:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81065ae:	4b6a      	ldr	r3, [pc, #424]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81065b0:	681b      	ldr	r3, [r3, #0]
 81065b2:	f003 0304 	and.w	r3, r3, #4
 81065b6:	2b04      	cmp	r3, #4
 81065b8:	d10c      	bne.n	81065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81065bc:	2b00      	cmp	r3, #0
 81065be:	d109      	bne.n	81065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81065c0:	4b65      	ldr	r3, [pc, #404]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81065c2:	681b      	ldr	r3, [r3, #0]
 81065c4:	08db      	lsrs	r3, r3, #3
 81065c6:	f003 0303 	and.w	r3, r3, #3
 81065ca:	4a64      	ldr	r2, [pc, #400]	; (810675c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 81065cc:	fa22 f303 	lsr.w	r3, r2, r3
 81065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81065d2:	e01e      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81065d4:	4b60      	ldr	r3, [pc, #384]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81065d6:	681b      	ldr	r3, [r3, #0]
 81065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81065dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81065e0:	d106      	bne.n	81065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 81065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81065e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81065e8:	d102      	bne.n	81065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81065ea:	4b5d      	ldr	r3, [pc, #372]	; (8106760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 81065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 81065ee:	e010      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81065f0:	4b59      	ldr	r3, [pc, #356]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81065f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81065fc:	d106      	bne.n	810660c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 81065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106604:	d102      	bne.n	810660c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106606:	4b57      	ldr	r3, [pc, #348]	; (8106764 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8106608:	63fb      	str	r3, [r7, #60]	; 0x3c
 810660a:	e002      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810660c:	2300      	movs	r3, #0
 810660e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106610:	e19a      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106612:	e199      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106614:	4b54      	ldr	r3, [pc, #336]	; (8106768 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106618:	e196      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 810661a:	2300      	movs	r3, #0
 810661c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810661e:	e193      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106626:	d173      	bne.n	8106710 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8106628:	4b4b      	ldr	r3, [pc, #300]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810662a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810662c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106630:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106638:	d02f      	beq.n	810669a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 810663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810663c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106640:	d863      	bhi.n	810670a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8106642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106644:	2b00      	cmp	r3, #0
 8106646:	d004      	beq.n	8106652 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8106648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810664a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810664e:	d012      	beq.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8106650:	e05b      	b.n	810670a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106652:	4b41      	ldr	r3, [pc, #260]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810665a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810665e:	d107      	bne.n	8106670 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106660:	f107 0318 	add.w	r3, r7, #24
 8106664:	4618      	mov	r0, r3
 8106666:	f000 f993 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810666a:	69bb      	ldr	r3, [r7, #24]
 810666c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810666e:	e16b      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106670:	2300      	movs	r3, #0
 8106672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106674:	e168      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106676:	4b38      	ldr	r3, [pc, #224]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810667e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106682:	d107      	bne.n	8106694 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106684:	f107 030c 	add.w	r3, r7, #12
 8106688:	4618      	mov	r0, r3
 810668a:	f000 fad5 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810668e:	697b      	ldr	r3, [r7, #20]
 8106690:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106692:	e159      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106694:	2300      	movs	r3, #0
 8106696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106698:	e156      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810669a:	4b2f      	ldr	r3, [pc, #188]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810669c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810669e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81066a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81066a4:	4b2c      	ldr	r3, [pc, #176]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81066a6:	681b      	ldr	r3, [r3, #0]
 81066a8:	f003 0304 	and.w	r3, r3, #4
 81066ac:	2b04      	cmp	r3, #4
 81066ae:	d10c      	bne.n	81066ca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 81066b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81066b2:	2b00      	cmp	r3, #0
 81066b4:	d109      	bne.n	81066ca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81066b6:	4b28      	ldr	r3, [pc, #160]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	08db      	lsrs	r3, r3, #3
 81066bc:	f003 0303 	and.w	r3, r3, #3
 81066c0:	4a26      	ldr	r2, [pc, #152]	; (810675c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 81066c2:	fa22 f303 	lsr.w	r3, r2, r3
 81066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81066c8:	e01e      	b.n	8106708 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81066ca:	4b23      	ldr	r3, [pc, #140]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81066d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81066d6:	d106      	bne.n	81066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 81066d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81066da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81066de:	d102      	bne.n	81066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81066e0:	4b1f      	ldr	r3, [pc, #124]	; (8106760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 81066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81066e4:	e010      	b.n	8106708 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81066e6:	4b1c      	ldr	r3, [pc, #112]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81066e8:	681b      	ldr	r3, [r3, #0]
 81066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81066ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81066f2:	d106      	bne.n	8106702 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 81066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81066f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81066fa:	d102      	bne.n	8106702 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81066fc:	4b19      	ldr	r3, [pc, #100]	; (8106764 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106700:	e002      	b.n	8106708 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106702:	2300      	movs	r3, #0
 8106704:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106706:	e11f      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106708:	e11e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 810670a:	2300      	movs	r3, #0
 810670c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810670e:	e11b      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106716:	d13e      	bne.n	8106796 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8106718:	4b0f      	ldr	r3, [pc, #60]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810671a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810671c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106720:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106724:	2b00      	cmp	r3, #0
 8106726:	d004      	beq.n	8106732 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8106728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810672a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810672e:	d01d      	beq.n	810676c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8106730:	e02e      	b.n	8106790 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106732:	4b09      	ldr	r3, [pc, #36]	; (8106758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106734:	681b      	ldr	r3, [r3, #0]
 8106736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810673a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810673e:	d107      	bne.n	8106750 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106744:	4618      	mov	r0, r3
 8106746:	f000 fbcb 	bl	8106ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810674c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810674e:	e0fb      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106750:	2300      	movs	r3, #0
 8106752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106754:	e0f8      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106756:	bf00      	nop
 8106758:	58024400 	.word	0x58024400
 810675c:	03d09000 	.word	0x03d09000
 8106760:	003d0900 	.word	0x003d0900
 8106764:	007a1200 	.word	0x007a1200
 8106768:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810676c:	4b79      	ldr	r3, [pc, #484]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106778:	d107      	bne.n	810678a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810677a:	f107 0318 	add.w	r3, r7, #24
 810677e:	4618      	mov	r0, r3
 8106780:	f000 f906 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106784:	6a3b      	ldr	r3, [r7, #32]
 8106786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106788:	e0de      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810678a:	2300      	movs	r3, #0
 810678c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810678e:	e0db      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106790:	2300      	movs	r3, #0
 8106792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106794:	e0d8      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810679c:	f040 8085 	bne.w	81068aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 81067a0:	4b6c      	ldr	r3, [pc, #432]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067a4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81067a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81067b0:	d06b      	beq.n	810688a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 81067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81067b8:	d874      	bhi.n	81068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81067c0:	d056      	beq.n	8106870 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 81067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81067c8:	d86c      	bhi.n	81068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81067d0:	d03b      	beq.n	810684a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 81067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81067d8:	d864      	bhi.n	81068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81067e0:	d021      	beq.n	8106826 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 81067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81067e8:	d85c      	bhi.n	81068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067ec:	2b00      	cmp	r3, #0
 81067ee:	d004      	beq.n	81067fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81067f6:	d004      	beq.n	8106802 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 81067f8:	e054      	b.n	81068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81067fa:	f000 f8b3 	bl	8106964 <HAL_RCCEx_GetD3PCLK1Freq>
 81067fe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8106800:	e0a2      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106802:	4b54      	ldr	r3, [pc, #336]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810680a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810680e:	d107      	bne.n	8106820 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106810:	f107 0318 	add.w	r3, r7, #24
 8106814:	4618      	mov	r0, r3
 8106816:	f000 f8bb 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810681a:	69fb      	ldr	r3, [r7, #28]
 810681c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810681e:	e093      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106820:	2300      	movs	r3, #0
 8106822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106824:	e090      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106826:	4b4b      	ldr	r3, [pc, #300]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810682e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106832:	d107      	bne.n	8106844 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106834:	f107 030c 	add.w	r3, r7, #12
 8106838:	4618      	mov	r0, r3
 810683a:	f000 f9fd 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810683e:	693b      	ldr	r3, [r7, #16]
 8106840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106842:	e081      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106844:	2300      	movs	r3, #0
 8106846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106848:	e07e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810684a:	4b42      	ldr	r3, [pc, #264]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	f003 0304 	and.w	r3, r3, #4
 8106852:	2b04      	cmp	r3, #4
 8106854:	d109      	bne.n	810686a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106856:	4b3f      	ldr	r3, [pc, #252]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106858:	681b      	ldr	r3, [r3, #0]
 810685a:	08db      	lsrs	r3, r3, #3
 810685c:	f003 0303 	and.w	r3, r3, #3
 8106860:	4a3d      	ldr	r2, [pc, #244]	; (8106958 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8106862:	fa22 f303 	lsr.w	r3, r2, r3
 8106866:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106868:	e06e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810686a:	2300      	movs	r3, #0
 810686c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810686e:	e06b      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106870:	4b38      	ldr	r3, [pc, #224]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106872:	681b      	ldr	r3, [r3, #0]
 8106874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810687c:	d102      	bne.n	8106884 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 810687e:	4b37      	ldr	r3, [pc, #220]	; (810695c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8106880:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106882:	e061      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106884:	2300      	movs	r3, #0
 8106886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106888:	e05e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810688a:	4b32      	ldr	r3, [pc, #200]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106896:	d102      	bne.n	810689e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8106898:	4b31      	ldr	r3, [pc, #196]	; (8106960 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810689a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810689c:	e054      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810689e:	2300      	movs	r3, #0
 81068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81068a2:	e051      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 81068a4:	2300      	movs	r3, #0
 81068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81068a8:	e04e      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81068b0:	d148      	bne.n	8106944 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 81068b2:	4b28      	ldr	r3, [pc, #160]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81068b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81068ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81068be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81068c2:	d02a      	beq.n	810691a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 81068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81068c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81068ca:	d838      	bhi.n	810693e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 81068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81068ce:	2b00      	cmp	r3, #0
 81068d0:	d004      	beq.n	81068dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 81068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81068d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81068d8:	d00d      	beq.n	81068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 81068da:	e030      	b.n	810693e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81068dc:	4b1d      	ldr	r3, [pc, #116]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81068de:	681b      	ldr	r3, [r3, #0]
 81068e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81068e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81068e8:	d102      	bne.n	81068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 81068ea:	4b1d      	ldr	r3, [pc, #116]	; (8106960 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81068ee:	e02b      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81068f0:	2300      	movs	r3, #0
 81068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81068f4:	e028      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81068f6:	4b17      	ldr	r3, [pc, #92]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81068f8:	681b      	ldr	r3, [r3, #0]
 81068fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81068fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106902:	d107      	bne.n	8106914 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106908:	4618      	mov	r0, r3
 810690a:	f000 fae9 	bl	8106ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106910:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106912:	e019      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106914:	2300      	movs	r3, #0
 8106916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106918:	e016      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810691a:	4b0e      	ldr	r3, [pc, #56]	; (8106954 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810691c:	681b      	ldr	r3, [r3, #0]
 810691e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106926:	d107      	bne.n	8106938 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106928:	f107 0318 	add.w	r3, r7, #24
 810692c:	4618      	mov	r0, r3
 810692e:	f000 f82f 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106932:	69fb      	ldr	r3, [r7, #28]
 8106934:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106936:	e007      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106938:	2300      	movs	r3, #0
 810693a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810693c:	e004      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 810693e:	2300      	movs	r3, #0
 8106940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106942:	e001      	b.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8106944:	2300      	movs	r3, #0
 8106946:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8106948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810694a:	4618      	mov	r0, r3
 810694c:	3740      	adds	r7, #64	; 0x40
 810694e:	46bd      	mov	sp, r7
 8106950:	bd80      	pop	{r7, pc}
 8106952:	bf00      	nop
 8106954:	58024400 	.word	0x58024400
 8106958:	03d09000 	.word	0x03d09000
 810695c:	003d0900 	.word	0x003d0900
 8106960:	007a1200 	.word	0x007a1200

08106964 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106964:	b580      	push	{r7, lr}
 8106966:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106968:	f7fe fb86 	bl	8105078 <HAL_RCC_GetHCLKFreq>
 810696c:	4602      	mov	r2, r0
 810696e:	4b06      	ldr	r3, [pc, #24]	; (8106988 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106970:	6a1b      	ldr	r3, [r3, #32]
 8106972:	091b      	lsrs	r3, r3, #4
 8106974:	f003 0307 	and.w	r3, r3, #7
 8106978:	4904      	ldr	r1, [pc, #16]	; (810698c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810697a:	5ccb      	ldrb	r3, [r1, r3]
 810697c:	f003 031f 	and.w	r3, r3, #31
 8106980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106984:	4618      	mov	r0, r3
 8106986:	bd80      	pop	{r7, pc}
 8106988:	58024400 	.word	0x58024400
 810698c:	0810a07c 	.word	0x0810a07c

08106990 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106990:	b480      	push	{r7}
 8106992:	b089      	sub	sp, #36	; 0x24
 8106994:	af00      	add	r7, sp, #0
 8106996:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106998:	4ba1      	ldr	r3, [pc, #644]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810699c:	f003 0303 	and.w	r3, r3, #3
 81069a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81069a2:	4b9f      	ldr	r3, [pc, #636]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069a6:	0b1b      	lsrs	r3, r3, #12
 81069a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81069ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81069ae:	4b9c      	ldr	r3, [pc, #624]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069b2:	091b      	lsrs	r3, r3, #4
 81069b4:	f003 0301 	and.w	r3, r3, #1
 81069b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81069ba:	4b99      	ldr	r3, [pc, #612]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81069be:	08db      	lsrs	r3, r3, #3
 81069c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81069c4:	693a      	ldr	r2, [r7, #16]
 81069c6:	fb02 f303 	mul.w	r3, r2, r3
 81069ca:	ee07 3a90 	vmov	s15, r3
 81069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81069d6:	697b      	ldr	r3, [r7, #20]
 81069d8:	2b00      	cmp	r3, #0
 81069da:	f000 8111 	beq.w	8106c00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81069de:	69bb      	ldr	r3, [r7, #24]
 81069e0:	2b02      	cmp	r3, #2
 81069e2:	f000 8083 	beq.w	8106aec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81069e6:	69bb      	ldr	r3, [r7, #24]
 81069e8:	2b02      	cmp	r3, #2
 81069ea:	f200 80a1 	bhi.w	8106b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81069ee:	69bb      	ldr	r3, [r7, #24]
 81069f0:	2b00      	cmp	r3, #0
 81069f2:	d003      	beq.n	81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81069f4:	69bb      	ldr	r3, [r7, #24]
 81069f6:	2b01      	cmp	r3, #1
 81069f8:	d056      	beq.n	8106aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81069fa:	e099      	b.n	8106b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81069fc:	4b88      	ldr	r3, [pc, #544]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069fe:	681b      	ldr	r3, [r3, #0]
 8106a00:	f003 0320 	and.w	r3, r3, #32
 8106a04:	2b00      	cmp	r3, #0
 8106a06:	d02d      	beq.n	8106a64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106a08:	4b85      	ldr	r3, [pc, #532]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	08db      	lsrs	r3, r3, #3
 8106a0e:	f003 0303 	and.w	r3, r3, #3
 8106a12:	4a84      	ldr	r2, [pc, #528]	; (8106c24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106a14:	fa22 f303 	lsr.w	r3, r2, r3
 8106a18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106a1a:	68bb      	ldr	r3, [r7, #8]
 8106a1c:	ee07 3a90 	vmov	s15, r3
 8106a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a24:	697b      	ldr	r3, [r7, #20]
 8106a26:	ee07 3a90 	vmov	s15, r3
 8106a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a32:	4b7b      	ldr	r3, [pc, #492]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a3a:	ee07 3a90 	vmov	s15, r3
 8106a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106a62:	e087      	b.n	8106b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106a64:	697b      	ldr	r3, [r7, #20]
 8106a66:	ee07 3a90 	vmov	s15, r3
 8106a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106c2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a76:	4b6a      	ldr	r3, [pc, #424]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a7e:	ee07 3a90 	vmov	s15, r3
 8106a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106aa6:	e065      	b.n	8106b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106aa8:	697b      	ldr	r3, [r7, #20]
 8106aaa:	ee07 3a90 	vmov	s15, r3
 8106aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106aba:	4b59      	ldr	r3, [pc, #356]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ac2:	ee07 3a90 	vmov	s15, r3
 8106ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ace:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106aea:	e043      	b.n	8106b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106aec:	697b      	ldr	r3, [r7, #20]
 8106aee:	ee07 3a90 	vmov	s15, r3
 8106af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106af6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106afe:	4b48      	ldr	r3, [pc, #288]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b06:	ee07 3a90 	vmov	s15, r3
 8106b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b2e:	e021      	b.n	8106b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106b30:	697b      	ldr	r3, [r7, #20]
 8106b32:	ee07 3a90 	vmov	s15, r3
 8106b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b42:	4b37      	ldr	r3, [pc, #220]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b4a:	ee07 3a90 	vmov	s15, r3
 8106b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106b74:	4b2a      	ldr	r3, [pc, #168]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b78:	0a5b      	lsrs	r3, r3, #9
 8106b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b7e:	ee07 3a90 	vmov	s15, r3
 8106b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b9a:	ee17 2a90 	vmov	r2, s15
 8106b9e:	687b      	ldr	r3, [r7, #4]
 8106ba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106ba2:	4b1f      	ldr	r3, [pc, #124]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ba6:	0c1b      	lsrs	r3, r3, #16
 8106ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106bac:	ee07 3a90 	vmov	s15, r3
 8106bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8106bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106bc8:	ee17 2a90 	vmov	r2, s15
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106bd0:	4b13      	ldr	r3, [pc, #76]	; (8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106bd4:	0e1b      	lsrs	r3, r3, #24
 8106bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106bda:	ee07 3a90 	vmov	s15, r3
 8106bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8106bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106bf6:	ee17 2a90 	vmov	r2, s15
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106bfe:	e008      	b.n	8106c12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	2200      	movs	r2, #0
 8106c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	2200      	movs	r2, #0
 8106c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	2200      	movs	r2, #0
 8106c10:	609a      	str	r2, [r3, #8]
}
 8106c12:	bf00      	nop
 8106c14:	3724      	adds	r7, #36	; 0x24
 8106c16:	46bd      	mov	sp, r7
 8106c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c1c:	4770      	bx	lr
 8106c1e:	bf00      	nop
 8106c20:	58024400 	.word	0x58024400
 8106c24:	03d09000 	.word	0x03d09000
 8106c28:	46000000 	.word	0x46000000
 8106c2c:	4c742400 	.word	0x4c742400
 8106c30:	4a742400 	.word	0x4a742400
 8106c34:	4af42400 	.word	0x4af42400

08106c38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8106c38:	b480      	push	{r7}
 8106c3a:	b089      	sub	sp, #36	; 0x24
 8106c3c:	af00      	add	r7, sp, #0
 8106c3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106c40:	4ba1      	ldr	r3, [pc, #644]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c44:	f003 0303 	and.w	r3, r3, #3
 8106c48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8106c4a:	4b9f      	ldr	r3, [pc, #636]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c4e:	0d1b      	lsrs	r3, r3, #20
 8106c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106c54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106c56:	4b9c      	ldr	r3, [pc, #624]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c5a:	0a1b      	lsrs	r3, r3, #8
 8106c5c:	f003 0301 	and.w	r3, r3, #1
 8106c60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106c62:	4b99      	ldr	r3, [pc, #612]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106c66:	08db      	lsrs	r3, r3, #3
 8106c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106c6c:	693a      	ldr	r2, [r7, #16]
 8106c6e:	fb02 f303 	mul.w	r3, r2, r3
 8106c72:	ee07 3a90 	vmov	s15, r3
 8106c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106c7e:	697b      	ldr	r3, [r7, #20]
 8106c80:	2b00      	cmp	r3, #0
 8106c82:	f000 8111 	beq.w	8106ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106c86:	69bb      	ldr	r3, [r7, #24]
 8106c88:	2b02      	cmp	r3, #2
 8106c8a:	f000 8083 	beq.w	8106d94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106c8e:	69bb      	ldr	r3, [r7, #24]
 8106c90:	2b02      	cmp	r3, #2
 8106c92:	f200 80a1 	bhi.w	8106dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106c96:	69bb      	ldr	r3, [r7, #24]
 8106c98:	2b00      	cmp	r3, #0
 8106c9a:	d003      	beq.n	8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106c9c:	69bb      	ldr	r3, [r7, #24]
 8106c9e:	2b01      	cmp	r3, #1
 8106ca0:	d056      	beq.n	8106d50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106ca2:	e099      	b.n	8106dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106ca4:	4b88      	ldr	r3, [pc, #544]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ca6:	681b      	ldr	r3, [r3, #0]
 8106ca8:	f003 0320 	and.w	r3, r3, #32
 8106cac:	2b00      	cmp	r3, #0
 8106cae:	d02d      	beq.n	8106d0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106cb0:	4b85      	ldr	r3, [pc, #532]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	08db      	lsrs	r3, r3, #3
 8106cb6:	f003 0303 	and.w	r3, r3, #3
 8106cba:	4a84      	ldr	r2, [pc, #528]	; (8106ecc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8106cc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106cc2:	68bb      	ldr	r3, [r7, #8]
 8106cc4:	ee07 3a90 	vmov	s15, r3
 8106cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ccc:	697b      	ldr	r3, [r7, #20]
 8106cce:	ee07 3a90 	vmov	s15, r3
 8106cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106cda:	4b7b      	ldr	r3, [pc, #492]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ce2:	ee07 3a90 	vmov	s15, r3
 8106ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8106cee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106d0a:	e087      	b.n	8106e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106d0c:	697b      	ldr	r3, [r7, #20]
 8106d0e:	ee07 3a90 	vmov	s15, r3
 8106d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d1e:	4b6a      	ldr	r3, [pc, #424]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d26:	ee07 3a90 	vmov	s15, r3
 8106d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106d32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106d4e:	e065      	b.n	8106e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106d50:	697b      	ldr	r3, [r7, #20]
 8106d52:	ee07 3a90 	vmov	s15, r3
 8106d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d62:	4b59      	ldr	r3, [pc, #356]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d6a:	ee07 3a90 	vmov	s15, r3
 8106d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8106d76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106d92:	e043      	b.n	8106e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106d94:	697b      	ldr	r3, [r7, #20]
 8106d96:	ee07 3a90 	vmov	s15, r3
 8106d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106edc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106da6:	4b48      	ldr	r3, [pc, #288]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dae:	ee07 3a90 	vmov	s15, r3
 8106db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106dba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106dd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106dd6:	e021      	b.n	8106e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106dd8:	697b      	ldr	r3, [r7, #20]
 8106dda:	ee07 3a90 	vmov	s15, r3
 8106dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106de2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106dea:	4b37      	ldr	r3, [pc, #220]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106df2:	ee07 3a90 	vmov	s15, r3
 8106df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8106dfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106e1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106e1c:	4b2a      	ldr	r3, [pc, #168]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e20:	0a5b      	lsrs	r3, r3, #9
 8106e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106e26:	ee07 3a90 	vmov	s15, r3
 8106e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8106e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106e42:	ee17 2a90 	vmov	r2, s15
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106e4a:	4b1f      	ldr	r3, [pc, #124]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e4e:	0c1b      	lsrs	r3, r3, #16
 8106e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106e54:	ee07 3a90 	vmov	s15, r3
 8106e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8106e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106e70:	ee17 2a90 	vmov	r2, s15
 8106e74:	687b      	ldr	r3, [r7, #4]
 8106e76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106e78:	4b13      	ldr	r3, [pc, #76]	; (8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e7c:	0e1b      	lsrs	r3, r3, #24
 8106e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106e82:	ee07 3a90 	vmov	s15, r3
 8106e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8106e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106e9e:	ee17 2a90 	vmov	r2, s15
 8106ea2:	687b      	ldr	r3, [r7, #4]
 8106ea4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106ea6:	e008      	b.n	8106eba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	2200      	movs	r2, #0
 8106eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106eae:	687b      	ldr	r3, [r7, #4]
 8106eb0:	2200      	movs	r2, #0
 8106eb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106eb4:	687b      	ldr	r3, [r7, #4]
 8106eb6:	2200      	movs	r2, #0
 8106eb8:	609a      	str	r2, [r3, #8]
}
 8106eba:	bf00      	nop
 8106ebc:	3724      	adds	r7, #36	; 0x24
 8106ebe:	46bd      	mov	sp, r7
 8106ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ec4:	4770      	bx	lr
 8106ec6:	bf00      	nop
 8106ec8:	58024400 	.word	0x58024400
 8106ecc:	03d09000 	.word	0x03d09000
 8106ed0:	46000000 	.word	0x46000000
 8106ed4:	4c742400 	.word	0x4c742400
 8106ed8:	4a742400 	.word	0x4a742400
 8106edc:	4af42400 	.word	0x4af42400

08106ee0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8106ee0:	b480      	push	{r7}
 8106ee2:	b089      	sub	sp, #36	; 0x24
 8106ee4:	af00      	add	r7, sp, #0
 8106ee6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106ee8:	4ba0      	ldr	r3, [pc, #640]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106eec:	f003 0303 	and.w	r3, r3, #3
 8106ef0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8106ef2:	4b9e      	ldr	r3, [pc, #632]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ef6:	091b      	lsrs	r3, r3, #4
 8106ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106efc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8106efe:	4b9b      	ldr	r3, [pc, #620]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f02:	f003 0301 	and.w	r3, r3, #1
 8106f06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8106f08:	4b98      	ldr	r3, [pc, #608]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f0c:	08db      	lsrs	r3, r3, #3
 8106f0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106f12:	693a      	ldr	r2, [r7, #16]
 8106f14:	fb02 f303 	mul.w	r3, r2, r3
 8106f18:	ee07 3a90 	vmov	s15, r3
 8106f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8106f24:	697b      	ldr	r3, [r7, #20]
 8106f26:	2b00      	cmp	r3, #0
 8106f28:	f000 8111 	beq.w	810714e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8106f2c:	69bb      	ldr	r3, [r7, #24]
 8106f2e:	2b02      	cmp	r3, #2
 8106f30:	f000 8083 	beq.w	810703a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8106f34:	69bb      	ldr	r3, [r7, #24]
 8106f36:	2b02      	cmp	r3, #2
 8106f38:	f200 80a1 	bhi.w	810707e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8106f3c:	69bb      	ldr	r3, [r7, #24]
 8106f3e:	2b00      	cmp	r3, #0
 8106f40:	d003      	beq.n	8106f4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8106f42:	69bb      	ldr	r3, [r7, #24]
 8106f44:	2b01      	cmp	r3, #1
 8106f46:	d056      	beq.n	8106ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8106f48:	e099      	b.n	810707e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106f4a:	4b88      	ldr	r3, [pc, #544]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f4c:	681b      	ldr	r3, [r3, #0]
 8106f4e:	f003 0320 	and.w	r3, r3, #32
 8106f52:	2b00      	cmp	r3, #0
 8106f54:	d02d      	beq.n	8106fb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106f56:	4b85      	ldr	r3, [pc, #532]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	08db      	lsrs	r3, r3, #3
 8106f5c:	f003 0303 	and.w	r3, r3, #3
 8106f60:	4a83      	ldr	r2, [pc, #524]	; (8107170 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8106f62:	fa22 f303 	lsr.w	r3, r2, r3
 8106f66:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106f68:	68bb      	ldr	r3, [r7, #8]
 8106f6a:	ee07 3a90 	vmov	s15, r3
 8106f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106f72:	697b      	ldr	r3, [r7, #20]
 8106f74:	ee07 3a90 	vmov	s15, r3
 8106f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106f80:	4b7a      	ldr	r3, [pc, #488]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106f88:	ee07 3a90 	vmov	s15, r3
 8106f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106f90:	ed97 6a03 	vldr	s12, [r7, #12]
 8106f94:	eddf 5a77 	vldr	s11, [pc, #476]	; 8107174 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106fac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106fb0:	e087      	b.n	81070c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106fb2:	697b      	ldr	r3, [r7, #20]
 8106fb4:	ee07 3a90 	vmov	s15, r3
 8106fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106fbc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8107178 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106fc4:	4b69      	ldr	r3, [pc, #420]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106fcc:	ee07 3a90 	vmov	s15, r3
 8106fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106fd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8106fd8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8107174 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ff0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106ff4:	e065      	b.n	81070c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106ff6:	697b      	ldr	r3, [r7, #20]
 8106ff8:	ee07 3a90 	vmov	s15, r3
 8106ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107000:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810717c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107008:	4b58      	ldr	r3, [pc, #352]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810700c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107010:	ee07 3a90 	vmov	s15, r3
 8107014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107018:	ed97 6a03 	vldr	s12, [r7, #12]
 810701c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8107174 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810702c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107034:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107038:	e043      	b.n	81070c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810703a:	697b      	ldr	r3, [r7, #20]
 810703c:	ee07 3a90 	vmov	s15, r3
 8107040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107044:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8107180 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8107048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810704c:	4b47      	ldr	r3, [pc, #284]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107054:	ee07 3a90 	vmov	s15, r3
 8107058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810705c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107060:	eddf 5a44 	vldr	s11, [pc, #272]	; 8107174 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810706c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107078:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810707c:	e021      	b.n	81070c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810707e:	697b      	ldr	r3, [r7, #20]
 8107080:	ee07 3a90 	vmov	s15, r3
 8107084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107088:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8107178 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810708c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107090:	4b36      	ldr	r3, [pc, #216]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107098:	ee07 3a90 	vmov	s15, r3
 810709c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81070a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81070a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8107174 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81070a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81070ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81070b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81070b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81070b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81070bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81070c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 81070c2:	4b2a      	ldr	r3, [pc, #168]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81070c6:	0a5b      	lsrs	r3, r3, #9
 81070c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81070cc:	ee07 3a90 	vmov	s15, r3
 81070d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81070d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81070d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81070dc:	edd7 6a07 	vldr	s13, [r7, #28]
 81070e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81070e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81070e8:	ee17 2a90 	vmov	r2, s15
 81070ec:	687b      	ldr	r3, [r7, #4]
 81070ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 81070f0:	4b1e      	ldr	r3, [pc, #120]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81070f4:	0c1b      	lsrs	r3, r3, #16
 81070f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81070fa:	ee07 3a90 	vmov	s15, r3
 81070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107106:	ee37 7a87 	vadd.f32	s14, s15, s14
 810710a:	edd7 6a07 	vldr	s13, [r7, #28]
 810710e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107116:	ee17 2a90 	vmov	r2, s15
 810711a:	687b      	ldr	r3, [r7, #4]
 810711c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810711e:	4b13      	ldr	r3, [pc, #76]	; (810716c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107122:	0e1b      	lsrs	r3, r3, #24
 8107124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107128:	ee07 3a90 	vmov	s15, r3
 810712c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107138:	edd7 6a07 	vldr	s13, [r7, #28]
 810713c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107144:	ee17 2a90 	vmov	r2, s15
 8107148:	687b      	ldr	r3, [r7, #4]
 810714a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810714c:	e008      	b.n	8107160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	2200      	movs	r2, #0
 8107152:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	2200      	movs	r2, #0
 8107158:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	2200      	movs	r2, #0
 810715e:	609a      	str	r2, [r3, #8]
}
 8107160:	bf00      	nop
 8107162:	3724      	adds	r7, #36	; 0x24
 8107164:	46bd      	mov	sp, r7
 8107166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810716a:	4770      	bx	lr
 810716c:	58024400 	.word	0x58024400
 8107170:	03d09000 	.word	0x03d09000
 8107174:	46000000 	.word	0x46000000
 8107178:	4c742400 	.word	0x4c742400
 810717c:	4a742400 	.word	0x4a742400
 8107180:	4af42400 	.word	0x4af42400

08107184 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107184:	b580      	push	{r7, lr}
 8107186:	b084      	sub	sp, #16
 8107188:	af00      	add	r7, sp, #0
 810718a:	6078      	str	r0, [r7, #4]
 810718c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810718e:	2300      	movs	r3, #0
 8107190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107192:	4b54      	ldr	r3, [pc, #336]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107196:	f003 0303 	and.w	r3, r3, #3
 810719a:	2b03      	cmp	r3, #3
 810719c:	d101      	bne.n	81071a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810719e:	2301      	movs	r3, #1
 81071a0:	e09b      	b.n	81072da <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81071a2:	4b50      	ldr	r3, [pc, #320]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81071a4:	681b      	ldr	r3, [r3, #0]
 81071a6:	4a4f      	ldr	r2, [pc, #316]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81071a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81071ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81071ae:	f7fb fd0f 	bl	8102bd0 <HAL_GetTick>
 81071b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81071b4:	e008      	b.n	81071c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81071b6:	f7fb fd0b 	bl	8102bd0 <HAL_GetTick>
 81071ba:	4602      	mov	r2, r0
 81071bc:	68bb      	ldr	r3, [r7, #8]
 81071be:	1ad3      	subs	r3, r2, r3
 81071c0:	2b02      	cmp	r3, #2
 81071c2:	d901      	bls.n	81071c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81071c4:	2303      	movs	r3, #3
 81071c6:	e088      	b.n	81072da <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81071c8:	4b46      	ldr	r3, [pc, #280]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81071ca:	681b      	ldr	r3, [r3, #0]
 81071cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81071d0:	2b00      	cmp	r3, #0
 81071d2:	d1f0      	bne.n	81071b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81071d4:	4b43      	ldr	r3, [pc, #268]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81071d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	681b      	ldr	r3, [r3, #0]
 81071e0:	031b      	lsls	r3, r3, #12
 81071e2:	4940      	ldr	r1, [pc, #256]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81071e4:	4313      	orrs	r3, r2
 81071e6:	628b      	str	r3, [r1, #40]	; 0x28
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	685b      	ldr	r3, [r3, #4]
 81071ec:	3b01      	subs	r3, #1
 81071ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	689b      	ldr	r3, [r3, #8]
 81071f6:	3b01      	subs	r3, #1
 81071f8:	025b      	lsls	r3, r3, #9
 81071fa:	b29b      	uxth	r3, r3
 81071fc:	431a      	orrs	r2, r3
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	68db      	ldr	r3, [r3, #12]
 8107202:	3b01      	subs	r3, #1
 8107204:	041b      	lsls	r3, r3, #16
 8107206:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810720a:	431a      	orrs	r2, r3
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	691b      	ldr	r3, [r3, #16]
 8107210:	3b01      	subs	r3, #1
 8107212:	061b      	lsls	r3, r3, #24
 8107214:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107218:	4932      	ldr	r1, [pc, #200]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810721a:	4313      	orrs	r3, r2
 810721c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810721e:	4b31      	ldr	r3, [pc, #196]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	695b      	ldr	r3, [r3, #20]
 810722a:	492e      	ldr	r1, [pc, #184]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810722c:	4313      	orrs	r3, r2
 810722e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107230:	4b2c      	ldr	r3, [pc, #176]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107234:	f023 0220 	bic.w	r2, r3, #32
 8107238:	687b      	ldr	r3, [r7, #4]
 810723a:	699b      	ldr	r3, [r3, #24]
 810723c:	4929      	ldr	r1, [pc, #164]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810723e:	4313      	orrs	r3, r2
 8107240:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107242:	4b28      	ldr	r3, [pc, #160]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107246:	4a27      	ldr	r2, [pc, #156]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107248:	f023 0310 	bic.w	r3, r3, #16
 810724c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810724e:	4b25      	ldr	r3, [pc, #148]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107256:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810725a:	687a      	ldr	r2, [r7, #4]
 810725c:	69d2      	ldr	r2, [r2, #28]
 810725e:	00d2      	lsls	r2, r2, #3
 8107260:	4920      	ldr	r1, [pc, #128]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107262:	4313      	orrs	r3, r2
 8107264:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107266:	4b1f      	ldr	r3, [pc, #124]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810726a:	4a1e      	ldr	r2, [pc, #120]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810726c:	f043 0310 	orr.w	r3, r3, #16
 8107270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107272:	683b      	ldr	r3, [r7, #0]
 8107274:	2b00      	cmp	r3, #0
 8107276:	d106      	bne.n	8107286 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107278:	4b1a      	ldr	r3, [pc, #104]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810727c:	4a19      	ldr	r2, [pc, #100]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810727e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107284:	e00f      	b.n	81072a6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107286:	683b      	ldr	r3, [r7, #0]
 8107288:	2b01      	cmp	r3, #1
 810728a:	d106      	bne.n	810729a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810728c:	4b15      	ldr	r3, [pc, #84]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107290:	4a14      	ldr	r2, [pc, #80]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 8107292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107298:	e005      	b.n	81072a6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810729a:	4b12      	ldr	r3, [pc, #72]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 810729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810729e:	4a11      	ldr	r2, [pc, #68]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81072a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81072a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81072a6:	4b0f      	ldr	r3, [pc, #60]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81072a8:	681b      	ldr	r3, [r3, #0]
 81072aa:	4a0e      	ldr	r2, [pc, #56]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81072ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81072b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81072b2:	f7fb fc8d 	bl	8102bd0 <HAL_GetTick>
 81072b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81072b8:	e008      	b.n	81072cc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81072ba:	f7fb fc89 	bl	8102bd0 <HAL_GetTick>
 81072be:	4602      	mov	r2, r0
 81072c0:	68bb      	ldr	r3, [r7, #8]
 81072c2:	1ad3      	subs	r3, r2, r3
 81072c4:	2b02      	cmp	r3, #2
 81072c6:	d901      	bls.n	81072cc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81072c8:	2303      	movs	r3, #3
 81072ca:	e006      	b.n	81072da <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81072cc:	4b05      	ldr	r3, [pc, #20]	; (81072e4 <RCCEx_PLL2_Config+0x160>)
 81072ce:	681b      	ldr	r3, [r3, #0]
 81072d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81072d4:	2b00      	cmp	r3, #0
 81072d6:	d0f0      	beq.n	81072ba <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 81072da:	4618      	mov	r0, r3
 81072dc:	3710      	adds	r7, #16
 81072de:	46bd      	mov	sp, r7
 81072e0:	bd80      	pop	{r7, pc}
 81072e2:	bf00      	nop
 81072e4:	58024400 	.word	0x58024400

081072e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81072e8:	b580      	push	{r7, lr}
 81072ea:	b084      	sub	sp, #16
 81072ec:	af00      	add	r7, sp, #0
 81072ee:	6078      	str	r0, [r7, #4]
 81072f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81072f2:	2300      	movs	r3, #0
 81072f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81072f6:	4b54      	ldr	r3, [pc, #336]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81072fa:	f003 0303 	and.w	r3, r3, #3
 81072fe:	2b03      	cmp	r3, #3
 8107300:	d101      	bne.n	8107306 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107302:	2301      	movs	r3, #1
 8107304:	e09b      	b.n	810743e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107306:	4b50      	ldr	r3, [pc, #320]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107308:	681b      	ldr	r3, [r3, #0]
 810730a:	4a4f      	ldr	r2, [pc, #316]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 810730c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107312:	f7fb fc5d 	bl	8102bd0 <HAL_GetTick>
 8107316:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107318:	e008      	b.n	810732c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810731a:	f7fb fc59 	bl	8102bd0 <HAL_GetTick>
 810731e:	4602      	mov	r2, r0
 8107320:	68bb      	ldr	r3, [r7, #8]
 8107322:	1ad3      	subs	r3, r2, r3
 8107324:	2b02      	cmp	r3, #2
 8107326:	d901      	bls.n	810732c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107328:	2303      	movs	r3, #3
 810732a:	e088      	b.n	810743e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810732c:	4b46      	ldr	r3, [pc, #280]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107334:	2b00      	cmp	r3, #0
 8107336:	d1f0      	bne.n	810731a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107338:	4b43      	ldr	r3, [pc, #268]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 810733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810733c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	051b      	lsls	r3, r3, #20
 8107346:	4940      	ldr	r1, [pc, #256]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107348:	4313      	orrs	r3, r2
 810734a:	628b      	str	r3, [r1, #40]	; 0x28
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	685b      	ldr	r3, [r3, #4]
 8107350:	3b01      	subs	r3, #1
 8107352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	689b      	ldr	r3, [r3, #8]
 810735a:	3b01      	subs	r3, #1
 810735c:	025b      	lsls	r3, r3, #9
 810735e:	b29b      	uxth	r3, r3
 8107360:	431a      	orrs	r2, r3
 8107362:	687b      	ldr	r3, [r7, #4]
 8107364:	68db      	ldr	r3, [r3, #12]
 8107366:	3b01      	subs	r3, #1
 8107368:	041b      	lsls	r3, r3, #16
 810736a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810736e:	431a      	orrs	r2, r3
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	691b      	ldr	r3, [r3, #16]
 8107374:	3b01      	subs	r3, #1
 8107376:	061b      	lsls	r3, r3, #24
 8107378:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810737c:	4932      	ldr	r1, [pc, #200]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 810737e:	4313      	orrs	r3, r2
 8107380:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107382:	4b31      	ldr	r3, [pc, #196]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107386:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810738a:	687b      	ldr	r3, [r7, #4]
 810738c:	695b      	ldr	r3, [r3, #20]
 810738e:	492e      	ldr	r1, [pc, #184]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107390:	4313      	orrs	r3, r2
 8107392:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107394:	4b2c      	ldr	r3, [pc, #176]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107398:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810739c:	687b      	ldr	r3, [r7, #4]
 810739e:	699b      	ldr	r3, [r3, #24]
 81073a0:	4929      	ldr	r1, [pc, #164]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073a2:	4313      	orrs	r3, r2
 81073a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81073a6:	4b28      	ldr	r3, [pc, #160]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073aa:	4a27      	ldr	r2, [pc, #156]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81073b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81073b2:	4b25      	ldr	r3, [pc, #148]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81073b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81073ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81073be:	687a      	ldr	r2, [r7, #4]
 81073c0:	69d2      	ldr	r2, [r2, #28]
 81073c2:	00d2      	lsls	r2, r2, #3
 81073c4:	4920      	ldr	r1, [pc, #128]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073c6:	4313      	orrs	r3, r2
 81073c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81073ca:	4b1f      	ldr	r3, [pc, #124]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073ce:	4a1e      	ldr	r2, [pc, #120]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81073d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81073d6:	683b      	ldr	r3, [r7, #0]
 81073d8:	2b00      	cmp	r3, #0
 81073da:	d106      	bne.n	81073ea <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81073dc:	4b1a      	ldr	r3, [pc, #104]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073e0:	4a19      	ldr	r2, [pc, #100]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81073e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81073e8:	e00f      	b.n	810740a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81073ea:	683b      	ldr	r3, [r7, #0]
 81073ec:	2b01      	cmp	r3, #1
 81073ee:	d106      	bne.n	81073fe <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81073f0:	4b15      	ldr	r3, [pc, #84]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073f4:	4a14      	ldr	r2, [pc, #80]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 81073f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81073fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81073fc:	e005      	b.n	810740a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81073fe:	4b12      	ldr	r3, [pc, #72]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107402:	4a11      	ldr	r2, [pc, #68]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810740a:	4b0f      	ldr	r3, [pc, #60]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	4a0e      	ldr	r2, [pc, #56]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107416:	f7fb fbdb 	bl	8102bd0 <HAL_GetTick>
 810741a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810741c:	e008      	b.n	8107430 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810741e:	f7fb fbd7 	bl	8102bd0 <HAL_GetTick>
 8107422:	4602      	mov	r2, r0
 8107424:	68bb      	ldr	r3, [r7, #8]
 8107426:	1ad3      	subs	r3, r2, r3
 8107428:	2b02      	cmp	r3, #2
 810742a:	d901      	bls.n	8107430 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810742c:	2303      	movs	r3, #3
 810742e:	e006      	b.n	810743e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107430:	4b05      	ldr	r3, [pc, #20]	; (8107448 <RCCEx_PLL3_Config+0x160>)
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107438:	2b00      	cmp	r3, #0
 810743a:	d0f0      	beq.n	810741e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810743c:	7bfb      	ldrb	r3, [r7, #15]
}
 810743e:	4618      	mov	r0, r3
 8107440:	3710      	adds	r7, #16
 8107442:	46bd      	mov	sp, r7
 8107444:	bd80      	pop	{r7, pc}
 8107446:	bf00      	nop
 8107448:	58024400 	.word	0x58024400

0810744c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810744c:	b580      	push	{r7, lr}
 810744e:	b082      	sub	sp, #8
 8107450:	af00      	add	r7, sp, #0
 8107452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107454:	687b      	ldr	r3, [r7, #4]
 8107456:	2b00      	cmp	r3, #0
 8107458:	d101      	bne.n	810745e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810745a:	2301      	movs	r3, #1
 810745c:	e049      	b.n	81074f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810745e:	687b      	ldr	r3, [r7, #4]
 8107460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107464:	b2db      	uxtb	r3, r3
 8107466:	2b00      	cmp	r3, #0
 8107468:	d106      	bne.n	8107478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810746a:	687b      	ldr	r3, [r7, #4]
 810746c:	2200      	movs	r2, #0
 810746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107472:	6878      	ldr	r0, [r7, #4]
 8107474:	f7fb f864 	bl	8102540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	2202      	movs	r2, #2
 810747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	681a      	ldr	r2, [r3, #0]
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	3304      	adds	r3, #4
 8107488:	4619      	mov	r1, r3
 810748a:	4610      	mov	r0, r2
 810748c:	f000 fc02 	bl	8107c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	2201      	movs	r2, #1
 8107494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107498:	687b      	ldr	r3, [r7, #4]
 810749a:	2201      	movs	r2, #1
 810749c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	2201      	movs	r2, #1
 81074a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	2201      	movs	r2, #1
 81074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	2201      	movs	r2, #1
 81074b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	2201      	movs	r2, #1
 81074bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	2201      	movs	r2, #1
 81074c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	2201      	movs	r2, #1
 81074cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81074d0:	687b      	ldr	r3, [r7, #4]
 81074d2:	2201      	movs	r2, #1
 81074d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81074d8:	687b      	ldr	r3, [r7, #4]
 81074da:	2201      	movs	r2, #1
 81074dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81074e0:	687b      	ldr	r3, [r7, #4]
 81074e2:	2201      	movs	r2, #1
 81074e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81074e8:	687b      	ldr	r3, [r7, #4]
 81074ea:	2201      	movs	r2, #1
 81074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81074f0:	2300      	movs	r3, #0
}
 81074f2:	4618      	mov	r0, r3
 81074f4:	3708      	adds	r7, #8
 81074f6:	46bd      	mov	sp, r7
 81074f8:	bd80      	pop	{r7, pc}

081074fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81074fa:	b580      	push	{r7, lr}
 81074fc:	b082      	sub	sp, #8
 81074fe:	af00      	add	r7, sp, #0
 8107500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	2b00      	cmp	r3, #0
 8107506:	d101      	bne.n	810750c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8107508:	2301      	movs	r3, #1
 810750a:	e049      	b.n	81075a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107512:	b2db      	uxtb	r3, r3
 8107514:	2b00      	cmp	r3, #0
 8107516:	d106      	bne.n	8107526 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107518:	687b      	ldr	r3, [r7, #4]
 810751a:	2200      	movs	r2, #0
 810751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8107520:	6878      	ldr	r0, [r7, #4]
 8107522:	f7fa ff49 	bl	81023b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107526:	687b      	ldr	r3, [r7, #4]
 8107528:	2202      	movs	r2, #2
 810752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810752e:	687b      	ldr	r3, [r7, #4]
 8107530:	681a      	ldr	r2, [r3, #0]
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	3304      	adds	r3, #4
 8107536:	4619      	mov	r1, r3
 8107538:	4610      	mov	r0, r2
 810753a:	f000 fbab 	bl	8107c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	2201      	movs	r2, #1
 8107542:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	2201      	movs	r2, #1
 810754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810754e:	687b      	ldr	r3, [r7, #4]
 8107550:	2201      	movs	r2, #1
 8107552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107556:	687b      	ldr	r3, [r7, #4]
 8107558:	2201      	movs	r2, #1
 810755a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810755e:	687b      	ldr	r3, [r7, #4]
 8107560:	2201      	movs	r2, #1
 8107562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	2201      	movs	r2, #1
 810756a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	2201      	movs	r2, #1
 8107572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107576:	687b      	ldr	r3, [r7, #4]
 8107578:	2201      	movs	r2, #1
 810757a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810757e:	687b      	ldr	r3, [r7, #4]
 8107580:	2201      	movs	r2, #1
 8107582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	2201      	movs	r2, #1
 810758a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	2201      	movs	r2, #1
 8107592:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	2201      	movs	r2, #1
 810759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810759e:	2300      	movs	r3, #0
}
 81075a0:	4618      	mov	r0, r3
 81075a2:	3708      	adds	r7, #8
 81075a4:	46bd      	mov	sp, r7
 81075a6:	bd80      	pop	{r7, pc}

081075a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81075a8:	b580      	push	{r7, lr}
 81075aa:	b084      	sub	sp, #16
 81075ac:	af00      	add	r7, sp, #0
 81075ae:	6078      	str	r0, [r7, #4]
 81075b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81075b2:	683b      	ldr	r3, [r7, #0]
 81075b4:	2b00      	cmp	r3, #0
 81075b6:	d109      	bne.n	81075cc <HAL_TIM_PWM_Start+0x24>
 81075b8:	687b      	ldr	r3, [r7, #4]
 81075ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81075be:	b2db      	uxtb	r3, r3
 81075c0:	2b01      	cmp	r3, #1
 81075c2:	bf14      	ite	ne
 81075c4:	2301      	movne	r3, #1
 81075c6:	2300      	moveq	r3, #0
 81075c8:	b2db      	uxtb	r3, r3
 81075ca:	e03c      	b.n	8107646 <HAL_TIM_PWM_Start+0x9e>
 81075cc:	683b      	ldr	r3, [r7, #0]
 81075ce:	2b04      	cmp	r3, #4
 81075d0:	d109      	bne.n	81075e6 <HAL_TIM_PWM_Start+0x3e>
 81075d2:	687b      	ldr	r3, [r7, #4]
 81075d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81075d8:	b2db      	uxtb	r3, r3
 81075da:	2b01      	cmp	r3, #1
 81075dc:	bf14      	ite	ne
 81075de:	2301      	movne	r3, #1
 81075e0:	2300      	moveq	r3, #0
 81075e2:	b2db      	uxtb	r3, r3
 81075e4:	e02f      	b.n	8107646 <HAL_TIM_PWM_Start+0x9e>
 81075e6:	683b      	ldr	r3, [r7, #0]
 81075e8:	2b08      	cmp	r3, #8
 81075ea:	d109      	bne.n	8107600 <HAL_TIM_PWM_Start+0x58>
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81075f2:	b2db      	uxtb	r3, r3
 81075f4:	2b01      	cmp	r3, #1
 81075f6:	bf14      	ite	ne
 81075f8:	2301      	movne	r3, #1
 81075fa:	2300      	moveq	r3, #0
 81075fc:	b2db      	uxtb	r3, r3
 81075fe:	e022      	b.n	8107646 <HAL_TIM_PWM_Start+0x9e>
 8107600:	683b      	ldr	r3, [r7, #0]
 8107602:	2b0c      	cmp	r3, #12
 8107604:	d109      	bne.n	810761a <HAL_TIM_PWM_Start+0x72>
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810760c:	b2db      	uxtb	r3, r3
 810760e:	2b01      	cmp	r3, #1
 8107610:	bf14      	ite	ne
 8107612:	2301      	movne	r3, #1
 8107614:	2300      	moveq	r3, #0
 8107616:	b2db      	uxtb	r3, r3
 8107618:	e015      	b.n	8107646 <HAL_TIM_PWM_Start+0x9e>
 810761a:	683b      	ldr	r3, [r7, #0]
 810761c:	2b10      	cmp	r3, #16
 810761e:	d109      	bne.n	8107634 <HAL_TIM_PWM_Start+0x8c>
 8107620:	687b      	ldr	r3, [r7, #4]
 8107622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8107626:	b2db      	uxtb	r3, r3
 8107628:	2b01      	cmp	r3, #1
 810762a:	bf14      	ite	ne
 810762c:	2301      	movne	r3, #1
 810762e:	2300      	moveq	r3, #0
 8107630:	b2db      	uxtb	r3, r3
 8107632:	e008      	b.n	8107646 <HAL_TIM_PWM_Start+0x9e>
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 810763a:	b2db      	uxtb	r3, r3
 810763c:	2b01      	cmp	r3, #1
 810763e:	bf14      	ite	ne
 8107640:	2301      	movne	r3, #1
 8107642:	2300      	moveq	r3, #0
 8107644:	b2db      	uxtb	r3, r3
 8107646:	2b00      	cmp	r3, #0
 8107648:	d001      	beq.n	810764e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810764a:	2301      	movs	r3, #1
 810764c:	e0a1      	b.n	8107792 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810764e:	683b      	ldr	r3, [r7, #0]
 8107650:	2b00      	cmp	r3, #0
 8107652:	d104      	bne.n	810765e <HAL_TIM_PWM_Start+0xb6>
 8107654:	687b      	ldr	r3, [r7, #4]
 8107656:	2202      	movs	r2, #2
 8107658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810765c:	e023      	b.n	81076a6 <HAL_TIM_PWM_Start+0xfe>
 810765e:	683b      	ldr	r3, [r7, #0]
 8107660:	2b04      	cmp	r3, #4
 8107662:	d104      	bne.n	810766e <HAL_TIM_PWM_Start+0xc6>
 8107664:	687b      	ldr	r3, [r7, #4]
 8107666:	2202      	movs	r2, #2
 8107668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810766c:	e01b      	b.n	81076a6 <HAL_TIM_PWM_Start+0xfe>
 810766e:	683b      	ldr	r3, [r7, #0]
 8107670:	2b08      	cmp	r3, #8
 8107672:	d104      	bne.n	810767e <HAL_TIM_PWM_Start+0xd6>
 8107674:	687b      	ldr	r3, [r7, #4]
 8107676:	2202      	movs	r2, #2
 8107678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810767c:	e013      	b.n	81076a6 <HAL_TIM_PWM_Start+0xfe>
 810767e:	683b      	ldr	r3, [r7, #0]
 8107680:	2b0c      	cmp	r3, #12
 8107682:	d104      	bne.n	810768e <HAL_TIM_PWM_Start+0xe6>
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	2202      	movs	r2, #2
 8107688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810768c:	e00b      	b.n	81076a6 <HAL_TIM_PWM_Start+0xfe>
 810768e:	683b      	ldr	r3, [r7, #0]
 8107690:	2b10      	cmp	r3, #16
 8107692:	d104      	bne.n	810769e <HAL_TIM_PWM_Start+0xf6>
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	2202      	movs	r2, #2
 8107698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810769c:	e003      	b.n	81076a6 <HAL_TIM_PWM_Start+0xfe>
 810769e:	687b      	ldr	r3, [r7, #4]
 81076a0:	2202      	movs	r2, #2
 81076a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	681b      	ldr	r3, [r3, #0]
 81076aa:	2201      	movs	r2, #1
 81076ac:	6839      	ldr	r1, [r7, #0]
 81076ae:	4618      	mov	r0, r3
 81076b0:	f000 fe60 	bl	8108374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81076b4:	687b      	ldr	r3, [r7, #4]
 81076b6:	681b      	ldr	r3, [r3, #0]
 81076b8:	4a38      	ldr	r2, [pc, #224]	; (810779c <HAL_TIM_PWM_Start+0x1f4>)
 81076ba:	4293      	cmp	r3, r2
 81076bc:	d013      	beq.n	81076e6 <HAL_TIM_PWM_Start+0x13e>
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	4a37      	ldr	r2, [pc, #220]	; (81077a0 <HAL_TIM_PWM_Start+0x1f8>)
 81076c4:	4293      	cmp	r3, r2
 81076c6:	d00e      	beq.n	81076e6 <HAL_TIM_PWM_Start+0x13e>
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	681b      	ldr	r3, [r3, #0]
 81076cc:	4a35      	ldr	r2, [pc, #212]	; (81077a4 <HAL_TIM_PWM_Start+0x1fc>)
 81076ce:	4293      	cmp	r3, r2
 81076d0:	d009      	beq.n	81076e6 <HAL_TIM_PWM_Start+0x13e>
 81076d2:	687b      	ldr	r3, [r7, #4]
 81076d4:	681b      	ldr	r3, [r3, #0]
 81076d6:	4a34      	ldr	r2, [pc, #208]	; (81077a8 <HAL_TIM_PWM_Start+0x200>)
 81076d8:	4293      	cmp	r3, r2
 81076da:	d004      	beq.n	81076e6 <HAL_TIM_PWM_Start+0x13e>
 81076dc:	687b      	ldr	r3, [r7, #4]
 81076de:	681b      	ldr	r3, [r3, #0]
 81076e0:	4a32      	ldr	r2, [pc, #200]	; (81077ac <HAL_TIM_PWM_Start+0x204>)
 81076e2:	4293      	cmp	r3, r2
 81076e4:	d101      	bne.n	81076ea <HAL_TIM_PWM_Start+0x142>
 81076e6:	2301      	movs	r3, #1
 81076e8:	e000      	b.n	81076ec <HAL_TIM_PWM_Start+0x144>
 81076ea:	2300      	movs	r3, #0
 81076ec:	2b00      	cmp	r3, #0
 81076ee:	d007      	beq.n	8107700 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	681b      	ldr	r3, [r3, #0]
 81076f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81076f6:	687b      	ldr	r3, [r7, #4]
 81076f8:	681b      	ldr	r3, [r3, #0]
 81076fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81076fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	681b      	ldr	r3, [r3, #0]
 8107704:	4a25      	ldr	r2, [pc, #148]	; (810779c <HAL_TIM_PWM_Start+0x1f4>)
 8107706:	4293      	cmp	r3, r2
 8107708:	d022      	beq.n	8107750 <HAL_TIM_PWM_Start+0x1a8>
 810770a:	687b      	ldr	r3, [r7, #4]
 810770c:	681b      	ldr	r3, [r3, #0]
 810770e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107712:	d01d      	beq.n	8107750 <HAL_TIM_PWM_Start+0x1a8>
 8107714:	687b      	ldr	r3, [r7, #4]
 8107716:	681b      	ldr	r3, [r3, #0]
 8107718:	4a25      	ldr	r2, [pc, #148]	; (81077b0 <HAL_TIM_PWM_Start+0x208>)
 810771a:	4293      	cmp	r3, r2
 810771c:	d018      	beq.n	8107750 <HAL_TIM_PWM_Start+0x1a8>
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	681b      	ldr	r3, [r3, #0]
 8107722:	4a24      	ldr	r2, [pc, #144]	; (81077b4 <HAL_TIM_PWM_Start+0x20c>)
 8107724:	4293      	cmp	r3, r2
 8107726:	d013      	beq.n	8107750 <HAL_TIM_PWM_Start+0x1a8>
 8107728:	687b      	ldr	r3, [r7, #4]
 810772a:	681b      	ldr	r3, [r3, #0]
 810772c:	4a22      	ldr	r2, [pc, #136]	; (81077b8 <HAL_TIM_PWM_Start+0x210>)
 810772e:	4293      	cmp	r3, r2
 8107730:	d00e      	beq.n	8107750 <HAL_TIM_PWM_Start+0x1a8>
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	681b      	ldr	r3, [r3, #0]
 8107736:	4a1a      	ldr	r2, [pc, #104]	; (81077a0 <HAL_TIM_PWM_Start+0x1f8>)
 8107738:	4293      	cmp	r3, r2
 810773a:	d009      	beq.n	8107750 <HAL_TIM_PWM_Start+0x1a8>
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	681b      	ldr	r3, [r3, #0]
 8107740:	4a1e      	ldr	r2, [pc, #120]	; (81077bc <HAL_TIM_PWM_Start+0x214>)
 8107742:	4293      	cmp	r3, r2
 8107744:	d004      	beq.n	8107750 <HAL_TIM_PWM_Start+0x1a8>
 8107746:	687b      	ldr	r3, [r7, #4]
 8107748:	681b      	ldr	r3, [r3, #0]
 810774a:	4a16      	ldr	r2, [pc, #88]	; (81077a4 <HAL_TIM_PWM_Start+0x1fc>)
 810774c:	4293      	cmp	r3, r2
 810774e:	d115      	bne.n	810777c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107750:	687b      	ldr	r3, [r7, #4]
 8107752:	681b      	ldr	r3, [r3, #0]
 8107754:	689a      	ldr	r2, [r3, #8]
 8107756:	4b1a      	ldr	r3, [pc, #104]	; (81077c0 <HAL_TIM_PWM_Start+0x218>)
 8107758:	4013      	ands	r3, r2
 810775a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810775c:	68fb      	ldr	r3, [r7, #12]
 810775e:	2b06      	cmp	r3, #6
 8107760:	d015      	beq.n	810778e <HAL_TIM_PWM_Start+0x1e6>
 8107762:	68fb      	ldr	r3, [r7, #12]
 8107764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107768:	d011      	beq.n	810778e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	681b      	ldr	r3, [r3, #0]
 810776e:	681a      	ldr	r2, [r3, #0]
 8107770:	687b      	ldr	r3, [r7, #4]
 8107772:	681b      	ldr	r3, [r3, #0]
 8107774:	f042 0201 	orr.w	r2, r2, #1
 8107778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810777a:	e008      	b.n	810778e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810777c:	687b      	ldr	r3, [r7, #4]
 810777e:	681b      	ldr	r3, [r3, #0]
 8107780:	681a      	ldr	r2, [r3, #0]
 8107782:	687b      	ldr	r3, [r7, #4]
 8107784:	681b      	ldr	r3, [r3, #0]
 8107786:	f042 0201 	orr.w	r2, r2, #1
 810778a:	601a      	str	r2, [r3, #0]
 810778c:	e000      	b.n	8107790 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810778e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107790:	2300      	movs	r3, #0
}
 8107792:	4618      	mov	r0, r3
 8107794:	3710      	adds	r7, #16
 8107796:	46bd      	mov	sp, r7
 8107798:	bd80      	pop	{r7, pc}
 810779a:	bf00      	nop
 810779c:	40010000 	.word	0x40010000
 81077a0:	40010400 	.word	0x40010400
 81077a4:	40014000 	.word	0x40014000
 81077a8:	40014400 	.word	0x40014400
 81077ac:	40014800 	.word	0x40014800
 81077b0:	40000400 	.word	0x40000400
 81077b4:	40000800 	.word	0x40000800
 81077b8:	40000c00 	.word	0x40000c00
 81077bc:	40001800 	.word	0x40001800
 81077c0:	00010007 	.word	0x00010007

081077c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81077c4:	b580      	push	{r7, lr}
 81077c6:	b086      	sub	sp, #24
 81077c8:	af00      	add	r7, sp, #0
 81077ca:	6078      	str	r0, [r7, #4]
 81077cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 81077ce:	687b      	ldr	r3, [r7, #4]
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	d101      	bne.n	81077d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 81077d4:	2301      	movs	r3, #1
 81077d6:	e097      	b.n	8107908 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81077de:	b2db      	uxtb	r3, r3
 81077e0:	2b00      	cmp	r3, #0
 81077e2:	d106      	bne.n	81077f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	2200      	movs	r2, #0
 81077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 81077ec:	6878      	ldr	r0, [r7, #4]
 81077ee:	f7fa fe03 	bl	81023f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	2202      	movs	r2, #2
 81077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	681b      	ldr	r3, [r3, #0]
 81077fe:	689b      	ldr	r3, [r3, #8]
 8107800:	687a      	ldr	r2, [r7, #4]
 8107802:	6812      	ldr	r2, [r2, #0]
 8107804:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8107808:	f023 0307 	bic.w	r3, r3, #7
 810780c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810780e:	687b      	ldr	r3, [r7, #4]
 8107810:	681a      	ldr	r2, [r3, #0]
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	3304      	adds	r3, #4
 8107816:	4619      	mov	r1, r3
 8107818:	4610      	mov	r0, r2
 810781a:	f000 fa3b 	bl	8107c94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	681b      	ldr	r3, [r3, #0]
 8107822:	689b      	ldr	r3, [r3, #8]
 8107824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	681b      	ldr	r3, [r3, #0]
 810782a:	699b      	ldr	r3, [r3, #24]
 810782c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810782e:	687b      	ldr	r3, [r7, #4]
 8107830:	681b      	ldr	r3, [r3, #0]
 8107832:	6a1b      	ldr	r3, [r3, #32]
 8107834:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8107836:	683b      	ldr	r3, [r7, #0]
 8107838:	681b      	ldr	r3, [r3, #0]
 810783a:	697a      	ldr	r2, [r7, #20]
 810783c:	4313      	orrs	r3, r2
 810783e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8107840:	693b      	ldr	r3, [r7, #16]
 8107842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107846:	f023 0303 	bic.w	r3, r3, #3
 810784a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810784c:	683b      	ldr	r3, [r7, #0]
 810784e:	689a      	ldr	r2, [r3, #8]
 8107850:	683b      	ldr	r3, [r7, #0]
 8107852:	699b      	ldr	r3, [r3, #24]
 8107854:	021b      	lsls	r3, r3, #8
 8107856:	4313      	orrs	r3, r2
 8107858:	693a      	ldr	r2, [r7, #16]
 810785a:	4313      	orrs	r3, r2
 810785c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810785e:	693b      	ldr	r3, [r7, #16]
 8107860:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8107864:	f023 030c 	bic.w	r3, r3, #12
 8107868:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810786a:	693b      	ldr	r3, [r7, #16]
 810786c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8107876:	683b      	ldr	r3, [r7, #0]
 8107878:	68da      	ldr	r2, [r3, #12]
 810787a:	683b      	ldr	r3, [r7, #0]
 810787c:	69db      	ldr	r3, [r3, #28]
 810787e:	021b      	lsls	r3, r3, #8
 8107880:	4313      	orrs	r3, r2
 8107882:	693a      	ldr	r2, [r7, #16]
 8107884:	4313      	orrs	r3, r2
 8107886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8107888:	683b      	ldr	r3, [r7, #0]
 810788a:	691b      	ldr	r3, [r3, #16]
 810788c:	011a      	lsls	r2, r3, #4
 810788e:	683b      	ldr	r3, [r7, #0]
 8107890:	6a1b      	ldr	r3, [r3, #32]
 8107892:	031b      	lsls	r3, r3, #12
 8107894:	4313      	orrs	r3, r2
 8107896:	693a      	ldr	r2, [r7, #16]
 8107898:	4313      	orrs	r3, r2
 810789a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 810789c:	68fb      	ldr	r3, [r7, #12]
 810789e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81078a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81078a4:	68fb      	ldr	r3, [r7, #12]
 81078a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81078aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81078ac:	683b      	ldr	r3, [r7, #0]
 81078ae:	685a      	ldr	r2, [r3, #4]
 81078b0:	683b      	ldr	r3, [r7, #0]
 81078b2:	695b      	ldr	r3, [r3, #20]
 81078b4:	011b      	lsls	r3, r3, #4
 81078b6:	4313      	orrs	r3, r2
 81078b8:	68fa      	ldr	r2, [r7, #12]
 81078ba:	4313      	orrs	r3, r2
 81078bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	681b      	ldr	r3, [r3, #0]
 81078c2:	697a      	ldr	r2, [r7, #20]
 81078c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	693a      	ldr	r2, [r7, #16]
 81078cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	681b      	ldr	r3, [r3, #0]
 81078d2:	68fa      	ldr	r2, [r7, #12]
 81078d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81078d6:	687b      	ldr	r3, [r7, #4]
 81078d8:	2201      	movs	r2, #1
 81078da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	2201      	movs	r2, #1
 81078e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	2201      	movs	r2, #1
 81078ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	2201      	movs	r2, #1
 81078f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	2201      	movs	r2, #1
 81078fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81078fe:	687b      	ldr	r3, [r7, #4]
 8107900:	2201      	movs	r2, #1
 8107902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107906:	2300      	movs	r3, #0
}
 8107908:	4618      	mov	r0, r3
 810790a:	3718      	adds	r7, #24
 810790c:	46bd      	mov	sp, r7
 810790e:	bd80      	pop	{r7, pc}

08107910 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107910:	b580      	push	{r7, lr}
 8107912:	b084      	sub	sp, #16
 8107914:	af00      	add	r7, sp, #0
 8107916:	6078      	str	r0, [r7, #4]
 8107918:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 810791a:	687b      	ldr	r3, [r7, #4]
 810791c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8107920:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8107922:	687b      	ldr	r3, [r7, #4]
 8107924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8107928:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8107930:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107938:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 810793a:	683b      	ldr	r3, [r7, #0]
 810793c:	2b00      	cmp	r3, #0
 810793e:	d110      	bne.n	8107962 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8107940:	7bfb      	ldrb	r3, [r7, #15]
 8107942:	2b01      	cmp	r3, #1
 8107944:	d102      	bne.n	810794c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8107946:	7b7b      	ldrb	r3, [r7, #13]
 8107948:	2b01      	cmp	r3, #1
 810794a:	d001      	beq.n	8107950 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 810794c:	2301      	movs	r3, #1
 810794e:	e089      	b.n	8107a64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	2202      	movs	r2, #2
 8107954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	2202      	movs	r2, #2
 810795c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107960:	e031      	b.n	81079c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8107962:	683b      	ldr	r3, [r7, #0]
 8107964:	2b04      	cmp	r3, #4
 8107966:	d110      	bne.n	810798a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8107968:	7bbb      	ldrb	r3, [r7, #14]
 810796a:	2b01      	cmp	r3, #1
 810796c:	d102      	bne.n	8107974 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 810796e:	7b3b      	ldrb	r3, [r7, #12]
 8107970:	2b01      	cmp	r3, #1
 8107972:	d001      	beq.n	8107978 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8107974:	2301      	movs	r3, #1
 8107976:	e075      	b.n	8107a64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	2202      	movs	r2, #2
 810797c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8107980:	687b      	ldr	r3, [r7, #4]
 8107982:	2202      	movs	r2, #2
 8107984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107988:	e01d      	b.n	81079c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810798a:	7bfb      	ldrb	r3, [r7, #15]
 810798c:	2b01      	cmp	r3, #1
 810798e:	d108      	bne.n	81079a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8107990:	7bbb      	ldrb	r3, [r7, #14]
 8107992:	2b01      	cmp	r3, #1
 8107994:	d105      	bne.n	81079a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8107996:	7b7b      	ldrb	r3, [r7, #13]
 8107998:	2b01      	cmp	r3, #1
 810799a:	d102      	bne.n	81079a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 810799c:	7b3b      	ldrb	r3, [r7, #12]
 810799e:	2b01      	cmp	r3, #1
 81079a0:	d001      	beq.n	81079a6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 81079a2:	2301      	movs	r3, #1
 81079a4:	e05e      	b.n	8107a64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	2202      	movs	r2, #2
 81079aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	2202      	movs	r2, #2
 81079b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81079b6:	687b      	ldr	r3, [r7, #4]
 81079b8:	2202      	movs	r2, #2
 81079ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81079be:	687b      	ldr	r3, [r7, #4]
 81079c0:	2202      	movs	r2, #2
 81079c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 81079c6:	683b      	ldr	r3, [r7, #0]
 81079c8:	2b00      	cmp	r3, #0
 81079ca:	d003      	beq.n	81079d4 <HAL_TIM_Encoder_Start_IT+0xc4>
 81079cc:	683b      	ldr	r3, [r7, #0]
 81079ce:	2b04      	cmp	r3, #4
 81079d0:	d010      	beq.n	81079f4 <HAL_TIM_Encoder_Start_IT+0xe4>
 81079d2:	e01f      	b.n	8107a14 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 81079d4:	687b      	ldr	r3, [r7, #4]
 81079d6:	681b      	ldr	r3, [r3, #0]
 81079d8:	2201      	movs	r2, #1
 81079da:	2100      	movs	r1, #0
 81079dc:	4618      	mov	r0, r3
 81079de:	f000 fcc9 	bl	8108374 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 81079e2:	687b      	ldr	r3, [r7, #4]
 81079e4:	681b      	ldr	r3, [r3, #0]
 81079e6:	68da      	ldr	r2, [r3, #12]
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	681b      	ldr	r3, [r3, #0]
 81079ec:	f042 0202 	orr.w	r2, r2, #2
 81079f0:	60da      	str	r2, [r3, #12]
      break;
 81079f2:	e02e      	b.n	8107a52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81079f4:	687b      	ldr	r3, [r7, #4]
 81079f6:	681b      	ldr	r3, [r3, #0]
 81079f8:	2201      	movs	r2, #1
 81079fa:	2104      	movs	r1, #4
 81079fc:	4618      	mov	r0, r3
 81079fe:	f000 fcb9 	bl	8108374 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	68da      	ldr	r2, [r3, #12]
 8107a08:	687b      	ldr	r3, [r7, #4]
 8107a0a:	681b      	ldr	r3, [r3, #0]
 8107a0c:	f042 0204 	orr.w	r2, r2, #4
 8107a10:	60da      	str	r2, [r3, #12]
      break;
 8107a12:	e01e      	b.n	8107a52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	681b      	ldr	r3, [r3, #0]
 8107a18:	2201      	movs	r2, #1
 8107a1a:	2100      	movs	r1, #0
 8107a1c:	4618      	mov	r0, r3
 8107a1e:	f000 fca9 	bl	8108374 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	681b      	ldr	r3, [r3, #0]
 8107a26:	2201      	movs	r2, #1
 8107a28:	2104      	movs	r1, #4
 8107a2a:	4618      	mov	r0, r3
 8107a2c:	f000 fca2 	bl	8108374 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	68da      	ldr	r2, [r3, #12]
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	681b      	ldr	r3, [r3, #0]
 8107a3a:	f042 0202 	orr.w	r2, r2, #2
 8107a3e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	681b      	ldr	r3, [r3, #0]
 8107a44:	68da      	ldr	r2, [r3, #12]
 8107a46:	687b      	ldr	r3, [r7, #4]
 8107a48:	681b      	ldr	r3, [r3, #0]
 8107a4a:	f042 0204 	orr.w	r2, r2, #4
 8107a4e:	60da      	str	r2, [r3, #12]
      break;
 8107a50:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8107a52:	687b      	ldr	r3, [r7, #4]
 8107a54:	681b      	ldr	r3, [r3, #0]
 8107a56:	681a      	ldr	r2, [r3, #0]
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	681b      	ldr	r3, [r3, #0]
 8107a5c:	f042 0201 	orr.w	r2, r2, #1
 8107a60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8107a62:	2300      	movs	r3, #0
}
 8107a64:	4618      	mov	r0, r3
 8107a66:	3710      	adds	r7, #16
 8107a68:	46bd      	mov	sp, r7
 8107a6a:	bd80      	pop	{r7, pc}

08107a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107a6c:	b580      	push	{r7, lr}
 8107a6e:	b086      	sub	sp, #24
 8107a70:	af00      	add	r7, sp, #0
 8107a72:	60f8      	str	r0, [r7, #12]
 8107a74:	60b9      	str	r1, [r7, #8]
 8107a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107a78:	2300      	movs	r3, #0
 8107a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107a7c:	68fb      	ldr	r3, [r7, #12]
 8107a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107a82:	2b01      	cmp	r3, #1
 8107a84:	d101      	bne.n	8107a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8107a86:	2302      	movs	r3, #2
 8107a88:	e0ff      	b.n	8107c8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8107a8a:	68fb      	ldr	r3, [r7, #12]
 8107a8c:	2201      	movs	r2, #1
 8107a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	2b14      	cmp	r3, #20
 8107a96:	f200 80f0 	bhi.w	8107c7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8107a9a:	a201      	add	r2, pc, #4	; (adr r2, 8107aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107aa0:	08107af5 	.word	0x08107af5
 8107aa4:	08107c7b 	.word	0x08107c7b
 8107aa8:	08107c7b 	.word	0x08107c7b
 8107aac:	08107c7b 	.word	0x08107c7b
 8107ab0:	08107b35 	.word	0x08107b35
 8107ab4:	08107c7b 	.word	0x08107c7b
 8107ab8:	08107c7b 	.word	0x08107c7b
 8107abc:	08107c7b 	.word	0x08107c7b
 8107ac0:	08107b77 	.word	0x08107b77
 8107ac4:	08107c7b 	.word	0x08107c7b
 8107ac8:	08107c7b 	.word	0x08107c7b
 8107acc:	08107c7b 	.word	0x08107c7b
 8107ad0:	08107bb7 	.word	0x08107bb7
 8107ad4:	08107c7b 	.word	0x08107c7b
 8107ad8:	08107c7b 	.word	0x08107c7b
 8107adc:	08107c7b 	.word	0x08107c7b
 8107ae0:	08107bf9 	.word	0x08107bf9
 8107ae4:	08107c7b 	.word	0x08107c7b
 8107ae8:	08107c7b 	.word	0x08107c7b
 8107aec:	08107c7b 	.word	0x08107c7b
 8107af0:	08107c39 	.word	0x08107c39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107af4:	68fb      	ldr	r3, [r7, #12]
 8107af6:	681b      	ldr	r3, [r3, #0]
 8107af8:	68b9      	ldr	r1, [r7, #8]
 8107afa:	4618      	mov	r0, r3
 8107afc:	f000 f964 	bl	8107dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107b00:	68fb      	ldr	r3, [r7, #12]
 8107b02:	681b      	ldr	r3, [r3, #0]
 8107b04:	699a      	ldr	r2, [r3, #24]
 8107b06:	68fb      	ldr	r3, [r7, #12]
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	f042 0208 	orr.w	r2, r2, #8
 8107b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107b10:	68fb      	ldr	r3, [r7, #12]
 8107b12:	681b      	ldr	r3, [r3, #0]
 8107b14:	699a      	ldr	r2, [r3, #24]
 8107b16:	68fb      	ldr	r3, [r7, #12]
 8107b18:	681b      	ldr	r3, [r3, #0]
 8107b1a:	f022 0204 	bic.w	r2, r2, #4
 8107b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107b20:	68fb      	ldr	r3, [r7, #12]
 8107b22:	681b      	ldr	r3, [r3, #0]
 8107b24:	6999      	ldr	r1, [r3, #24]
 8107b26:	68bb      	ldr	r3, [r7, #8]
 8107b28:	691a      	ldr	r2, [r3, #16]
 8107b2a:	68fb      	ldr	r3, [r7, #12]
 8107b2c:	681b      	ldr	r3, [r3, #0]
 8107b2e:	430a      	orrs	r2, r1
 8107b30:	619a      	str	r2, [r3, #24]
      break;
 8107b32:	e0a5      	b.n	8107c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107b34:	68fb      	ldr	r3, [r7, #12]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	68b9      	ldr	r1, [r7, #8]
 8107b3a:	4618      	mov	r0, r3
 8107b3c:	f000 f9d4 	bl	8107ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107b40:	68fb      	ldr	r3, [r7, #12]
 8107b42:	681b      	ldr	r3, [r3, #0]
 8107b44:	699a      	ldr	r2, [r3, #24]
 8107b46:	68fb      	ldr	r3, [r7, #12]
 8107b48:	681b      	ldr	r3, [r3, #0]
 8107b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107b50:	68fb      	ldr	r3, [r7, #12]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	699a      	ldr	r2, [r3, #24]
 8107b56:	68fb      	ldr	r3, [r7, #12]
 8107b58:	681b      	ldr	r3, [r3, #0]
 8107b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107b60:	68fb      	ldr	r3, [r7, #12]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	6999      	ldr	r1, [r3, #24]
 8107b66:	68bb      	ldr	r3, [r7, #8]
 8107b68:	691b      	ldr	r3, [r3, #16]
 8107b6a:	021a      	lsls	r2, r3, #8
 8107b6c:	68fb      	ldr	r3, [r7, #12]
 8107b6e:	681b      	ldr	r3, [r3, #0]
 8107b70:	430a      	orrs	r2, r1
 8107b72:	619a      	str	r2, [r3, #24]
      break;
 8107b74:	e084      	b.n	8107c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8107b76:	68fb      	ldr	r3, [r7, #12]
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	68b9      	ldr	r1, [r7, #8]
 8107b7c:	4618      	mov	r0, r3
 8107b7e:	f000 fa3d 	bl	8107ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8107b82:	68fb      	ldr	r3, [r7, #12]
 8107b84:	681b      	ldr	r3, [r3, #0]
 8107b86:	69da      	ldr	r2, [r3, #28]
 8107b88:	68fb      	ldr	r3, [r7, #12]
 8107b8a:	681b      	ldr	r3, [r3, #0]
 8107b8c:	f042 0208 	orr.w	r2, r2, #8
 8107b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8107b92:	68fb      	ldr	r3, [r7, #12]
 8107b94:	681b      	ldr	r3, [r3, #0]
 8107b96:	69da      	ldr	r2, [r3, #28]
 8107b98:	68fb      	ldr	r3, [r7, #12]
 8107b9a:	681b      	ldr	r3, [r3, #0]
 8107b9c:	f022 0204 	bic.w	r2, r2, #4
 8107ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8107ba2:	68fb      	ldr	r3, [r7, #12]
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	69d9      	ldr	r1, [r3, #28]
 8107ba8:	68bb      	ldr	r3, [r7, #8]
 8107baa:	691a      	ldr	r2, [r3, #16]
 8107bac:	68fb      	ldr	r3, [r7, #12]
 8107bae:	681b      	ldr	r3, [r3, #0]
 8107bb0:	430a      	orrs	r2, r1
 8107bb2:	61da      	str	r2, [r3, #28]
      break;
 8107bb4:	e064      	b.n	8107c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8107bb6:	68fb      	ldr	r3, [r7, #12]
 8107bb8:	681b      	ldr	r3, [r3, #0]
 8107bba:	68b9      	ldr	r1, [r7, #8]
 8107bbc:	4618      	mov	r0, r3
 8107bbe:	f000 faa5 	bl	810810c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8107bc2:	68fb      	ldr	r3, [r7, #12]
 8107bc4:	681b      	ldr	r3, [r3, #0]
 8107bc6:	69da      	ldr	r2, [r3, #28]
 8107bc8:	68fb      	ldr	r3, [r7, #12]
 8107bca:	681b      	ldr	r3, [r3, #0]
 8107bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8107bd2:	68fb      	ldr	r3, [r7, #12]
 8107bd4:	681b      	ldr	r3, [r3, #0]
 8107bd6:	69da      	ldr	r2, [r3, #28]
 8107bd8:	68fb      	ldr	r3, [r7, #12]
 8107bda:	681b      	ldr	r3, [r3, #0]
 8107bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8107be2:	68fb      	ldr	r3, [r7, #12]
 8107be4:	681b      	ldr	r3, [r3, #0]
 8107be6:	69d9      	ldr	r1, [r3, #28]
 8107be8:	68bb      	ldr	r3, [r7, #8]
 8107bea:	691b      	ldr	r3, [r3, #16]
 8107bec:	021a      	lsls	r2, r3, #8
 8107bee:	68fb      	ldr	r3, [r7, #12]
 8107bf0:	681b      	ldr	r3, [r3, #0]
 8107bf2:	430a      	orrs	r2, r1
 8107bf4:	61da      	str	r2, [r3, #28]
      break;
 8107bf6:	e043      	b.n	8107c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8107bf8:	68fb      	ldr	r3, [r7, #12]
 8107bfa:	681b      	ldr	r3, [r3, #0]
 8107bfc:	68b9      	ldr	r1, [r7, #8]
 8107bfe:	4618      	mov	r0, r3
 8107c00:	f000 faee 	bl	81081e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107c04:	68fb      	ldr	r3, [r7, #12]
 8107c06:	681b      	ldr	r3, [r3, #0]
 8107c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107c0a:	68fb      	ldr	r3, [r7, #12]
 8107c0c:	681b      	ldr	r3, [r3, #0]
 8107c0e:	f042 0208 	orr.w	r2, r2, #8
 8107c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107c14:	68fb      	ldr	r3, [r7, #12]
 8107c16:	681b      	ldr	r3, [r3, #0]
 8107c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107c1a:	68fb      	ldr	r3, [r7, #12]
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	f022 0204 	bic.w	r2, r2, #4
 8107c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107c24:	68fb      	ldr	r3, [r7, #12]
 8107c26:	681b      	ldr	r3, [r3, #0]
 8107c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107c2a:	68bb      	ldr	r3, [r7, #8]
 8107c2c:	691a      	ldr	r2, [r3, #16]
 8107c2e:	68fb      	ldr	r3, [r7, #12]
 8107c30:	681b      	ldr	r3, [r3, #0]
 8107c32:	430a      	orrs	r2, r1
 8107c34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107c36:	e023      	b.n	8107c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8107c38:	68fb      	ldr	r3, [r7, #12]
 8107c3a:	681b      	ldr	r3, [r3, #0]
 8107c3c:	68b9      	ldr	r1, [r7, #8]
 8107c3e:	4618      	mov	r0, r3
 8107c40:	f000 fb32 	bl	81082a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107c44:	68fb      	ldr	r3, [r7, #12]
 8107c46:	681b      	ldr	r3, [r3, #0]
 8107c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107c4a:	68fb      	ldr	r3, [r7, #12]
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107c54:	68fb      	ldr	r3, [r7, #12]
 8107c56:	681b      	ldr	r3, [r3, #0]
 8107c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107c5a:	68fb      	ldr	r3, [r7, #12]
 8107c5c:	681b      	ldr	r3, [r3, #0]
 8107c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107c64:	68fb      	ldr	r3, [r7, #12]
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107c6a:	68bb      	ldr	r3, [r7, #8]
 8107c6c:	691b      	ldr	r3, [r3, #16]
 8107c6e:	021a      	lsls	r2, r3, #8
 8107c70:	68fb      	ldr	r3, [r7, #12]
 8107c72:	681b      	ldr	r3, [r3, #0]
 8107c74:	430a      	orrs	r2, r1
 8107c76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107c78:	e002      	b.n	8107c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8107c7a:	2301      	movs	r3, #1
 8107c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8107c7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107c80:	68fb      	ldr	r3, [r7, #12]
 8107c82:	2200      	movs	r2, #0
 8107c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8107c8a:	4618      	mov	r0, r3
 8107c8c:	3718      	adds	r7, #24
 8107c8e:	46bd      	mov	sp, r7
 8107c90:	bd80      	pop	{r7, pc}
 8107c92:	bf00      	nop

08107c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107c94:	b480      	push	{r7}
 8107c96:	b085      	sub	sp, #20
 8107c98:	af00      	add	r7, sp, #0
 8107c9a:	6078      	str	r0, [r7, #4]
 8107c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107c9e:	687b      	ldr	r3, [r7, #4]
 8107ca0:	681b      	ldr	r3, [r3, #0]
 8107ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	4a40      	ldr	r2, [pc, #256]	; (8107da8 <TIM_Base_SetConfig+0x114>)
 8107ca8:	4293      	cmp	r3, r2
 8107caa:	d013      	beq.n	8107cd4 <TIM_Base_SetConfig+0x40>
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107cb2:	d00f      	beq.n	8107cd4 <TIM_Base_SetConfig+0x40>
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	4a3d      	ldr	r2, [pc, #244]	; (8107dac <TIM_Base_SetConfig+0x118>)
 8107cb8:	4293      	cmp	r3, r2
 8107cba:	d00b      	beq.n	8107cd4 <TIM_Base_SetConfig+0x40>
 8107cbc:	687b      	ldr	r3, [r7, #4]
 8107cbe:	4a3c      	ldr	r2, [pc, #240]	; (8107db0 <TIM_Base_SetConfig+0x11c>)
 8107cc0:	4293      	cmp	r3, r2
 8107cc2:	d007      	beq.n	8107cd4 <TIM_Base_SetConfig+0x40>
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	4a3b      	ldr	r2, [pc, #236]	; (8107db4 <TIM_Base_SetConfig+0x120>)
 8107cc8:	4293      	cmp	r3, r2
 8107cca:	d003      	beq.n	8107cd4 <TIM_Base_SetConfig+0x40>
 8107ccc:	687b      	ldr	r3, [r7, #4]
 8107cce:	4a3a      	ldr	r2, [pc, #232]	; (8107db8 <TIM_Base_SetConfig+0x124>)
 8107cd0:	4293      	cmp	r3, r2
 8107cd2:	d108      	bne.n	8107ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107cdc:	683b      	ldr	r3, [r7, #0]
 8107cde:	685b      	ldr	r3, [r3, #4]
 8107ce0:	68fa      	ldr	r2, [r7, #12]
 8107ce2:	4313      	orrs	r3, r2
 8107ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107ce6:	687b      	ldr	r3, [r7, #4]
 8107ce8:	4a2f      	ldr	r2, [pc, #188]	; (8107da8 <TIM_Base_SetConfig+0x114>)
 8107cea:	4293      	cmp	r3, r2
 8107cec:	d01f      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107cee:	687b      	ldr	r3, [r7, #4]
 8107cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107cf4:	d01b      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	4a2c      	ldr	r2, [pc, #176]	; (8107dac <TIM_Base_SetConfig+0x118>)
 8107cfa:	4293      	cmp	r3, r2
 8107cfc:	d017      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107cfe:	687b      	ldr	r3, [r7, #4]
 8107d00:	4a2b      	ldr	r2, [pc, #172]	; (8107db0 <TIM_Base_SetConfig+0x11c>)
 8107d02:	4293      	cmp	r3, r2
 8107d04:	d013      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	4a2a      	ldr	r2, [pc, #168]	; (8107db4 <TIM_Base_SetConfig+0x120>)
 8107d0a:	4293      	cmp	r3, r2
 8107d0c:	d00f      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	4a29      	ldr	r2, [pc, #164]	; (8107db8 <TIM_Base_SetConfig+0x124>)
 8107d12:	4293      	cmp	r3, r2
 8107d14:	d00b      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	4a28      	ldr	r2, [pc, #160]	; (8107dbc <TIM_Base_SetConfig+0x128>)
 8107d1a:	4293      	cmp	r3, r2
 8107d1c:	d007      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	4a27      	ldr	r2, [pc, #156]	; (8107dc0 <TIM_Base_SetConfig+0x12c>)
 8107d22:	4293      	cmp	r3, r2
 8107d24:	d003      	beq.n	8107d2e <TIM_Base_SetConfig+0x9a>
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	4a26      	ldr	r2, [pc, #152]	; (8107dc4 <TIM_Base_SetConfig+0x130>)
 8107d2a:	4293      	cmp	r3, r2
 8107d2c:	d108      	bne.n	8107d40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107d2e:	68fb      	ldr	r3, [r7, #12]
 8107d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107d36:	683b      	ldr	r3, [r7, #0]
 8107d38:	68db      	ldr	r3, [r3, #12]
 8107d3a:	68fa      	ldr	r2, [r7, #12]
 8107d3c:	4313      	orrs	r3, r2
 8107d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107d40:	68fb      	ldr	r3, [r7, #12]
 8107d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107d46:	683b      	ldr	r3, [r7, #0]
 8107d48:	695b      	ldr	r3, [r3, #20]
 8107d4a:	4313      	orrs	r3, r2
 8107d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107d4e:	687b      	ldr	r3, [r7, #4]
 8107d50:	68fa      	ldr	r2, [r7, #12]
 8107d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107d54:	683b      	ldr	r3, [r7, #0]
 8107d56:	689a      	ldr	r2, [r3, #8]
 8107d58:	687b      	ldr	r3, [r7, #4]
 8107d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107d5c:	683b      	ldr	r3, [r7, #0]
 8107d5e:	681a      	ldr	r2, [r3, #0]
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107d64:	687b      	ldr	r3, [r7, #4]
 8107d66:	4a10      	ldr	r2, [pc, #64]	; (8107da8 <TIM_Base_SetConfig+0x114>)
 8107d68:	4293      	cmp	r3, r2
 8107d6a:	d00f      	beq.n	8107d8c <TIM_Base_SetConfig+0xf8>
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	4a12      	ldr	r2, [pc, #72]	; (8107db8 <TIM_Base_SetConfig+0x124>)
 8107d70:	4293      	cmp	r3, r2
 8107d72:	d00b      	beq.n	8107d8c <TIM_Base_SetConfig+0xf8>
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	4a11      	ldr	r2, [pc, #68]	; (8107dbc <TIM_Base_SetConfig+0x128>)
 8107d78:	4293      	cmp	r3, r2
 8107d7a:	d007      	beq.n	8107d8c <TIM_Base_SetConfig+0xf8>
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	4a10      	ldr	r2, [pc, #64]	; (8107dc0 <TIM_Base_SetConfig+0x12c>)
 8107d80:	4293      	cmp	r3, r2
 8107d82:	d003      	beq.n	8107d8c <TIM_Base_SetConfig+0xf8>
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	4a0f      	ldr	r2, [pc, #60]	; (8107dc4 <TIM_Base_SetConfig+0x130>)
 8107d88:	4293      	cmp	r3, r2
 8107d8a:	d103      	bne.n	8107d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107d8c:	683b      	ldr	r3, [r7, #0]
 8107d8e:	691a      	ldr	r2, [r3, #16]
 8107d90:	687b      	ldr	r3, [r7, #4]
 8107d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	2201      	movs	r2, #1
 8107d98:	615a      	str	r2, [r3, #20]
}
 8107d9a:	bf00      	nop
 8107d9c:	3714      	adds	r7, #20
 8107d9e:	46bd      	mov	sp, r7
 8107da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107da4:	4770      	bx	lr
 8107da6:	bf00      	nop
 8107da8:	40010000 	.word	0x40010000
 8107dac:	40000400 	.word	0x40000400
 8107db0:	40000800 	.word	0x40000800
 8107db4:	40000c00 	.word	0x40000c00
 8107db8:	40010400 	.word	0x40010400
 8107dbc:	40014000 	.word	0x40014000
 8107dc0:	40014400 	.word	0x40014400
 8107dc4:	40014800 	.word	0x40014800

08107dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107dc8:	b480      	push	{r7}
 8107dca:	b087      	sub	sp, #28
 8107dcc:	af00      	add	r7, sp, #0
 8107dce:	6078      	str	r0, [r7, #4]
 8107dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107dd2:	687b      	ldr	r3, [r7, #4]
 8107dd4:	6a1b      	ldr	r3, [r3, #32]
 8107dd6:	f023 0201 	bic.w	r2, r3, #1
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	6a1b      	ldr	r3, [r3, #32]
 8107de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107de4:	687b      	ldr	r3, [r7, #4]
 8107de6:	685b      	ldr	r3, [r3, #4]
 8107de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	699b      	ldr	r3, [r3, #24]
 8107dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107df0:	68fb      	ldr	r3, [r7, #12]
 8107df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107dfc:	68fb      	ldr	r3, [r7, #12]
 8107dfe:	f023 0303 	bic.w	r3, r3, #3
 8107e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107e04:	683b      	ldr	r3, [r7, #0]
 8107e06:	681b      	ldr	r3, [r3, #0]
 8107e08:	68fa      	ldr	r2, [r7, #12]
 8107e0a:	4313      	orrs	r3, r2
 8107e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107e0e:	697b      	ldr	r3, [r7, #20]
 8107e10:	f023 0302 	bic.w	r3, r3, #2
 8107e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107e16:	683b      	ldr	r3, [r7, #0]
 8107e18:	689b      	ldr	r3, [r3, #8]
 8107e1a:	697a      	ldr	r2, [r7, #20]
 8107e1c:	4313      	orrs	r3, r2
 8107e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107e20:	687b      	ldr	r3, [r7, #4]
 8107e22:	4a2c      	ldr	r2, [pc, #176]	; (8107ed4 <TIM_OC1_SetConfig+0x10c>)
 8107e24:	4293      	cmp	r3, r2
 8107e26:	d00f      	beq.n	8107e48 <TIM_OC1_SetConfig+0x80>
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	4a2b      	ldr	r2, [pc, #172]	; (8107ed8 <TIM_OC1_SetConfig+0x110>)
 8107e2c:	4293      	cmp	r3, r2
 8107e2e:	d00b      	beq.n	8107e48 <TIM_OC1_SetConfig+0x80>
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	4a2a      	ldr	r2, [pc, #168]	; (8107edc <TIM_OC1_SetConfig+0x114>)
 8107e34:	4293      	cmp	r3, r2
 8107e36:	d007      	beq.n	8107e48 <TIM_OC1_SetConfig+0x80>
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	4a29      	ldr	r2, [pc, #164]	; (8107ee0 <TIM_OC1_SetConfig+0x118>)
 8107e3c:	4293      	cmp	r3, r2
 8107e3e:	d003      	beq.n	8107e48 <TIM_OC1_SetConfig+0x80>
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	4a28      	ldr	r2, [pc, #160]	; (8107ee4 <TIM_OC1_SetConfig+0x11c>)
 8107e44:	4293      	cmp	r3, r2
 8107e46:	d10c      	bne.n	8107e62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107e48:	697b      	ldr	r3, [r7, #20]
 8107e4a:	f023 0308 	bic.w	r3, r3, #8
 8107e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107e50:	683b      	ldr	r3, [r7, #0]
 8107e52:	68db      	ldr	r3, [r3, #12]
 8107e54:	697a      	ldr	r2, [r7, #20]
 8107e56:	4313      	orrs	r3, r2
 8107e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107e5a:	697b      	ldr	r3, [r7, #20]
 8107e5c:	f023 0304 	bic.w	r3, r3, #4
 8107e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	4a1b      	ldr	r2, [pc, #108]	; (8107ed4 <TIM_OC1_SetConfig+0x10c>)
 8107e66:	4293      	cmp	r3, r2
 8107e68:	d00f      	beq.n	8107e8a <TIM_OC1_SetConfig+0xc2>
 8107e6a:	687b      	ldr	r3, [r7, #4]
 8107e6c:	4a1a      	ldr	r2, [pc, #104]	; (8107ed8 <TIM_OC1_SetConfig+0x110>)
 8107e6e:	4293      	cmp	r3, r2
 8107e70:	d00b      	beq.n	8107e8a <TIM_OC1_SetConfig+0xc2>
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	4a19      	ldr	r2, [pc, #100]	; (8107edc <TIM_OC1_SetConfig+0x114>)
 8107e76:	4293      	cmp	r3, r2
 8107e78:	d007      	beq.n	8107e8a <TIM_OC1_SetConfig+0xc2>
 8107e7a:	687b      	ldr	r3, [r7, #4]
 8107e7c:	4a18      	ldr	r2, [pc, #96]	; (8107ee0 <TIM_OC1_SetConfig+0x118>)
 8107e7e:	4293      	cmp	r3, r2
 8107e80:	d003      	beq.n	8107e8a <TIM_OC1_SetConfig+0xc2>
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	4a17      	ldr	r2, [pc, #92]	; (8107ee4 <TIM_OC1_SetConfig+0x11c>)
 8107e86:	4293      	cmp	r3, r2
 8107e88:	d111      	bne.n	8107eae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107e8a:	693b      	ldr	r3, [r7, #16]
 8107e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107e92:	693b      	ldr	r3, [r7, #16]
 8107e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107e9a:	683b      	ldr	r3, [r7, #0]
 8107e9c:	695b      	ldr	r3, [r3, #20]
 8107e9e:	693a      	ldr	r2, [r7, #16]
 8107ea0:	4313      	orrs	r3, r2
 8107ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107ea4:	683b      	ldr	r3, [r7, #0]
 8107ea6:	699b      	ldr	r3, [r3, #24]
 8107ea8:	693a      	ldr	r2, [r7, #16]
 8107eaa:	4313      	orrs	r3, r2
 8107eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107eae:	687b      	ldr	r3, [r7, #4]
 8107eb0:	693a      	ldr	r2, [r7, #16]
 8107eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	68fa      	ldr	r2, [r7, #12]
 8107eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107eba:	683b      	ldr	r3, [r7, #0]
 8107ebc:	685a      	ldr	r2, [r3, #4]
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	697a      	ldr	r2, [r7, #20]
 8107ec6:	621a      	str	r2, [r3, #32]
}
 8107ec8:	bf00      	nop
 8107eca:	371c      	adds	r7, #28
 8107ecc:	46bd      	mov	sp, r7
 8107ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ed2:	4770      	bx	lr
 8107ed4:	40010000 	.word	0x40010000
 8107ed8:	40010400 	.word	0x40010400
 8107edc:	40014000 	.word	0x40014000
 8107ee0:	40014400 	.word	0x40014400
 8107ee4:	40014800 	.word	0x40014800

08107ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107ee8:	b480      	push	{r7}
 8107eea:	b087      	sub	sp, #28
 8107eec:	af00      	add	r7, sp, #0
 8107eee:	6078      	str	r0, [r7, #4]
 8107ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	6a1b      	ldr	r3, [r3, #32]
 8107ef6:	f023 0210 	bic.w	r2, r3, #16
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	6a1b      	ldr	r3, [r3, #32]
 8107f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	685b      	ldr	r3, [r3, #4]
 8107f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	699b      	ldr	r3, [r3, #24]
 8107f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107f10:	68fb      	ldr	r3, [r7, #12]
 8107f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107f1c:	68fb      	ldr	r3, [r7, #12]
 8107f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107f24:	683b      	ldr	r3, [r7, #0]
 8107f26:	681b      	ldr	r3, [r3, #0]
 8107f28:	021b      	lsls	r3, r3, #8
 8107f2a:	68fa      	ldr	r2, [r7, #12]
 8107f2c:	4313      	orrs	r3, r2
 8107f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107f30:	697b      	ldr	r3, [r7, #20]
 8107f32:	f023 0320 	bic.w	r3, r3, #32
 8107f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107f38:	683b      	ldr	r3, [r7, #0]
 8107f3a:	689b      	ldr	r3, [r3, #8]
 8107f3c:	011b      	lsls	r3, r3, #4
 8107f3e:	697a      	ldr	r2, [r7, #20]
 8107f40:	4313      	orrs	r3, r2
 8107f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107f44:	687b      	ldr	r3, [r7, #4]
 8107f46:	4a28      	ldr	r2, [pc, #160]	; (8107fe8 <TIM_OC2_SetConfig+0x100>)
 8107f48:	4293      	cmp	r3, r2
 8107f4a:	d003      	beq.n	8107f54 <TIM_OC2_SetConfig+0x6c>
 8107f4c:	687b      	ldr	r3, [r7, #4]
 8107f4e:	4a27      	ldr	r2, [pc, #156]	; (8107fec <TIM_OC2_SetConfig+0x104>)
 8107f50:	4293      	cmp	r3, r2
 8107f52:	d10d      	bne.n	8107f70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107f54:	697b      	ldr	r3, [r7, #20]
 8107f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107f5c:	683b      	ldr	r3, [r7, #0]
 8107f5e:	68db      	ldr	r3, [r3, #12]
 8107f60:	011b      	lsls	r3, r3, #4
 8107f62:	697a      	ldr	r2, [r7, #20]
 8107f64:	4313      	orrs	r3, r2
 8107f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107f68:	697b      	ldr	r3, [r7, #20]
 8107f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	4a1d      	ldr	r2, [pc, #116]	; (8107fe8 <TIM_OC2_SetConfig+0x100>)
 8107f74:	4293      	cmp	r3, r2
 8107f76:	d00f      	beq.n	8107f98 <TIM_OC2_SetConfig+0xb0>
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	4a1c      	ldr	r2, [pc, #112]	; (8107fec <TIM_OC2_SetConfig+0x104>)
 8107f7c:	4293      	cmp	r3, r2
 8107f7e:	d00b      	beq.n	8107f98 <TIM_OC2_SetConfig+0xb0>
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	4a1b      	ldr	r2, [pc, #108]	; (8107ff0 <TIM_OC2_SetConfig+0x108>)
 8107f84:	4293      	cmp	r3, r2
 8107f86:	d007      	beq.n	8107f98 <TIM_OC2_SetConfig+0xb0>
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	4a1a      	ldr	r2, [pc, #104]	; (8107ff4 <TIM_OC2_SetConfig+0x10c>)
 8107f8c:	4293      	cmp	r3, r2
 8107f8e:	d003      	beq.n	8107f98 <TIM_OC2_SetConfig+0xb0>
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	4a19      	ldr	r2, [pc, #100]	; (8107ff8 <TIM_OC2_SetConfig+0x110>)
 8107f94:	4293      	cmp	r3, r2
 8107f96:	d113      	bne.n	8107fc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107f98:	693b      	ldr	r3, [r7, #16]
 8107f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107fa0:	693b      	ldr	r3, [r7, #16]
 8107fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107fa8:	683b      	ldr	r3, [r7, #0]
 8107faa:	695b      	ldr	r3, [r3, #20]
 8107fac:	009b      	lsls	r3, r3, #2
 8107fae:	693a      	ldr	r2, [r7, #16]
 8107fb0:	4313      	orrs	r3, r2
 8107fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107fb4:	683b      	ldr	r3, [r7, #0]
 8107fb6:	699b      	ldr	r3, [r3, #24]
 8107fb8:	009b      	lsls	r3, r3, #2
 8107fba:	693a      	ldr	r2, [r7, #16]
 8107fbc:	4313      	orrs	r3, r2
 8107fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	693a      	ldr	r2, [r7, #16]
 8107fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	68fa      	ldr	r2, [r7, #12]
 8107fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107fcc:	683b      	ldr	r3, [r7, #0]
 8107fce:	685a      	ldr	r2, [r3, #4]
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107fd4:	687b      	ldr	r3, [r7, #4]
 8107fd6:	697a      	ldr	r2, [r7, #20]
 8107fd8:	621a      	str	r2, [r3, #32]
}
 8107fda:	bf00      	nop
 8107fdc:	371c      	adds	r7, #28
 8107fde:	46bd      	mov	sp, r7
 8107fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fe4:	4770      	bx	lr
 8107fe6:	bf00      	nop
 8107fe8:	40010000 	.word	0x40010000
 8107fec:	40010400 	.word	0x40010400
 8107ff0:	40014000 	.word	0x40014000
 8107ff4:	40014400 	.word	0x40014400
 8107ff8:	40014800 	.word	0x40014800

08107ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107ffc:	b480      	push	{r7}
 8107ffe:	b087      	sub	sp, #28
 8108000:	af00      	add	r7, sp, #0
 8108002:	6078      	str	r0, [r7, #4]
 8108004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	6a1b      	ldr	r3, [r3, #32]
 810800a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810800e:	687b      	ldr	r3, [r7, #4]
 8108010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	6a1b      	ldr	r3, [r3, #32]
 8108016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	685b      	ldr	r3, [r3, #4]
 810801c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	69db      	ldr	r3, [r3, #28]
 8108022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8108024:	68fb      	ldr	r3, [r7, #12]
 8108026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810802e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8108030:	68fb      	ldr	r3, [r7, #12]
 8108032:	f023 0303 	bic.w	r3, r3, #3
 8108036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108038:	683b      	ldr	r3, [r7, #0]
 810803a:	681b      	ldr	r3, [r3, #0]
 810803c:	68fa      	ldr	r2, [r7, #12]
 810803e:	4313      	orrs	r3, r2
 8108040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8108042:	697b      	ldr	r3, [r7, #20]
 8108044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8108048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810804a:	683b      	ldr	r3, [r7, #0]
 810804c:	689b      	ldr	r3, [r3, #8]
 810804e:	021b      	lsls	r3, r3, #8
 8108050:	697a      	ldr	r2, [r7, #20]
 8108052:	4313      	orrs	r3, r2
 8108054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	4a27      	ldr	r2, [pc, #156]	; (81080f8 <TIM_OC3_SetConfig+0xfc>)
 810805a:	4293      	cmp	r3, r2
 810805c:	d003      	beq.n	8108066 <TIM_OC3_SetConfig+0x6a>
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	4a26      	ldr	r2, [pc, #152]	; (81080fc <TIM_OC3_SetConfig+0x100>)
 8108062:	4293      	cmp	r3, r2
 8108064:	d10d      	bne.n	8108082 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8108066:	697b      	ldr	r3, [r7, #20]
 8108068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810806c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810806e:	683b      	ldr	r3, [r7, #0]
 8108070:	68db      	ldr	r3, [r3, #12]
 8108072:	021b      	lsls	r3, r3, #8
 8108074:	697a      	ldr	r2, [r7, #20]
 8108076:	4313      	orrs	r3, r2
 8108078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810807a:	697b      	ldr	r3, [r7, #20]
 810807c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	4a1c      	ldr	r2, [pc, #112]	; (81080f8 <TIM_OC3_SetConfig+0xfc>)
 8108086:	4293      	cmp	r3, r2
 8108088:	d00f      	beq.n	81080aa <TIM_OC3_SetConfig+0xae>
 810808a:	687b      	ldr	r3, [r7, #4]
 810808c:	4a1b      	ldr	r2, [pc, #108]	; (81080fc <TIM_OC3_SetConfig+0x100>)
 810808e:	4293      	cmp	r3, r2
 8108090:	d00b      	beq.n	81080aa <TIM_OC3_SetConfig+0xae>
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	4a1a      	ldr	r2, [pc, #104]	; (8108100 <TIM_OC3_SetConfig+0x104>)
 8108096:	4293      	cmp	r3, r2
 8108098:	d007      	beq.n	81080aa <TIM_OC3_SetConfig+0xae>
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	4a19      	ldr	r2, [pc, #100]	; (8108104 <TIM_OC3_SetConfig+0x108>)
 810809e:	4293      	cmp	r3, r2
 81080a0:	d003      	beq.n	81080aa <TIM_OC3_SetConfig+0xae>
 81080a2:	687b      	ldr	r3, [r7, #4]
 81080a4:	4a18      	ldr	r2, [pc, #96]	; (8108108 <TIM_OC3_SetConfig+0x10c>)
 81080a6:	4293      	cmp	r3, r2
 81080a8:	d113      	bne.n	81080d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81080aa:	693b      	ldr	r3, [r7, #16]
 81080ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81080b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81080b2:	693b      	ldr	r3, [r7, #16]
 81080b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81080b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81080ba:	683b      	ldr	r3, [r7, #0]
 81080bc:	695b      	ldr	r3, [r3, #20]
 81080be:	011b      	lsls	r3, r3, #4
 81080c0:	693a      	ldr	r2, [r7, #16]
 81080c2:	4313      	orrs	r3, r2
 81080c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81080c6:	683b      	ldr	r3, [r7, #0]
 81080c8:	699b      	ldr	r3, [r3, #24]
 81080ca:	011b      	lsls	r3, r3, #4
 81080cc:	693a      	ldr	r2, [r7, #16]
 81080ce:	4313      	orrs	r3, r2
 81080d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	693a      	ldr	r2, [r7, #16]
 81080d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	68fa      	ldr	r2, [r7, #12]
 81080dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81080de:	683b      	ldr	r3, [r7, #0]
 81080e0:	685a      	ldr	r2, [r3, #4]
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81080e6:	687b      	ldr	r3, [r7, #4]
 81080e8:	697a      	ldr	r2, [r7, #20]
 81080ea:	621a      	str	r2, [r3, #32]
}
 81080ec:	bf00      	nop
 81080ee:	371c      	adds	r7, #28
 81080f0:	46bd      	mov	sp, r7
 81080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080f6:	4770      	bx	lr
 81080f8:	40010000 	.word	0x40010000
 81080fc:	40010400 	.word	0x40010400
 8108100:	40014000 	.word	0x40014000
 8108104:	40014400 	.word	0x40014400
 8108108:	40014800 	.word	0x40014800

0810810c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810810c:	b480      	push	{r7}
 810810e:	b087      	sub	sp, #28
 8108110:	af00      	add	r7, sp, #0
 8108112:	6078      	str	r0, [r7, #4]
 8108114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	6a1b      	ldr	r3, [r3, #32]
 810811a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810811e:	687b      	ldr	r3, [r7, #4]
 8108120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	6a1b      	ldr	r3, [r3, #32]
 8108126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	685b      	ldr	r3, [r3, #4]
 810812c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	69db      	ldr	r3, [r3, #28]
 8108132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108134:	68fb      	ldr	r3, [r7, #12]
 8108136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810813a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810813e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108140:	68fb      	ldr	r3, [r7, #12]
 8108142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108148:	683b      	ldr	r3, [r7, #0]
 810814a:	681b      	ldr	r3, [r3, #0]
 810814c:	021b      	lsls	r3, r3, #8
 810814e:	68fa      	ldr	r2, [r7, #12]
 8108150:	4313      	orrs	r3, r2
 8108152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8108154:	693b      	ldr	r3, [r7, #16]
 8108156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810815a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810815c:	683b      	ldr	r3, [r7, #0]
 810815e:	689b      	ldr	r3, [r3, #8]
 8108160:	031b      	lsls	r3, r3, #12
 8108162:	693a      	ldr	r2, [r7, #16]
 8108164:	4313      	orrs	r3, r2
 8108166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	4a18      	ldr	r2, [pc, #96]	; (81081cc <TIM_OC4_SetConfig+0xc0>)
 810816c:	4293      	cmp	r3, r2
 810816e:	d00f      	beq.n	8108190 <TIM_OC4_SetConfig+0x84>
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	4a17      	ldr	r2, [pc, #92]	; (81081d0 <TIM_OC4_SetConfig+0xc4>)
 8108174:	4293      	cmp	r3, r2
 8108176:	d00b      	beq.n	8108190 <TIM_OC4_SetConfig+0x84>
 8108178:	687b      	ldr	r3, [r7, #4]
 810817a:	4a16      	ldr	r2, [pc, #88]	; (81081d4 <TIM_OC4_SetConfig+0xc8>)
 810817c:	4293      	cmp	r3, r2
 810817e:	d007      	beq.n	8108190 <TIM_OC4_SetConfig+0x84>
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	4a15      	ldr	r2, [pc, #84]	; (81081d8 <TIM_OC4_SetConfig+0xcc>)
 8108184:	4293      	cmp	r3, r2
 8108186:	d003      	beq.n	8108190 <TIM_OC4_SetConfig+0x84>
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	4a14      	ldr	r2, [pc, #80]	; (81081dc <TIM_OC4_SetConfig+0xd0>)
 810818c:	4293      	cmp	r3, r2
 810818e:	d109      	bne.n	81081a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8108190:	697b      	ldr	r3, [r7, #20]
 8108192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8108196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8108198:	683b      	ldr	r3, [r7, #0]
 810819a:	695b      	ldr	r3, [r3, #20]
 810819c:	019b      	lsls	r3, r3, #6
 810819e:	697a      	ldr	r2, [r7, #20]
 81081a0:	4313      	orrs	r3, r2
 81081a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	697a      	ldr	r2, [r7, #20]
 81081a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81081aa:	687b      	ldr	r3, [r7, #4]
 81081ac:	68fa      	ldr	r2, [r7, #12]
 81081ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81081b0:	683b      	ldr	r3, [r7, #0]
 81081b2:	685a      	ldr	r2, [r3, #4]
 81081b4:	687b      	ldr	r3, [r7, #4]
 81081b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81081b8:	687b      	ldr	r3, [r7, #4]
 81081ba:	693a      	ldr	r2, [r7, #16]
 81081bc:	621a      	str	r2, [r3, #32]
}
 81081be:	bf00      	nop
 81081c0:	371c      	adds	r7, #28
 81081c2:	46bd      	mov	sp, r7
 81081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081c8:	4770      	bx	lr
 81081ca:	bf00      	nop
 81081cc:	40010000 	.word	0x40010000
 81081d0:	40010400 	.word	0x40010400
 81081d4:	40014000 	.word	0x40014000
 81081d8:	40014400 	.word	0x40014400
 81081dc:	40014800 	.word	0x40014800

081081e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81081e0:	b480      	push	{r7}
 81081e2:	b087      	sub	sp, #28
 81081e4:	af00      	add	r7, sp, #0
 81081e6:	6078      	str	r0, [r7, #4]
 81081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	6a1b      	ldr	r3, [r3, #32]
 81081ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81081f2:	687b      	ldr	r3, [r7, #4]
 81081f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	6a1b      	ldr	r3, [r3, #32]
 81081fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	685b      	ldr	r3, [r3, #4]
 8108200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108202:	687b      	ldr	r3, [r7, #4]
 8108204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108208:	68fb      	ldr	r3, [r7, #12]
 810820a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810820e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108214:	683b      	ldr	r3, [r7, #0]
 8108216:	681b      	ldr	r3, [r3, #0]
 8108218:	68fa      	ldr	r2, [r7, #12]
 810821a:	4313      	orrs	r3, r2
 810821c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810821e:	693b      	ldr	r3, [r7, #16]
 8108220:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108224:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108226:	683b      	ldr	r3, [r7, #0]
 8108228:	689b      	ldr	r3, [r3, #8]
 810822a:	041b      	lsls	r3, r3, #16
 810822c:	693a      	ldr	r2, [r7, #16]
 810822e:	4313      	orrs	r3, r2
 8108230:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	4a17      	ldr	r2, [pc, #92]	; (8108294 <TIM_OC5_SetConfig+0xb4>)
 8108236:	4293      	cmp	r3, r2
 8108238:	d00f      	beq.n	810825a <TIM_OC5_SetConfig+0x7a>
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	4a16      	ldr	r2, [pc, #88]	; (8108298 <TIM_OC5_SetConfig+0xb8>)
 810823e:	4293      	cmp	r3, r2
 8108240:	d00b      	beq.n	810825a <TIM_OC5_SetConfig+0x7a>
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	4a15      	ldr	r2, [pc, #84]	; (810829c <TIM_OC5_SetConfig+0xbc>)
 8108246:	4293      	cmp	r3, r2
 8108248:	d007      	beq.n	810825a <TIM_OC5_SetConfig+0x7a>
 810824a:	687b      	ldr	r3, [r7, #4]
 810824c:	4a14      	ldr	r2, [pc, #80]	; (81082a0 <TIM_OC5_SetConfig+0xc0>)
 810824e:	4293      	cmp	r3, r2
 8108250:	d003      	beq.n	810825a <TIM_OC5_SetConfig+0x7a>
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	4a13      	ldr	r2, [pc, #76]	; (81082a4 <TIM_OC5_SetConfig+0xc4>)
 8108256:	4293      	cmp	r3, r2
 8108258:	d109      	bne.n	810826e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810825a:	697b      	ldr	r3, [r7, #20]
 810825c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108260:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8108262:	683b      	ldr	r3, [r7, #0]
 8108264:	695b      	ldr	r3, [r3, #20]
 8108266:	021b      	lsls	r3, r3, #8
 8108268:	697a      	ldr	r2, [r7, #20]
 810826a:	4313      	orrs	r3, r2
 810826c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	697a      	ldr	r2, [r7, #20]
 8108272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	68fa      	ldr	r2, [r7, #12]
 8108278:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810827a:	683b      	ldr	r3, [r7, #0]
 810827c:	685a      	ldr	r2, [r3, #4]
 810827e:	687b      	ldr	r3, [r7, #4]
 8108280:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108282:	687b      	ldr	r3, [r7, #4]
 8108284:	693a      	ldr	r2, [r7, #16]
 8108286:	621a      	str	r2, [r3, #32]
}
 8108288:	bf00      	nop
 810828a:	371c      	adds	r7, #28
 810828c:	46bd      	mov	sp, r7
 810828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108292:	4770      	bx	lr
 8108294:	40010000 	.word	0x40010000
 8108298:	40010400 	.word	0x40010400
 810829c:	40014000 	.word	0x40014000
 81082a0:	40014400 	.word	0x40014400
 81082a4:	40014800 	.word	0x40014800

081082a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81082a8:	b480      	push	{r7}
 81082aa:	b087      	sub	sp, #28
 81082ac:	af00      	add	r7, sp, #0
 81082ae:	6078      	str	r0, [r7, #4]
 81082b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81082b2:	687b      	ldr	r3, [r7, #4]
 81082b4:	6a1b      	ldr	r3, [r3, #32]
 81082b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81082be:	687b      	ldr	r3, [r7, #4]
 81082c0:	6a1b      	ldr	r3, [r3, #32]
 81082c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81082c4:	687b      	ldr	r3, [r7, #4]
 81082c6:	685b      	ldr	r3, [r3, #4]
 81082c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81082ca:	687b      	ldr	r3, [r7, #4]
 81082cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81082d0:	68fb      	ldr	r3, [r7, #12]
 81082d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81082d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81082da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81082dc:	683b      	ldr	r3, [r7, #0]
 81082de:	681b      	ldr	r3, [r3, #0]
 81082e0:	021b      	lsls	r3, r3, #8
 81082e2:	68fa      	ldr	r2, [r7, #12]
 81082e4:	4313      	orrs	r3, r2
 81082e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81082e8:	693b      	ldr	r3, [r7, #16]
 81082ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81082ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81082f0:	683b      	ldr	r3, [r7, #0]
 81082f2:	689b      	ldr	r3, [r3, #8]
 81082f4:	051b      	lsls	r3, r3, #20
 81082f6:	693a      	ldr	r2, [r7, #16]
 81082f8:	4313      	orrs	r3, r2
 81082fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	4a18      	ldr	r2, [pc, #96]	; (8108360 <TIM_OC6_SetConfig+0xb8>)
 8108300:	4293      	cmp	r3, r2
 8108302:	d00f      	beq.n	8108324 <TIM_OC6_SetConfig+0x7c>
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	4a17      	ldr	r2, [pc, #92]	; (8108364 <TIM_OC6_SetConfig+0xbc>)
 8108308:	4293      	cmp	r3, r2
 810830a:	d00b      	beq.n	8108324 <TIM_OC6_SetConfig+0x7c>
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	4a16      	ldr	r2, [pc, #88]	; (8108368 <TIM_OC6_SetConfig+0xc0>)
 8108310:	4293      	cmp	r3, r2
 8108312:	d007      	beq.n	8108324 <TIM_OC6_SetConfig+0x7c>
 8108314:	687b      	ldr	r3, [r7, #4]
 8108316:	4a15      	ldr	r2, [pc, #84]	; (810836c <TIM_OC6_SetConfig+0xc4>)
 8108318:	4293      	cmp	r3, r2
 810831a:	d003      	beq.n	8108324 <TIM_OC6_SetConfig+0x7c>
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	4a14      	ldr	r2, [pc, #80]	; (8108370 <TIM_OC6_SetConfig+0xc8>)
 8108320:	4293      	cmp	r3, r2
 8108322:	d109      	bne.n	8108338 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108324:	697b      	ldr	r3, [r7, #20]
 8108326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810832a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810832c:	683b      	ldr	r3, [r7, #0]
 810832e:	695b      	ldr	r3, [r3, #20]
 8108330:	029b      	lsls	r3, r3, #10
 8108332:	697a      	ldr	r2, [r7, #20]
 8108334:	4313      	orrs	r3, r2
 8108336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108338:	687b      	ldr	r3, [r7, #4]
 810833a:	697a      	ldr	r2, [r7, #20]
 810833c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	68fa      	ldr	r2, [r7, #12]
 8108342:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108344:	683b      	ldr	r3, [r7, #0]
 8108346:	685a      	ldr	r2, [r3, #4]
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	693a      	ldr	r2, [r7, #16]
 8108350:	621a      	str	r2, [r3, #32]
}
 8108352:	bf00      	nop
 8108354:	371c      	adds	r7, #28
 8108356:	46bd      	mov	sp, r7
 8108358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810835c:	4770      	bx	lr
 810835e:	bf00      	nop
 8108360:	40010000 	.word	0x40010000
 8108364:	40010400 	.word	0x40010400
 8108368:	40014000 	.word	0x40014000
 810836c:	40014400 	.word	0x40014400
 8108370:	40014800 	.word	0x40014800

08108374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8108374:	b480      	push	{r7}
 8108376:	b087      	sub	sp, #28
 8108378:	af00      	add	r7, sp, #0
 810837a:	60f8      	str	r0, [r7, #12]
 810837c:	60b9      	str	r1, [r7, #8]
 810837e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8108380:	68bb      	ldr	r3, [r7, #8]
 8108382:	f003 031f 	and.w	r3, r3, #31
 8108386:	2201      	movs	r2, #1
 8108388:	fa02 f303 	lsl.w	r3, r2, r3
 810838c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810838e:	68fb      	ldr	r3, [r7, #12]
 8108390:	6a1a      	ldr	r2, [r3, #32]
 8108392:	697b      	ldr	r3, [r7, #20]
 8108394:	43db      	mvns	r3, r3
 8108396:	401a      	ands	r2, r3
 8108398:	68fb      	ldr	r3, [r7, #12]
 810839a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810839c:	68fb      	ldr	r3, [r7, #12]
 810839e:	6a1a      	ldr	r2, [r3, #32]
 81083a0:	68bb      	ldr	r3, [r7, #8]
 81083a2:	f003 031f 	and.w	r3, r3, #31
 81083a6:	6879      	ldr	r1, [r7, #4]
 81083a8:	fa01 f303 	lsl.w	r3, r1, r3
 81083ac:	431a      	orrs	r2, r3
 81083ae:	68fb      	ldr	r3, [r7, #12]
 81083b0:	621a      	str	r2, [r3, #32]
}
 81083b2:	bf00      	nop
 81083b4:	371c      	adds	r7, #28
 81083b6:	46bd      	mov	sp, r7
 81083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083bc:	4770      	bx	lr
	...

081083c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81083c0:	b480      	push	{r7}
 81083c2:	b085      	sub	sp, #20
 81083c4:	af00      	add	r7, sp, #0
 81083c6:	6078      	str	r0, [r7, #4]
 81083c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81083d0:	2b01      	cmp	r3, #1
 81083d2:	d101      	bne.n	81083d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81083d4:	2302      	movs	r3, #2
 81083d6:	e06d      	b.n	81084b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	2201      	movs	r2, #1
 81083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81083e0:	687b      	ldr	r3, [r7, #4]
 81083e2:	2202      	movs	r2, #2
 81083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	681b      	ldr	r3, [r3, #0]
 81083ec:	685b      	ldr	r3, [r3, #4]
 81083ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	681b      	ldr	r3, [r3, #0]
 81083f4:	689b      	ldr	r3, [r3, #8]
 81083f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81083f8:	687b      	ldr	r3, [r7, #4]
 81083fa:	681b      	ldr	r3, [r3, #0]
 81083fc:	4a30      	ldr	r2, [pc, #192]	; (81084c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81083fe:	4293      	cmp	r3, r2
 8108400:	d004      	beq.n	810840c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	4a2f      	ldr	r2, [pc, #188]	; (81084c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108408:	4293      	cmp	r3, r2
 810840a:	d108      	bne.n	810841e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810840c:	68fb      	ldr	r3, [r7, #12]
 810840e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8108412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108414:	683b      	ldr	r3, [r7, #0]
 8108416:	685b      	ldr	r3, [r3, #4]
 8108418:	68fa      	ldr	r2, [r7, #12]
 810841a:	4313      	orrs	r3, r2
 810841c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810841e:	68fb      	ldr	r3, [r7, #12]
 8108420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8108426:	683b      	ldr	r3, [r7, #0]
 8108428:	681b      	ldr	r3, [r3, #0]
 810842a:	68fa      	ldr	r2, [r7, #12]
 810842c:	4313      	orrs	r3, r2
 810842e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	681b      	ldr	r3, [r3, #0]
 8108434:	68fa      	ldr	r2, [r7, #12]
 8108436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	681b      	ldr	r3, [r3, #0]
 810843c:	4a20      	ldr	r2, [pc, #128]	; (81084c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810843e:	4293      	cmp	r3, r2
 8108440:	d022      	beq.n	8108488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108442:	687b      	ldr	r3, [r7, #4]
 8108444:	681b      	ldr	r3, [r3, #0]
 8108446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810844a:	d01d      	beq.n	8108488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810844c:	687b      	ldr	r3, [r7, #4]
 810844e:	681b      	ldr	r3, [r3, #0]
 8108450:	4a1d      	ldr	r2, [pc, #116]	; (81084c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8108452:	4293      	cmp	r3, r2
 8108454:	d018      	beq.n	8108488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108456:	687b      	ldr	r3, [r7, #4]
 8108458:	681b      	ldr	r3, [r3, #0]
 810845a:	4a1c      	ldr	r2, [pc, #112]	; (81084cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810845c:	4293      	cmp	r3, r2
 810845e:	d013      	beq.n	8108488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	681b      	ldr	r3, [r3, #0]
 8108464:	4a1a      	ldr	r2, [pc, #104]	; (81084d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8108466:	4293      	cmp	r3, r2
 8108468:	d00e      	beq.n	8108488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810846a:	687b      	ldr	r3, [r7, #4]
 810846c:	681b      	ldr	r3, [r3, #0]
 810846e:	4a15      	ldr	r2, [pc, #84]	; (81084c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108470:	4293      	cmp	r3, r2
 8108472:	d009      	beq.n	8108488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	681b      	ldr	r3, [r3, #0]
 8108478:	4a16      	ldr	r2, [pc, #88]	; (81084d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810847a:	4293      	cmp	r3, r2
 810847c:	d004      	beq.n	8108488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810847e:	687b      	ldr	r3, [r7, #4]
 8108480:	681b      	ldr	r3, [r3, #0]
 8108482:	4a15      	ldr	r2, [pc, #84]	; (81084d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108484:	4293      	cmp	r3, r2
 8108486:	d10c      	bne.n	81084a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8108488:	68bb      	ldr	r3, [r7, #8]
 810848a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810848e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8108490:	683b      	ldr	r3, [r7, #0]
 8108492:	689b      	ldr	r3, [r3, #8]
 8108494:	68ba      	ldr	r2, [r7, #8]
 8108496:	4313      	orrs	r3, r2
 8108498:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810849a:	687b      	ldr	r3, [r7, #4]
 810849c:	681b      	ldr	r3, [r3, #0]
 810849e:	68ba      	ldr	r2, [r7, #8]
 81084a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	2201      	movs	r2, #1
 81084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81084aa:	687b      	ldr	r3, [r7, #4]
 81084ac:	2200      	movs	r2, #0
 81084ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81084b2:	2300      	movs	r3, #0
}
 81084b4:	4618      	mov	r0, r3
 81084b6:	3714      	adds	r7, #20
 81084b8:	46bd      	mov	sp, r7
 81084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084be:	4770      	bx	lr
 81084c0:	40010000 	.word	0x40010000
 81084c4:	40010400 	.word	0x40010400
 81084c8:	40000400 	.word	0x40000400
 81084cc:	40000800 	.word	0x40000800
 81084d0:	40000c00 	.word	0x40000c00
 81084d4:	40001800 	.word	0x40001800
 81084d8:	40014000 	.word	0x40014000

081084dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81084dc:	b580      	push	{r7, lr}
 81084de:	b082      	sub	sp, #8
 81084e0:	af00      	add	r7, sp, #0
 81084e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	2b00      	cmp	r3, #0
 81084e8:	d101      	bne.n	81084ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81084ea:	2301      	movs	r3, #1
 81084ec:	e042      	b.n	8108574 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81084f4:	2b00      	cmp	r3, #0
 81084f6:	d106      	bne.n	8108506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81084f8:	687b      	ldr	r3, [r7, #4]
 81084fa:	2200      	movs	r2, #0
 81084fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108500:	6878      	ldr	r0, [r7, #4]
 8108502:	f7fa f9a5 	bl	8102850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	2224      	movs	r2, #36	; 0x24
 810850a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	681b      	ldr	r3, [r3, #0]
 8108512:	681a      	ldr	r2, [r3, #0]
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	681b      	ldr	r3, [r3, #0]
 8108518:	f022 0201 	bic.w	r2, r2, #1
 810851c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810851e:	6878      	ldr	r0, [r7, #4]
 8108520:	f000 f8c2 	bl	81086a8 <UART_SetConfig>
 8108524:	4603      	mov	r3, r0
 8108526:	2b01      	cmp	r3, #1
 8108528:	d101      	bne.n	810852e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810852a:	2301      	movs	r3, #1
 810852c:	e022      	b.n	8108574 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108532:	2b00      	cmp	r3, #0
 8108534:	d002      	beq.n	810853c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8108536:	6878      	ldr	r0, [r7, #4]
 8108538:	f000 fe1e 	bl	8109178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	681b      	ldr	r3, [r3, #0]
 8108540:	685a      	ldr	r2, [r3, #4]
 8108542:	687b      	ldr	r3, [r7, #4]
 8108544:	681b      	ldr	r3, [r3, #0]
 8108546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810854a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810854c:	687b      	ldr	r3, [r7, #4]
 810854e:	681b      	ldr	r3, [r3, #0]
 8108550:	689a      	ldr	r2, [r3, #8]
 8108552:	687b      	ldr	r3, [r7, #4]
 8108554:	681b      	ldr	r3, [r3, #0]
 8108556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810855a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810855c:	687b      	ldr	r3, [r7, #4]
 810855e:	681b      	ldr	r3, [r3, #0]
 8108560:	681a      	ldr	r2, [r3, #0]
 8108562:	687b      	ldr	r3, [r7, #4]
 8108564:	681b      	ldr	r3, [r3, #0]
 8108566:	f042 0201 	orr.w	r2, r2, #1
 810856a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810856c:	6878      	ldr	r0, [r7, #4]
 810856e:	f000 fea5 	bl	81092bc <UART_CheckIdleState>
 8108572:	4603      	mov	r3, r0
}
 8108574:	4618      	mov	r0, r3
 8108576:	3708      	adds	r7, #8
 8108578:	46bd      	mov	sp, r7
 810857a:	bd80      	pop	{r7, pc}

0810857c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810857c:	b580      	push	{r7, lr}
 810857e:	b08a      	sub	sp, #40	; 0x28
 8108580:	af02      	add	r7, sp, #8
 8108582:	60f8      	str	r0, [r7, #12]
 8108584:	60b9      	str	r1, [r7, #8]
 8108586:	603b      	str	r3, [r7, #0]
 8108588:	4613      	mov	r3, r2
 810858a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810858c:	68fb      	ldr	r3, [r7, #12]
 810858e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108592:	2b20      	cmp	r3, #32
 8108594:	f040 8083 	bne.w	810869e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8108598:	68bb      	ldr	r3, [r7, #8]
 810859a:	2b00      	cmp	r3, #0
 810859c:	d002      	beq.n	81085a4 <HAL_UART_Transmit+0x28>
 810859e:	88fb      	ldrh	r3, [r7, #6]
 81085a0:	2b00      	cmp	r3, #0
 81085a2:	d101      	bne.n	81085a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81085a4:	2301      	movs	r3, #1
 81085a6:	e07b      	b.n	81086a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81085a8:	68fb      	ldr	r3, [r7, #12]
 81085aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81085ae:	2b01      	cmp	r3, #1
 81085b0:	d101      	bne.n	81085b6 <HAL_UART_Transmit+0x3a>
 81085b2:	2302      	movs	r3, #2
 81085b4:	e074      	b.n	81086a0 <HAL_UART_Transmit+0x124>
 81085b6:	68fb      	ldr	r3, [r7, #12]
 81085b8:	2201      	movs	r2, #1
 81085ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81085be:	68fb      	ldr	r3, [r7, #12]
 81085c0:	2200      	movs	r2, #0
 81085c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81085c6:	68fb      	ldr	r3, [r7, #12]
 81085c8:	2221      	movs	r2, #33	; 0x21
 81085ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81085ce:	f7fa faff 	bl	8102bd0 <HAL_GetTick>
 81085d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81085d4:	68fb      	ldr	r3, [r7, #12]
 81085d6:	88fa      	ldrh	r2, [r7, #6]
 81085d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81085dc:	68fb      	ldr	r3, [r7, #12]
 81085de:	88fa      	ldrh	r2, [r7, #6]
 81085e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81085e4:	68fb      	ldr	r3, [r7, #12]
 81085e6:	689b      	ldr	r3, [r3, #8]
 81085e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81085ec:	d108      	bne.n	8108600 <HAL_UART_Transmit+0x84>
 81085ee:	68fb      	ldr	r3, [r7, #12]
 81085f0:	691b      	ldr	r3, [r3, #16]
 81085f2:	2b00      	cmp	r3, #0
 81085f4:	d104      	bne.n	8108600 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81085f6:	2300      	movs	r3, #0
 81085f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81085fa:	68bb      	ldr	r3, [r7, #8]
 81085fc:	61bb      	str	r3, [r7, #24]
 81085fe:	e003      	b.n	8108608 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8108600:	68bb      	ldr	r3, [r7, #8]
 8108602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108604:	2300      	movs	r3, #0
 8108606:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8108608:	68fb      	ldr	r3, [r7, #12]
 810860a:	2200      	movs	r2, #0
 810860c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8108610:	e02c      	b.n	810866c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108612:	683b      	ldr	r3, [r7, #0]
 8108614:	9300      	str	r3, [sp, #0]
 8108616:	697b      	ldr	r3, [r7, #20]
 8108618:	2200      	movs	r2, #0
 810861a:	2180      	movs	r1, #128	; 0x80
 810861c:	68f8      	ldr	r0, [r7, #12]
 810861e:	f000 fe98 	bl	8109352 <UART_WaitOnFlagUntilTimeout>
 8108622:	4603      	mov	r3, r0
 8108624:	2b00      	cmp	r3, #0
 8108626:	d001      	beq.n	810862c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8108628:	2303      	movs	r3, #3
 810862a:	e039      	b.n	81086a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 810862c:	69fb      	ldr	r3, [r7, #28]
 810862e:	2b00      	cmp	r3, #0
 8108630:	d10b      	bne.n	810864a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108632:	69bb      	ldr	r3, [r7, #24]
 8108634:	881b      	ldrh	r3, [r3, #0]
 8108636:	461a      	mov	r2, r3
 8108638:	68fb      	ldr	r3, [r7, #12]
 810863a:	681b      	ldr	r3, [r3, #0]
 810863c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108640:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8108642:	69bb      	ldr	r3, [r7, #24]
 8108644:	3302      	adds	r3, #2
 8108646:	61bb      	str	r3, [r7, #24]
 8108648:	e007      	b.n	810865a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810864a:	69fb      	ldr	r3, [r7, #28]
 810864c:	781a      	ldrb	r2, [r3, #0]
 810864e:	68fb      	ldr	r3, [r7, #12]
 8108650:	681b      	ldr	r3, [r3, #0]
 8108652:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8108654:	69fb      	ldr	r3, [r7, #28]
 8108656:	3301      	adds	r3, #1
 8108658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810865a:	68fb      	ldr	r3, [r7, #12]
 810865c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108660:	b29b      	uxth	r3, r3
 8108662:	3b01      	subs	r3, #1
 8108664:	b29a      	uxth	r2, r3
 8108666:	68fb      	ldr	r3, [r7, #12]
 8108668:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 810866c:	68fb      	ldr	r3, [r7, #12]
 810866e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108672:	b29b      	uxth	r3, r3
 8108674:	2b00      	cmp	r3, #0
 8108676:	d1cc      	bne.n	8108612 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108678:	683b      	ldr	r3, [r7, #0]
 810867a:	9300      	str	r3, [sp, #0]
 810867c:	697b      	ldr	r3, [r7, #20]
 810867e:	2200      	movs	r2, #0
 8108680:	2140      	movs	r1, #64	; 0x40
 8108682:	68f8      	ldr	r0, [r7, #12]
 8108684:	f000 fe65 	bl	8109352 <UART_WaitOnFlagUntilTimeout>
 8108688:	4603      	mov	r3, r0
 810868a:	2b00      	cmp	r3, #0
 810868c:	d001      	beq.n	8108692 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810868e:	2303      	movs	r3, #3
 8108690:	e006      	b.n	81086a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108692:	68fb      	ldr	r3, [r7, #12]
 8108694:	2220      	movs	r2, #32
 8108696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810869a:	2300      	movs	r3, #0
 810869c:	e000      	b.n	81086a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810869e:	2302      	movs	r3, #2
  }
}
 81086a0:	4618      	mov	r0, r3
 81086a2:	3720      	adds	r7, #32
 81086a4:	46bd      	mov	sp, r7
 81086a6:	bd80      	pop	{r7, pc}

081086a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81086a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81086ac:	b092      	sub	sp, #72	; 0x48
 81086ae:	af00      	add	r7, sp, #0
 81086b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81086b2:	2300      	movs	r3, #0
 81086b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81086b8:	697b      	ldr	r3, [r7, #20]
 81086ba:	689a      	ldr	r2, [r3, #8]
 81086bc:	697b      	ldr	r3, [r7, #20]
 81086be:	691b      	ldr	r3, [r3, #16]
 81086c0:	431a      	orrs	r2, r3
 81086c2:	697b      	ldr	r3, [r7, #20]
 81086c4:	695b      	ldr	r3, [r3, #20]
 81086c6:	431a      	orrs	r2, r3
 81086c8:	697b      	ldr	r3, [r7, #20]
 81086ca:	69db      	ldr	r3, [r3, #28]
 81086cc:	4313      	orrs	r3, r2
 81086ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81086d0:	697b      	ldr	r3, [r7, #20]
 81086d2:	681b      	ldr	r3, [r3, #0]
 81086d4:	681a      	ldr	r2, [r3, #0]
 81086d6:	4bbd      	ldr	r3, [pc, #756]	; (81089cc <UART_SetConfig+0x324>)
 81086d8:	4013      	ands	r3, r2
 81086da:	697a      	ldr	r2, [r7, #20]
 81086dc:	6812      	ldr	r2, [r2, #0]
 81086de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81086e0:	430b      	orrs	r3, r1
 81086e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81086e4:	697b      	ldr	r3, [r7, #20]
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	685b      	ldr	r3, [r3, #4]
 81086ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81086ee:	697b      	ldr	r3, [r7, #20]
 81086f0:	68da      	ldr	r2, [r3, #12]
 81086f2:	697b      	ldr	r3, [r7, #20]
 81086f4:	681b      	ldr	r3, [r3, #0]
 81086f6:	430a      	orrs	r2, r1
 81086f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81086fa:	697b      	ldr	r3, [r7, #20]
 81086fc:	699b      	ldr	r3, [r3, #24]
 81086fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108700:	697b      	ldr	r3, [r7, #20]
 8108702:	681b      	ldr	r3, [r3, #0]
 8108704:	4ab2      	ldr	r2, [pc, #712]	; (81089d0 <UART_SetConfig+0x328>)
 8108706:	4293      	cmp	r3, r2
 8108708:	d004      	beq.n	8108714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810870a:	697b      	ldr	r3, [r7, #20]
 810870c:	6a1b      	ldr	r3, [r3, #32]
 810870e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108710:	4313      	orrs	r3, r2
 8108712:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108714:	697b      	ldr	r3, [r7, #20]
 8108716:	681b      	ldr	r3, [r3, #0]
 8108718:	689b      	ldr	r3, [r3, #8]
 810871a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810871e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108722:	697a      	ldr	r2, [r7, #20]
 8108724:	6812      	ldr	r2, [r2, #0]
 8108726:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108728:	430b      	orrs	r3, r1
 810872a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810872c:	697b      	ldr	r3, [r7, #20]
 810872e:	681b      	ldr	r3, [r3, #0]
 8108730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108732:	f023 010f 	bic.w	r1, r3, #15
 8108736:	697b      	ldr	r3, [r7, #20]
 8108738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810873a:	697b      	ldr	r3, [r7, #20]
 810873c:	681b      	ldr	r3, [r3, #0]
 810873e:	430a      	orrs	r2, r1
 8108740:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108742:	697b      	ldr	r3, [r7, #20]
 8108744:	681b      	ldr	r3, [r3, #0]
 8108746:	4aa3      	ldr	r2, [pc, #652]	; (81089d4 <UART_SetConfig+0x32c>)
 8108748:	4293      	cmp	r3, r2
 810874a:	d177      	bne.n	810883c <UART_SetConfig+0x194>
 810874c:	4ba2      	ldr	r3, [pc, #648]	; (81089d8 <UART_SetConfig+0x330>)
 810874e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108750:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108754:	2b28      	cmp	r3, #40	; 0x28
 8108756:	d86d      	bhi.n	8108834 <UART_SetConfig+0x18c>
 8108758:	a201      	add	r2, pc, #4	; (adr r2, 8108760 <UART_SetConfig+0xb8>)
 810875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810875e:	bf00      	nop
 8108760:	08108805 	.word	0x08108805
 8108764:	08108835 	.word	0x08108835
 8108768:	08108835 	.word	0x08108835
 810876c:	08108835 	.word	0x08108835
 8108770:	08108835 	.word	0x08108835
 8108774:	08108835 	.word	0x08108835
 8108778:	08108835 	.word	0x08108835
 810877c:	08108835 	.word	0x08108835
 8108780:	0810880d 	.word	0x0810880d
 8108784:	08108835 	.word	0x08108835
 8108788:	08108835 	.word	0x08108835
 810878c:	08108835 	.word	0x08108835
 8108790:	08108835 	.word	0x08108835
 8108794:	08108835 	.word	0x08108835
 8108798:	08108835 	.word	0x08108835
 810879c:	08108835 	.word	0x08108835
 81087a0:	08108815 	.word	0x08108815
 81087a4:	08108835 	.word	0x08108835
 81087a8:	08108835 	.word	0x08108835
 81087ac:	08108835 	.word	0x08108835
 81087b0:	08108835 	.word	0x08108835
 81087b4:	08108835 	.word	0x08108835
 81087b8:	08108835 	.word	0x08108835
 81087bc:	08108835 	.word	0x08108835
 81087c0:	0810881d 	.word	0x0810881d
 81087c4:	08108835 	.word	0x08108835
 81087c8:	08108835 	.word	0x08108835
 81087cc:	08108835 	.word	0x08108835
 81087d0:	08108835 	.word	0x08108835
 81087d4:	08108835 	.word	0x08108835
 81087d8:	08108835 	.word	0x08108835
 81087dc:	08108835 	.word	0x08108835
 81087e0:	08108825 	.word	0x08108825
 81087e4:	08108835 	.word	0x08108835
 81087e8:	08108835 	.word	0x08108835
 81087ec:	08108835 	.word	0x08108835
 81087f0:	08108835 	.word	0x08108835
 81087f4:	08108835 	.word	0x08108835
 81087f8:	08108835 	.word	0x08108835
 81087fc:	08108835 	.word	0x08108835
 8108800:	0810882d 	.word	0x0810882d
 8108804:	2301      	movs	r3, #1
 8108806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810880a:	e220      	b.n	8108c4e <UART_SetConfig+0x5a6>
 810880c:	2304      	movs	r3, #4
 810880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108812:	e21c      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108814:	2308      	movs	r3, #8
 8108816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810881a:	e218      	b.n	8108c4e <UART_SetConfig+0x5a6>
 810881c:	2310      	movs	r3, #16
 810881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108822:	e214      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108824:	2320      	movs	r3, #32
 8108826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810882a:	e210      	b.n	8108c4e <UART_SetConfig+0x5a6>
 810882c:	2340      	movs	r3, #64	; 0x40
 810882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108832:	e20c      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108834:	2380      	movs	r3, #128	; 0x80
 8108836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810883a:	e208      	b.n	8108c4e <UART_SetConfig+0x5a6>
 810883c:	697b      	ldr	r3, [r7, #20]
 810883e:	681b      	ldr	r3, [r3, #0]
 8108840:	4a66      	ldr	r2, [pc, #408]	; (81089dc <UART_SetConfig+0x334>)
 8108842:	4293      	cmp	r3, r2
 8108844:	d130      	bne.n	81088a8 <UART_SetConfig+0x200>
 8108846:	4b64      	ldr	r3, [pc, #400]	; (81089d8 <UART_SetConfig+0x330>)
 8108848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810884a:	f003 0307 	and.w	r3, r3, #7
 810884e:	2b05      	cmp	r3, #5
 8108850:	d826      	bhi.n	81088a0 <UART_SetConfig+0x1f8>
 8108852:	a201      	add	r2, pc, #4	; (adr r2, 8108858 <UART_SetConfig+0x1b0>)
 8108854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108858:	08108871 	.word	0x08108871
 810885c:	08108879 	.word	0x08108879
 8108860:	08108881 	.word	0x08108881
 8108864:	08108889 	.word	0x08108889
 8108868:	08108891 	.word	0x08108891
 810886c:	08108899 	.word	0x08108899
 8108870:	2300      	movs	r3, #0
 8108872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108876:	e1ea      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108878:	2304      	movs	r3, #4
 810887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810887e:	e1e6      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108880:	2308      	movs	r3, #8
 8108882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108886:	e1e2      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108888:	2310      	movs	r3, #16
 810888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810888e:	e1de      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108890:	2320      	movs	r3, #32
 8108892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108896:	e1da      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108898:	2340      	movs	r3, #64	; 0x40
 810889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810889e:	e1d6      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81088a0:	2380      	movs	r3, #128	; 0x80
 81088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088a6:	e1d2      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81088a8:	697b      	ldr	r3, [r7, #20]
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	4a4c      	ldr	r2, [pc, #304]	; (81089e0 <UART_SetConfig+0x338>)
 81088ae:	4293      	cmp	r3, r2
 81088b0:	d130      	bne.n	8108914 <UART_SetConfig+0x26c>
 81088b2:	4b49      	ldr	r3, [pc, #292]	; (81089d8 <UART_SetConfig+0x330>)
 81088b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81088b6:	f003 0307 	and.w	r3, r3, #7
 81088ba:	2b05      	cmp	r3, #5
 81088bc:	d826      	bhi.n	810890c <UART_SetConfig+0x264>
 81088be:	a201      	add	r2, pc, #4	; (adr r2, 81088c4 <UART_SetConfig+0x21c>)
 81088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088c4:	081088dd 	.word	0x081088dd
 81088c8:	081088e5 	.word	0x081088e5
 81088cc:	081088ed 	.word	0x081088ed
 81088d0:	081088f5 	.word	0x081088f5
 81088d4:	081088fd 	.word	0x081088fd
 81088d8:	08108905 	.word	0x08108905
 81088dc:	2300      	movs	r3, #0
 81088de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088e2:	e1b4      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81088e4:	2304      	movs	r3, #4
 81088e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088ea:	e1b0      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81088ec:	2308      	movs	r3, #8
 81088ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088f2:	e1ac      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81088f4:	2310      	movs	r3, #16
 81088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088fa:	e1a8      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81088fc:	2320      	movs	r3, #32
 81088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108902:	e1a4      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108904:	2340      	movs	r3, #64	; 0x40
 8108906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810890a:	e1a0      	b.n	8108c4e <UART_SetConfig+0x5a6>
 810890c:	2380      	movs	r3, #128	; 0x80
 810890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108912:	e19c      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108914:	697b      	ldr	r3, [r7, #20]
 8108916:	681b      	ldr	r3, [r3, #0]
 8108918:	4a32      	ldr	r2, [pc, #200]	; (81089e4 <UART_SetConfig+0x33c>)
 810891a:	4293      	cmp	r3, r2
 810891c:	d130      	bne.n	8108980 <UART_SetConfig+0x2d8>
 810891e:	4b2e      	ldr	r3, [pc, #184]	; (81089d8 <UART_SetConfig+0x330>)
 8108920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108922:	f003 0307 	and.w	r3, r3, #7
 8108926:	2b05      	cmp	r3, #5
 8108928:	d826      	bhi.n	8108978 <UART_SetConfig+0x2d0>
 810892a:	a201      	add	r2, pc, #4	; (adr r2, 8108930 <UART_SetConfig+0x288>)
 810892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108930:	08108949 	.word	0x08108949
 8108934:	08108951 	.word	0x08108951
 8108938:	08108959 	.word	0x08108959
 810893c:	08108961 	.word	0x08108961
 8108940:	08108969 	.word	0x08108969
 8108944:	08108971 	.word	0x08108971
 8108948:	2300      	movs	r3, #0
 810894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810894e:	e17e      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108950:	2304      	movs	r3, #4
 8108952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108956:	e17a      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108958:	2308      	movs	r3, #8
 810895a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810895e:	e176      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108960:	2310      	movs	r3, #16
 8108962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108966:	e172      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108968:	2320      	movs	r3, #32
 810896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810896e:	e16e      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108970:	2340      	movs	r3, #64	; 0x40
 8108972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108976:	e16a      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108978:	2380      	movs	r3, #128	; 0x80
 810897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810897e:	e166      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108980:	697b      	ldr	r3, [r7, #20]
 8108982:	681b      	ldr	r3, [r3, #0]
 8108984:	4a18      	ldr	r2, [pc, #96]	; (81089e8 <UART_SetConfig+0x340>)
 8108986:	4293      	cmp	r3, r2
 8108988:	d140      	bne.n	8108a0c <UART_SetConfig+0x364>
 810898a:	4b13      	ldr	r3, [pc, #76]	; (81089d8 <UART_SetConfig+0x330>)
 810898c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810898e:	f003 0307 	and.w	r3, r3, #7
 8108992:	2b05      	cmp	r3, #5
 8108994:	d836      	bhi.n	8108a04 <UART_SetConfig+0x35c>
 8108996:	a201      	add	r2, pc, #4	; (adr r2, 810899c <UART_SetConfig+0x2f4>)
 8108998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810899c:	081089b5 	.word	0x081089b5
 81089a0:	081089bd 	.word	0x081089bd
 81089a4:	081089c5 	.word	0x081089c5
 81089a8:	081089ed 	.word	0x081089ed
 81089ac:	081089f5 	.word	0x081089f5
 81089b0:	081089fd 	.word	0x081089fd
 81089b4:	2300      	movs	r3, #0
 81089b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089ba:	e148      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81089bc:	2304      	movs	r3, #4
 81089be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089c2:	e144      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81089c4:	2308      	movs	r3, #8
 81089c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089ca:	e140      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81089cc:	cfff69f3 	.word	0xcfff69f3
 81089d0:	58000c00 	.word	0x58000c00
 81089d4:	40011000 	.word	0x40011000
 81089d8:	58024400 	.word	0x58024400
 81089dc:	40004400 	.word	0x40004400
 81089e0:	40004800 	.word	0x40004800
 81089e4:	40004c00 	.word	0x40004c00
 81089e8:	40005000 	.word	0x40005000
 81089ec:	2310      	movs	r3, #16
 81089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089f2:	e12c      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81089f4:	2320      	movs	r3, #32
 81089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089fa:	e128      	b.n	8108c4e <UART_SetConfig+0x5a6>
 81089fc:	2340      	movs	r3, #64	; 0x40
 81089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a02:	e124      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108a04:	2380      	movs	r3, #128	; 0x80
 8108a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a0a:	e120      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108a0c:	697b      	ldr	r3, [r7, #20]
 8108a0e:	681b      	ldr	r3, [r3, #0]
 8108a10:	4acb      	ldr	r2, [pc, #812]	; (8108d40 <UART_SetConfig+0x698>)
 8108a12:	4293      	cmp	r3, r2
 8108a14:	d176      	bne.n	8108b04 <UART_SetConfig+0x45c>
 8108a16:	4bcb      	ldr	r3, [pc, #812]	; (8108d44 <UART_SetConfig+0x69c>)
 8108a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108a1e:	2b28      	cmp	r3, #40	; 0x28
 8108a20:	d86c      	bhi.n	8108afc <UART_SetConfig+0x454>
 8108a22:	a201      	add	r2, pc, #4	; (adr r2, 8108a28 <UART_SetConfig+0x380>)
 8108a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a28:	08108acd 	.word	0x08108acd
 8108a2c:	08108afd 	.word	0x08108afd
 8108a30:	08108afd 	.word	0x08108afd
 8108a34:	08108afd 	.word	0x08108afd
 8108a38:	08108afd 	.word	0x08108afd
 8108a3c:	08108afd 	.word	0x08108afd
 8108a40:	08108afd 	.word	0x08108afd
 8108a44:	08108afd 	.word	0x08108afd
 8108a48:	08108ad5 	.word	0x08108ad5
 8108a4c:	08108afd 	.word	0x08108afd
 8108a50:	08108afd 	.word	0x08108afd
 8108a54:	08108afd 	.word	0x08108afd
 8108a58:	08108afd 	.word	0x08108afd
 8108a5c:	08108afd 	.word	0x08108afd
 8108a60:	08108afd 	.word	0x08108afd
 8108a64:	08108afd 	.word	0x08108afd
 8108a68:	08108add 	.word	0x08108add
 8108a6c:	08108afd 	.word	0x08108afd
 8108a70:	08108afd 	.word	0x08108afd
 8108a74:	08108afd 	.word	0x08108afd
 8108a78:	08108afd 	.word	0x08108afd
 8108a7c:	08108afd 	.word	0x08108afd
 8108a80:	08108afd 	.word	0x08108afd
 8108a84:	08108afd 	.word	0x08108afd
 8108a88:	08108ae5 	.word	0x08108ae5
 8108a8c:	08108afd 	.word	0x08108afd
 8108a90:	08108afd 	.word	0x08108afd
 8108a94:	08108afd 	.word	0x08108afd
 8108a98:	08108afd 	.word	0x08108afd
 8108a9c:	08108afd 	.word	0x08108afd
 8108aa0:	08108afd 	.word	0x08108afd
 8108aa4:	08108afd 	.word	0x08108afd
 8108aa8:	08108aed 	.word	0x08108aed
 8108aac:	08108afd 	.word	0x08108afd
 8108ab0:	08108afd 	.word	0x08108afd
 8108ab4:	08108afd 	.word	0x08108afd
 8108ab8:	08108afd 	.word	0x08108afd
 8108abc:	08108afd 	.word	0x08108afd
 8108ac0:	08108afd 	.word	0x08108afd
 8108ac4:	08108afd 	.word	0x08108afd
 8108ac8:	08108af5 	.word	0x08108af5
 8108acc:	2301      	movs	r3, #1
 8108ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ad2:	e0bc      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108ad4:	2304      	movs	r3, #4
 8108ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ada:	e0b8      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108adc:	2308      	movs	r3, #8
 8108ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ae2:	e0b4      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108ae4:	2310      	movs	r3, #16
 8108ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108aea:	e0b0      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108aec:	2320      	movs	r3, #32
 8108aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108af2:	e0ac      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108af4:	2340      	movs	r3, #64	; 0x40
 8108af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108afa:	e0a8      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108afc:	2380      	movs	r3, #128	; 0x80
 8108afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b02:	e0a4      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b04:	697b      	ldr	r3, [r7, #20]
 8108b06:	681b      	ldr	r3, [r3, #0]
 8108b08:	4a8f      	ldr	r2, [pc, #572]	; (8108d48 <UART_SetConfig+0x6a0>)
 8108b0a:	4293      	cmp	r3, r2
 8108b0c:	d130      	bne.n	8108b70 <UART_SetConfig+0x4c8>
 8108b0e:	4b8d      	ldr	r3, [pc, #564]	; (8108d44 <UART_SetConfig+0x69c>)
 8108b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b12:	f003 0307 	and.w	r3, r3, #7
 8108b16:	2b05      	cmp	r3, #5
 8108b18:	d826      	bhi.n	8108b68 <UART_SetConfig+0x4c0>
 8108b1a:	a201      	add	r2, pc, #4	; (adr r2, 8108b20 <UART_SetConfig+0x478>)
 8108b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b20:	08108b39 	.word	0x08108b39
 8108b24:	08108b41 	.word	0x08108b41
 8108b28:	08108b49 	.word	0x08108b49
 8108b2c:	08108b51 	.word	0x08108b51
 8108b30:	08108b59 	.word	0x08108b59
 8108b34:	08108b61 	.word	0x08108b61
 8108b38:	2300      	movs	r3, #0
 8108b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b3e:	e086      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b40:	2304      	movs	r3, #4
 8108b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b46:	e082      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b48:	2308      	movs	r3, #8
 8108b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b4e:	e07e      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b50:	2310      	movs	r3, #16
 8108b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b56:	e07a      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b58:	2320      	movs	r3, #32
 8108b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b5e:	e076      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b60:	2340      	movs	r3, #64	; 0x40
 8108b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b66:	e072      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b68:	2380      	movs	r3, #128	; 0x80
 8108b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b6e:	e06e      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108b70:	697b      	ldr	r3, [r7, #20]
 8108b72:	681b      	ldr	r3, [r3, #0]
 8108b74:	4a75      	ldr	r2, [pc, #468]	; (8108d4c <UART_SetConfig+0x6a4>)
 8108b76:	4293      	cmp	r3, r2
 8108b78:	d130      	bne.n	8108bdc <UART_SetConfig+0x534>
 8108b7a:	4b72      	ldr	r3, [pc, #456]	; (8108d44 <UART_SetConfig+0x69c>)
 8108b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b7e:	f003 0307 	and.w	r3, r3, #7
 8108b82:	2b05      	cmp	r3, #5
 8108b84:	d826      	bhi.n	8108bd4 <UART_SetConfig+0x52c>
 8108b86:	a201      	add	r2, pc, #4	; (adr r2, 8108b8c <UART_SetConfig+0x4e4>)
 8108b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b8c:	08108ba5 	.word	0x08108ba5
 8108b90:	08108bad 	.word	0x08108bad
 8108b94:	08108bb5 	.word	0x08108bb5
 8108b98:	08108bbd 	.word	0x08108bbd
 8108b9c:	08108bc5 	.word	0x08108bc5
 8108ba0:	08108bcd 	.word	0x08108bcd
 8108ba4:	2300      	movs	r3, #0
 8108ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108baa:	e050      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108bac:	2304      	movs	r3, #4
 8108bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bb2:	e04c      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108bb4:	2308      	movs	r3, #8
 8108bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bba:	e048      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108bbc:	2310      	movs	r3, #16
 8108bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bc2:	e044      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108bc4:	2320      	movs	r3, #32
 8108bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bca:	e040      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108bcc:	2340      	movs	r3, #64	; 0x40
 8108bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bd2:	e03c      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108bd4:	2380      	movs	r3, #128	; 0x80
 8108bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bda:	e038      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108bdc:	697b      	ldr	r3, [r7, #20]
 8108bde:	681b      	ldr	r3, [r3, #0]
 8108be0:	4a5b      	ldr	r2, [pc, #364]	; (8108d50 <UART_SetConfig+0x6a8>)
 8108be2:	4293      	cmp	r3, r2
 8108be4:	d130      	bne.n	8108c48 <UART_SetConfig+0x5a0>
 8108be6:	4b57      	ldr	r3, [pc, #348]	; (8108d44 <UART_SetConfig+0x69c>)
 8108be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108bea:	f003 0307 	and.w	r3, r3, #7
 8108bee:	2b05      	cmp	r3, #5
 8108bf0:	d826      	bhi.n	8108c40 <UART_SetConfig+0x598>
 8108bf2:	a201      	add	r2, pc, #4	; (adr r2, 8108bf8 <UART_SetConfig+0x550>)
 8108bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108bf8:	08108c11 	.word	0x08108c11
 8108bfc:	08108c19 	.word	0x08108c19
 8108c00:	08108c21 	.word	0x08108c21
 8108c04:	08108c29 	.word	0x08108c29
 8108c08:	08108c31 	.word	0x08108c31
 8108c0c:	08108c39 	.word	0x08108c39
 8108c10:	2302      	movs	r3, #2
 8108c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c16:	e01a      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108c18:	2304      	movs	r3, #4
 8108c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c1e:	e016      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108c20:	2308      	movs	r3, #8
 8108c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c26:	e012      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108c28:	2310      	movs	r3, #16
 8108c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c2e:	e00e      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108c30:	2320      	movs	r3, #32
 8108c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c36:	e00a      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108c38:	2340      	movs	r3, #64	; 0x40
 8108c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c3e:	e006      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108c40:	2380      	movs	r3, #128	; 0x80
 8108c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c46:	e002      	b.n	8108c4e <UART_SetConfig+0x5a6>
 8108c48:	2380      	movs	r3, #128	; 0x80
 8108c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108c4e:	697b      	ldr	r3, [r7, #20]
 8108c50:	681b      	ldr	r3, [r3, #0]
 8108c52:	4a3f      	ldr	r2, [pc, #252]	; (8108d50 <UART_SetConfig+0x6a8>)
 8108c54:	4293      	cmp	r3, r2
 8108c56:	f040 80f8 	bne.w	8108e4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108c5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108c5e:	2b20      	cmp	r3, #32
 8108c60:	dc46      	bgt.n	8108cf0 <UART_SetConfig+0x648>
 8108c62:	2b02      	cmp	r3, #2
 8108c64:	f2c0 8082 	blt.w	8108d6c <UART_SetConfig+0x6c4>
 8108c68:	3b02      	subs	r3, #2
 8108c6a:	2b1e      	cmp	r3, #30
 8108c6c:	d87e      	bhi.n	8108d6c <UART_SetConfig+0x6c4>
 8108c6e:	a201      	add	r2, pc, #4	; (adr r2, 8108c74 <UART_SetConfig+0x5cc>)
 8108c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c74:	08108cf7 	.word	0x08108cf7
 8108c78:	08108d6d 	.word	0x08108d6d
 8108c7c:	08108cff 	.word	0x08108cff
 8108c80:	08108d6d 	.word	0x08108d6d
 8108c84:	08108d6d 	.word	0x08108d6d
 8108c88:	08108d6d 	.word	0x08108d6d
 8108c8c:	08108d0f 	.word	0x08108d0f
 8108c90:	08108d6d 	.word	0x08108d6d
 8108c94:	08108d6d 	.word	0x08108d6d
 8108c98:	08108d6d 	.word	0x08108d6d
 8108c9c:	08108d6d 	.word	0x08108d6d
 8108ca0:	08108d6d 	.word	0x08108d6d
 8108ca4:	08108d6d 	.word	0x08108d6d
 8108ca8:	08108d6d 	.word	0x08108d6d
 8108cac:	08108d1f 	.word	0x08108d1f
 8108cb0:	08108d6d 	.word	0x08108d6d
 8108cb4:	08108d6d 	.word	0x08108d6d
 8108cb8:	08108d6d 	.word	0x08108d6d
 8108cbc:	08108d6d 	.word	0x08108d6d
 8108cc0:	08108d6d 	.word	0x08108d6d
 8108cc4:	08108d6d 	.word	0x08108d6d
 8108cc8:	08108d6d 	.word	0x08108d6d
 8108ccc:	08108d6d 	.word	0x08108d6d
 8108cd0:	08108d6d 	.word	0x08108d6d
 8108cd4:	08108d6d 	.word	0x08108d6d
 8108cd8:	08108d6d 	.word	0x08108d6d
 8108cdc:	08108d6d 	.word	0x08108d6d
 8108ce0:	08108d6d 	.word	0x08108d6d
 8108ce4:	08108d6d 	.word	0x08108d6d
 8108ce8:	08108d6d 	.word	0x08108d6d
 8108cec:	08108d5f 	.word	0x08108d5f
 8108cf0:	2b40      	cmp	r3, #64	; 0x40
 8108cf2:	d037      	beq.n	8108d64 <UART_SetConfig+0x6bc>
 8108cf4:	e03a      	b.n	8108d6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108cf6:	f7fd fe35 	bl	8106964 <HAL_RCCEx_GetD3PCLK1Freq>
 8108cfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108cfc:	e03c      	b.n	8108d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108d02:	4618      	mov	r0, r3
 8108d04:	f7fd fe44 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d0c:	e034      	b.n	8108d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108d0e:	f107 0318 	add.w	r3, r7, #24
 8108d12:	4618      	mov	r0, r3
 8108d14:	f7fd ff90 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108d18:	69fb      	ldr	r3, [r7, #28]
 8108d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d1c:	e02c      	b.n	8108d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108d1e:	4b09      	ldr	r3, [pc, #36]	; (8108d44 <UART_SetConfig+0x69c>)
 8108d20:	681b      	ldr	r3, [r3, #0]
 8108d22:	f003 0320 	and.w	r3, r3, #32
 8108d26:	2b00      	cmp	r3, #0
 8108d28:	d016      	beq.n	8108d58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108d2a:	4b06      	ldr	r3, [pc, #24]	; (8108d44 <UART_SetConfig+0x69c>)
 8108d2c:	681b      	ldr	r3, [r3, #0]
 8108d2e:	08db      	lsrs	r3, r3, #3
 8108d30:	f003 0303 	and.w	r3, r3, #3
 8108d34:	4a07      	ldr	r2, [pc, #28]	; (8108d54 <UART_SetConfig+0x6ac>)
 8108d36:	fa22 f303 	lsr.w	r3, r2, r3
 8108d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108d3c:	e01c      	b.n	8108d78 <UART_SetConfig+0x6d0>
 8108d3e:	bf00      	nop
 8108d40:	40011400 	.word	0x40011400
 8108d44:	58024400 	.word	0x58024400
 8108d48:	40007800 	.word	0x40007800
 8108d4c:	40007c00 	.word	0x40007c00
 8108d50:	58000c00 	.word	0x58000c00
 8108d54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108d58:	4b9d      	ldr	r3, [pc, #628]	; (8108fd0 <UART_SetConfig+0x928>)
 8108d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d5c:	e00c      	b.n	8108d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108d5e:	4b9d      	ldr	r3, [pc, #628]	; (8108fd4 <UART_SetConfig+0x92c>)
 8108d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d62:	e009      	b.n	8108d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d6a:	e005      	b.n	8108d78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108d6c:	2300      	movs	r3, #0
 8108d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108d70:	2301      	movs	r3, #1
 8108d72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108d76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108d7a:	2b00      	cmp	r3, #0
 8108d7c:	f000 81de 	beq.w	810913c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108d80:	697b      	ldr	r3, [r7, #20]
 8108d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d84:	4a94      	ldr	r2, [pc, #592]	; (8108fd8 <UART_SetConfig+0x930>)
 8108d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108d8a:	461a      	mov	r2, r3
 8108d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108d92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108d94:	697b      	ldr	r3, [r7, #20]
 8108d96:	685a      	ldr	r2, [r3, #4]
 8108d98:	4613      	mov	r3, r2
 8108d9a:	005b      	lsls	r3, r3, #1
 8108d9c:	4413      	add	r3, r2
 8108d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108da0:	429a      	cmp	r2, r3
 8108da2:	d305      	bcc.n	8108db0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108da4:	697b      	ldr	r3, [r7, #20]
 8108da6:	685b      	ldr	r3, [r3, #4]
 8108da8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108dac:	429a      	cmp	r2, r3
 8108dae:	d903      	bls.n	8108db8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108db0:	2301      	movs	r3, #1
 8108db2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108db6:	e1c1      	b.n	810913c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108dba:	2200      	movs	r2, #0
 8108dbc:	60bb      	str	r3, [r7, #8]
 8108dbe:	60fa      	str	r2, [r7, #12]
 8108dc0:	697b      	ldr	r3, [r7, #20]
 8108dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dc4:	4a84      	ldr	r2, [pc, #528]	; (8108fd8 <UART_SetConfig+0x930>)
 8108dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108dca:	b29b      	uxth	r3, r3
 8108dcc:	2200      	movs	r2, #0
 8108dce:	603b      	str	r3, [r7, #0]
 8108dd0:	607a      	str	r2, [r7, #4]
 8108dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108dda:	f7f7 ff9f 	bl	8100d1c <__aeabi_uldivmod>
 8108dde:	4602      	mov	r2, r0
 8108de0:	460b      	mov	r3, r1
 8108de2:	4610      	mov	r0, r2
 8108de4:	4619      	mov	r1, r3
 8108de6:	f04f 0200 	mov.w	r2, #0
 8108dea:	f04f 0300 	mov.w	r3, #0
 8108dee:	020b      	lsls	r3, r1, #8
 8108df0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108df4:	0202      	lsls	r2, r0, #8
 8108df6:	6979      	ldr	r1, [r7, #20]
 8108df8:	6849      	ldr	r1, [r1, #4]
 8108dfa:	0849      	lsrs	r1, r1, #1
 8108dfc:	2000      	movs	r0, #0
 8108dfe:	460c      	mov	r4, r1
 8108e00:	4605      	mov	r5, r0
 8108e02:	eb12 0804 	adds.w	r8, r2, r4
 8108e06:	eb43 0905 	adc.w	r9, r3, r5
 8108e0a:	697b      	ldr	r3, [r7, #20]
 8108e0c:	685b      	ldr	r3, [r3, #4]
 8108e0e:	2200      	movs	r2, #0
 8108e10:	469a      	mov	sl, r3
 8108e12:	4693      	mov	fp, r2
 8108e14:	4652      	mov	r2, sl
 8108e16:	465b      	mov	r3, fp
 8108e18:	4640      	mov	r0, r8
 8108e1a:	4649      	mov	r1, r9
 8108e1c:	f7f7 ff7e 	bl	8100d1c <__aeabi_uldivmod>
 8108e20:	4602      	mov	r2, r0
 8108e22:	460b      	mov	r3, r1
 8108e24:	4613      	mov	r3, r2
 8108e26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108e2e:	d308      	bcc.n	8108e42 <UART_SetConfig+0x79a>
 8108e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108e36:	d204      	bcs.n	8108e42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108e38:	697b      	ldr	r3, [r7, #20]
 8108e3a:	681b      	ldr	r3, [r3, #0]
 8108e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108e3e:	60da      	str	r2, [r3, #12]
 8108e40:	e17c      	b.n	810913c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108e42:	2301      	movs	r3, #1
 8108e44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108e48:	e178      	b.n	810913c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108e4a:	697b      	ldr	r3, [r7, #20]
 8108e4c:	69db      	ldr	r3, [r3, #28]
 8108e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108e52:	f040 80c5 	bne.w	8108fe0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108e56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108e5a:	2b20      	cmp	r3, #32
 8108e5c:	dc48      	bgt.n	8108ef0 <UART_SetConfig+0x848>
 8108e5e:	2b00      	cmp	r3, #0
 8108e60:	db7b      	blt.n	8108f5a <UART_SetConfig+0x8b2>
 8108e62:	2b20      	cmp	r3, #32
 8108e64:	d879      	bhi.n	8108f5a <UART_SetConfig+0x8b2>
 8108e66:	a201      	add	r2, pc, #4	; (adr r2, 8108e6c <UART_SetConfig+0x7c4>)
 8108e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e6c:	08108ef7 	.word	0x08108ef7
 8108e70:	08108eff 	.word	0x08108eff
 8108e74:	08108f5b 	.word	0x08108f5b
 8108e78:	08108f5b 	.word	0x08108f5b
 8108e7c:	08108f07 	.word	0x08108f07
 8108e80:	08108f5b 	.word	0x08108f5b
 8108e84:	08108f5b 	.word	0x08108f5b
 8108e88:	08108f5b 	.word	0x08108f5b
 8108e8c:	08108f17 	.word	0x08108f17
 8108e90:	08108f5b 	.word	0x08108f5b
 8108e94:	08108f5b 	.word	0x08108f5b
 8108e98:	08108f5b 	.word	0x08108f5b
 8108e9c:	08108f5b 	.word	0x08108f5b
 8108ea0:	08108f5b 	.word	0x08108f5b
 8108ea4:	08108f5b 	.word	0x08108f5b
 8108ea8:	08108f5b 	.word	0x08108f5b
 8108eac:	08108f27 	.word	0x08108f27
 8108eb0:	08108f5b 	.word	0x08108f5b
 8108eb4:	08108f5b 	.word	0x08108f5b
 8108eb8:	08108f5b 	.word	0x08108f5b
 8108ebc:	08108f5b 	.word	0x08108f5b
 8108ec0:	08108f5b 	.word	0x08108f5b
 8108ec4:	08108f5b 	.word	0x08108f5b
 8108ec8:	08108f5b 	.word	0x08108f5b
 8108ecc:	08108f5b 	.word	0x08108f5b
 8108ed0:	08108f5b 	.word	0x08108f5b
 8108ed4:	08108f5b 	.word	0x08108f5b
 8108ed8:	08108f5b 	.word	0x08108f5b
 8108edc:	08108f5b 	.word	0x08108f5b
 8108ee0:	08108f5b 	.word	0x08108f5b
 8108ee4:	08108f5b 	.word	0x08108f5b
 8108ee8:	08108f5b 	.word	0x08108f5b
 8108eec:	08108f4d 	.word	0x08108f4d
 8108ef0:	2b40      	cmp	r3, #64	; 0x40
 8108ef2:	d02e      	beq.n	8108f52 <UART_SetConfig+0x8aa>
 8108ef4:	e031      	b.n	8108f5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108ef6:	f7fc f8f1 	bl	81050dc <HAL_RCC_GetPCLK1Freq>
 8108efa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108efc:	e033      	b.n	8108f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108efe:	f7fc f903 	bl	8105108 <HAL_RCC_GetPCLK2Freq>
 8108f02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108f04:	e02f      	b.n	8108f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108f0a:	4618      	mov	r0, r3
 8108f0c:	f7fd fd40 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108f14:	e027      	b.n	8108f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108f16:	f107 0318 	add.w	r3, r7, #24
 8108f1a:	4618      	mov	r0, r3
 8108f1c:	f7fd fe8c 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108f20:	69fb      	ldr	r3, [r7, #28]
 8108f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108f24:	e01f      	b.n	8108f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108f26:	4b2d      	ldr	r3, [pc, #180]	; (8108fdc <UART_SetConfig+0x934>)
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	f003 0320 	and.w	r3, r3, #32
 8108f2e:	2b00      	cmp	r3, #0
 8108f30:	d009      	beq.n	8108f46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108f32:	4b2a      	ldr	r3, [pc, #168]	; (8108fdc <UART_SetConfig+0x934>)
 8108f34:	681b      	ldr	r3, [r3, #0]
 8108f36:	08db      	lsrs	r3, r3, #3
 8108f38:	f003 0303 	and.w	r3, r3, #3
 8108f3c:	4a24      	ldr	r2, [pc, #144]	; (8108fd0 <UART_SetConfig+0x928>)
 8108f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8108f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108f44:	e00f      	b.n	8108f66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8108f46:	4b22      	ldr	r3, [pc, #136]	; (8108fd0 <UART_SetConfig+0x928>)
 8108f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108f4a:	e00c      	b.n	8108f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108f4c:	4b21      	ldr	r3, [pc, #132]	; (8108fd4 <UART_SetConfig+0x92c>)
 8108f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108f50:	e009      	b.n	8108f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108f58:	e005      	b.n	8108f66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108f5a:	2300      	movs	r3, #0
 8108f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108f5e:	2301      	movs	r3, #1
 8108f60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108f68:	2b00      	cmp	r3, #0
 8108f6a:	f000 80e7 	beq.w	810913c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108f6e:	697b      	ldr	r3, [r7, #20]
 8108f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f72:	4a19      	ldr	r2, [pc, #100]	; (8108fd8 <UART_SetConfig+0x930>)
 8108f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108f78:	461a      	mov	r2, r3
 8108f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8108f80:	005a      	lsls	r2, r3, #1
 8108f82:	697b      	ldr	r3, [r7, #20]
 8108f84:	685b      	ldr	r3, [r3, #4]
 8108f86:	085b      	lsrs	r3, r3, #1
 8108f88:	441a      	add	r2, r3
 8108f8a:	697b      	ldr	r3, [r7, #20]
 8108f8c:	685b      	ldr	r3, [r3, #4]
 8108f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108f92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f96:	2b0f      	cmp	r3, #15
 8108f98:	d916      	bls.n	8108fc8 <UART_SetConfig+0x920>
 8108f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108fa0:	d212      	bcs.n	8108fc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108fa4:	b29b      	uxth	r3, r3
 8108fa6:	f023 030f 	bic.w	r3, r3, #15
 8108faa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108fae:	085b      	lsrs	r3, r3, #1
 8108fb0:	b29b      	uxth	r3, r3
 8108fb2:	f003 0307 	and.w	r3, r3, #7
 8108fb6:	b29a      	uxth	r2, r3
 8108fb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8108fba:	4313      	orrs	r3, r2
 8108fbc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8108fbe:	697b      	ldr	r3, [r7, #20]
 8108fc0:	681b      	ldr	r3, [r3, #0]
 8108fc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108fc4:	60da      	str	r2, [r3, #12]
 8108fc6:	e0b9      	b.n	810913c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108fc8:	2301      	movs	r3, #1
 8108fca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108fce:	e0b5      	b.n	810913c <UART_SetConfig+0xa94>
 8108fd0:	03d09000 	.word	0x03d09000
 8108fd4:	003d0900 	.word	0x003d0900
 8108fd8:	0810a08c 	.word	0x0810a08c
 8108fdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108fe0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108fe4:	2b20      	cmp	r3, #32
 8108fe6:	dc49      	bgt.n	810907c <UART_SetConfig+0x9d4>
 8108fe8:	2b00      	cmp	r3, #0
 8108fea:	db7c      	blt.n	81090e6 <UART_SetConfig+0xa3e>
 8108fec:	2b20      	cmp	r3, #32
 8108fee:	d87a      	bhi.n	81090e6 <UART_SetConfig+0xa3e>
 8108ff0:	a201      	add	r2, pc, #4	; (adr r2, 8108ff8 <UART_SetConfig+0x950>)
 8108ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ff6:	bf00      	nop
 8108ff8:	08109083 	.word	0x08109083
 8108ffc:	0810908b 	.word	0x0810908b
 8109000:	081090e7 	.word	0x081090e7
 8109004:	081090e7 	.word	0x081090e7
 8109008:	08109093 	.word	0x08109093
 810900c:	081090e7 	.word	0x081090e7
 8109010:	081090e7 	.word	0x081090e7
 8109014:	081090e7 	.word	0x081090e7
 8109018:	081090a3 	.word	0x081090a3
 810901c:	081090e7 	.word	0x081090e7
 8109020:	081090e7 	.word	0x081090e7
 8109024:	081090e7 	.word	0x081090e7
 8109028:	081090e7 	.word	0x081090e7
 810902c:	081090e7 	.word	0x081090e7
 8109030:	081090e7 	.word	0x081090e7
 8109034:	081090e7 	.word	0x081090e7
 8109038:	081090b3 	.word	0x081090b3
 810903c:	081090e7 	.word	0x081090e7
 8109040:	081090e7 	.word	0x081090e7
 8109044:	081090e7 	.word	0x081090e7
 8109048:	081090e7 	.word	0x081090e7
 810904c:	081090e7 	.word	0x081090e7
 8109050:	081090e7 	.word	0x081090e7
 8109054:	081090e7 	.word	0x081090e7
 8109058:	081090e7 	.word	0x081090e7
 810905c:	081090e7 	.word	0x081090e7
 8109060:	081090e7 	.word	0x081090e7
 8109064:	081090e7 	.word	0x081090e7
 8109068:	081090e7 	.word	0x081090e7
 810906c:	081090e7 	.word	0x081090e7
 8109070:	081090e7 	.word	0x081090e7
 8109074:	081090e7 	.word	0x081090e7
 8109078:	081090d9 	.word	0x081090d9
 810907c:	2b40      	cmp	r3, #64	; 0x40
 810907e:	d02e      	beq.n	81090de <UART_SetConfig+0xa36>
 8109080:	e031      	b.n	81090e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109082:	f7fc f82b 	bl	81050dc <HAL_RCC_GetPCLK1Freq>
 8109086:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109088:	e033      	b.n	81090f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810908a:	f7fc f83d 	bl	8105108 <HAL_RCC_GetPCLK2Freq>
 810908e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109090:	e02f      	b.n	81090f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109096:	4618      	mov	r0, r3
 8109098:	f7fd fc7a 	bl	8106990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810909e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81090a0:	e027      	b.n	81090f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81090a2:	f107 0318 	add.w	r3, r7, #24
 81090a6:	4618      	mov	r0, r3
 81090a8:	f7fd fdc6 	bl	8106c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81090ac:	69fb      	ldr	r3, [r7, #28]
 81090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81090b0:	e01f      	b.n	81090f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81090b2:	4b2d      	ldr	r3, [pc, #180]	; (8109168 <UART_SetConfig+0xac0>)
 81090b4:	681b      	ldr	r3, [r3, #0]
 81090b6:	f003 0320 	and.w	r3, r3, #32
 81090ba:	2b00      	cmp	r3, #0
 81090bc:	d009      	beq.n	81090d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81090be:	4b2a      	ldr	r3, [pc, #168]	; (8109168 <UART_SetConfig+0xac0>)
 81090c0:	681b      	ldr	r3, [r3, #0]
 81090c2:	08db      	lsrs	r3, r3, #3
 81090c4:	f003 0303 	and.w	r3, r3, #3
 81090c8:	4a28      	ldr	r2, [pc, #160]	; (810916c <UART_SetConfig+0xac4>)
 81090ca:	fa22 f303 	lsr.w	r3, r2, r3
 81090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81090d0:	e00f      	b.n	81090f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81090d2:	4b26      	ldr	r3, [pc, #152]	; (810916c <UART_SetConfig+0xac4>)
 81090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81090d6:	e00c      	b.n	81090f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81090d8:	4b25      	ldr	r3, [pc, #148]	; (8109170 <UART_SetConfig+0xac8>)
 81090da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81090dc:	e009      	b.n	81090f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81090de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81090e4:	e005      	b.n	81090f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81090e6:	2300      	movs	r3, #0
 81090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81090ea:	2301      	movs	r3, #1
 81090ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81090f0:	bf00      	nop
    }

    if (pclk != 0U)
 81090f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81090f4:	2b00      	cmp	r3, #0
 81090f6:	d021      	beq.n	810913c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81090f8:	697b      	ldr	r3, [r7, #20]
 81090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81090fc:	4a1d      	ldr	r2, [pc, #116]	; (8109174 <UART_SetConfig+0xacc>)
 81090fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109102:	461a      	mov	r2, r3
 8109104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109106:	fbb3 f2f2 	udiv	r2, r3, r2
 810910a:	697b      	ldr	r3, [r7, #20]
 810910c:	685b      	ldr	r3, [r3, #4]
 810910e:	085b      	lsrs	r3, r3, #1
 8109110:	441a      	add	r2, r3
 8109112:	697b      	ldr	r3, [r7, #20]
 8109114:	685b      	ldr	r3, [r3, #4]
 8109116:	fbb2 f3f3 	udiv	r3, r2, r3
 810911a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810911e:	2b0f      	cmp	r3, #15
 8109120:	d909      	bls.n	8109136 <UART_SetConfig+0xa8e>
 8109122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109128:	d205      	bcs.n	8109136 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810912c:	b29a      	uxth	r2, r3
 810912e:	697b      	ldr	r3, [r7, #20]
 8109130:	681b      	ldr	r3, [r3, #0]
 8109132:	60da      	str	r2, [r3, #12]
 8109134:	e002      	b.n	810913c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109136:	2301      	movs	r3, #1
 8109138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810913c:	697b      	ldr	r3, [r7, #20]
 810913e:	2201      	movs	r2, #1
 8109140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8109144:	697b      	ldr	r3, [r7, #20]
 8109146:	2201      	movs	r2, #1
 8109148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810914c:	697b      	ldr	r3, [r7, #20]
 810914e:	2200      	movs	r2, #0
 8109150:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8109152:	697b      	ldr	r3, [r7, #20]
 8109154:	2200      	movs	r2, #0
 8109156:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8109158:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810915c:	4618      	mov	r0, r3
 810915e:	3748      	adds	r7, #72	; 0x48
 8109160:	46bd      	mov	sp, r7
 8109162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109166:	bf00      	nop
 8109168:	58024400 	.word	0x58024400
 810916c:	03d09000 	.word	0x03d09000
 8109170:	003d0900 	.word	0x003d0900
 8109174:	0810a08c 	.word	0x0810a08c

08109178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109178:	b480      	push	{r7}
 810917a:	b083      	sub	sp, #12
 810917c:	af00      	add	r7, sp, #0
 810917e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109184:	f003 0301 	and.w	r3, r3, #1
 8109188:	2b00      	cmp	r3, #0
 810918a:	d00a      	beq.n	81091a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	681b      	ldr	r3, [r3, #0]
 8109190:	685b      	ldr	r3, [r3, #4]
 8109192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810919a:	687b      	ldr	r3, [r7, #4]
 810919c:	681b      	ldr	r3, [r3, #0]
 810919e:	430a      	orrs	r2, r1
 81091a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81091a2:	687b      	ldr	r3, [r7, #4]
 81091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81091a6:	f003 0302 	and.w	r3, r3, #2
 81091aa:	2b00      	cmp	r3, #0
 81091ac:	d00a      	beq.n	81091c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81091ae:	687b      	ldr	r3, [r7, #4]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	685b      	ldr	r3, [r3, #4]
 81091b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81091bc:	687b      	ldr	r3, [r7, #4]
 81091be:	681b      	ldr	r3, [r3, #0]
 81091c0:	430a      	orrs	r2, r1
 81091c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81091c4:	687b      	ldr	r3, [r7, #4]
 81091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81091c8:	f003 0304 	and.w	r3, r3, #4
 81091cc:	2b00      	cmp	r3, #0
 81091ce:	d00a      	beq.n	81091e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81091d0:	687b      	ldr	r3, [r7, #4]
 81091d2:	681b      	ldr	r3, [r3, #0]
 81091d4:	685b      	ldr	r3, [r3, #4]
 81091d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81091da:	687b      	ldr	r3, [r7, #4]
 81091dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	681b      	ldr	r3, [r3, #0]
 81091e2:	430a      	orrs	r2, r1
 81091e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81091ea:	f003 0308 	and.w	r3, r3, #8
 81091ee:	2b00      	cmp	r3, #0
 81091f0:	d00a      	beq.n	8109208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81091f2:	687b      	ldr	r3, [r7, #4]
 81091f4:	681b      	ldr	r3, [r3, #0]
 81091f6:	685b      	ldr	r3, [r3, #4]
 81091f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109200:	687b      	ldr	r3, [r7, #4]
 8109202:	681b      	ldr	r3, [r3, #0]
 8109204:	430a      	orrs	r2, r1
 8109206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109208:	687b      	ldr	r3, [r7, #4]
 810920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810920c:	f003 0310 	and.w	r3, r3, #16
 8109210:	2b00      	cmp	r3, #0
 8109212:	d00a      	beq.n	810922a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8109214:	687b      	ldr	r3, [r7, #4]
 8109216:	681b      	ldr	r3, [r3, #0]
 8109218:	689b      	ldr	r3, [r3, #8]
 810921a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810921e:	687b      	ldr	r3, [r7, #4]
 8109220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	681b      	ldr	r3, [r3, #0]
 8109226:	430a      	orrs	r2, r1
 8109228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810922a:	687b      	ldr	r3, [r7, #4]
 810922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810922e:	f003 0320 	and.w	r3, r3, #32
 8109232:	2b00      	cmp	r3, #0
 8109234:	d00a      	beq.n	810924c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109236:	687b      	ldr	r3, [r7, #4]
 8109238:	681b      	ldr	r3, [r3, #0]
 810923a:	689b      	ldr	r3, [r3, #8]
 810923c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8109240:	687b      	ldr	r3, [r7, #4]
 8109242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8109244:	687b      	ldr	r3, [r7, #4]
 8109246:	681b      	ldr	r3, [r3, #0]
 8109248:	430a      	orrs	r2, r1
 810924a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810924c:	687b      	ldr	r3, [r7, #4]
 810924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109254:	2b00      	cmp	r3, #0
 8109256:	d01a      	beq.n	810928e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109258:	687b      	ldr	r3, [r7, #4]
 810925a:	681b      	ldr	r3, [r3, #0]
 810925c:	685b      	ldr	r3, [r3, #4]
 810925e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8109262:	687b      	ldr	r3, [r7, #4]
 8109264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	681b      	ldr	r3, [r3, #0]
 810926a:	430a      	orrs	r2, r1
 810926c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810926e:	687b      	ldr	r3, [r7, #4]
 8109270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109276:	d10a      	bne.n	810928e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109278:	687b      	ldr	r3, [r7, #4]
 810927a:	681b      	ldr	r3, [r3, #0]
 810927c:	685b      	ldr	r3, [r3, #4]
 810927e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8109282:	687b      	ldr	r3, [r7, #4]
 8109284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8109286:	687b      	ldr	r3, [r7, #4]
 8109288:	681b      	ldr	r3, [r3, #0]
 810928a:	430a      	orrs	r2, r1
 810928c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810928e:	687b      	ldr	r3, [r7, #4]
 8109290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109296:	2b00      	cmp	r3, #0
 8109298:	d00a      	beq.n	81092b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	681b      	ldr	r3, [r3, #0]
 810929e:	685b      	ldr	r3, [r3, #4]
 81092a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81092a4:	687b      	ldr	r3, [r7, #4]
 81092a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	681b      	ldr	r3, [r3, #0]
 81092ac:	430a      	orrs	r2, r1
 81092ae:	605a      	str	r2, [r3, #4]
  }
}
 81092b0:	bf00      	nop
 81092b2:	370c      	adds	r7, #12
 81092b4:	46bd      	mov	sp, r7
 81092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092ba:	4770      	bx	lr

081092bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81092bc:	b580      	push	{r7, lr}
 81092be:	b086      	sub	sp, #24
 81092c0:	af02      	add	r7, sp, #8
 81092c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	2200      	movs	r2, #0
 81092c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81092cc:	f7f9 fc80 	bl	8102bd0 <HAL_GetTick>
 81092d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	681b      	ldr	r3, [r3, #0]
 81092d6:	681b      	ldr	r3, [r3, #0]
 81092d8:	f003 0308 	and.w	r3, r3, #8
 81092dc:	2b08      	cmp	r3, #8
 81092de:	d10e      	bne.n	81092fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81092e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81092e4:	9300      	str	r3, [sp, #0]
 81092e6:	68fb      	ldr	r3, [r7, #12]
 81092e8:	2200      	movs	r2, #0
 81092ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81092ee:	6878      	ldr	r0, [r7, #4]
 81092f0:	f000 f82f 	bl	8109352 <UART_WaitOnFlagUntilTimeout>
 81092f4:	4603      	mov	r3, r0
 81092f6:	2b00      	cmp	r3, #0
 81092f8:	d001      	beq.n	81092fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81092fa:	2303      	movs	r3, #3
 81092fc:	e025      	b.n	810934a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	681b      	ldr	r3, [r3, #0]
 8109302:	681b      	ldr	r3, [r3, #0]
 8109304:	f003 0304 	and.w	r3, r3, #4
 8109308:	2b04      	cmp	r3, #4
 810930a:	d10e      	bne.n	810932a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810930c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8109310:	9300      	str	r3, [sp, #0]
 8109312:	68fb      	ldr	r3, [r7, #12]
 8109314:	2200      	movs	r2, #0
 8109316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810931a:	6878      	ldr	r0, [r7, #4]
 810931c:	f000 f819 	bl	8109352 <UART_WaitOnFlagUntilTimeout>
 8109320:	4603      	mov	r3, r0
 8109322:	2b00      	cmp	r3, #0
 8109324:	d001      	beq.n	810932a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109326:	2303      	movs	r3, #3
 8109328:	e00f      	b.n	810934a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	2220      	movs	r2, #32
 810932e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8109332:	687b      	ldr	r3, [r7, #4]
 8109334:	2220      	movs	r2, #32
 8109336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810933a:	687b      	ldr	r3, [r7, #4]
 810933c:	2200      	movs	r2, #0
 810933e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8109340:	687b      	ldr	r3, [r7, #4]
 8109342:	2200      	movs	r2, #0
 8109344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109348:	2300      	movs	r3, #0
}
 810934a:	4618      	mov	r0, r3
 810934c:	3710      	adds	r7, #16
 810934e:	46bd      	mov	sp, r7
 8109350:	bd80      	pop	{r7, pc}

08109352 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109352:	b580      	push	{r7, lr}
 8109354:	b09c      	sub	sp, #112	; 0x70
 8109356:	af00      	add	r7, sp, #0
 8109358:	60f8      	str	r0, [r7, #12]
 810935a:	60b9      	str	r1, [r7, #8]
 810935c:	603b      	str	r3, [r7, #0]
 810935e:	4613      	mov	r3, r2
 8109360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109362:	e0a9      	b.n	81094b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109366:	f1b3 3fff 	cmp.w	r3, #4294967295
 810936a:	f000 80a5 	beq.w	81094b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810936e:	f7f9 fc2f 	bl	8102bd0 <HAL_GetTick>
 8109372:	4602      	mov	r2, r0
 8109374:	683b      	ldr	r3, [r7, #0]
 8109376:	1ad3      	subs	r3, r2, r3
 8109378:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810937a:	429a      	cmp	r2, r3
 810937c:	d302      	bcc.n	8109384 <UART_WaitOnFlagUntilTimeout+0x32>
 810937e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109380:	2b00      	cmp	r3, #0
 8109382:	d140      	bne.n	8109406 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8109384:	68fb      	ldr	r3, [r7, #12]
 8109386:	681b      	ldr	r3, [r3, #0]
 8109388:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810938a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810938c:	e853 3f00 	ldrex	r3, [r3]
 8109390:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8109392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109394:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8109398:	667b      	str	r3, [r7, #100]	; 0x64
 810939a:	68fb      	ldr	r3, [r7, #12]
 810939c:	681b      	ldr	r3, [r3, #0]
 810939e:	461a      	mov	r2, r3
 81093a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81093a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 81093a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81093a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81093a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81093aa:	e841 2300 	strex	r3, r2, [r1]
 81093ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 81093b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81093b2:	2b00      	cmp	r3, #0
 81093b4:	d1e6      	bne.n	8109384 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81093b6:	68fb      	ldr	r3, [r7, #12]
 81093b8:	681b      	ldr	r3, [r3, #0]
 81093ba:	3308      	adds	r3, #8
 81093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81093be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81093c0:	e853 3f00 	ldrex	r3, [r3]
 81093c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81093c8:	f023 0301 	bic.w	r3, r3, #1
 81093cc:	663b      	str	r3, [r7, #96]	; 0x60
 81093ce:	68fb      	ldr	r3, [r7, #12]
 81093d0:	681b      	ldr	r3, [r3, #0]
 81093d2:	3308      	adds	r3, #8
 81093d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81093d6:	64ba      	str	r2, [r7, #72]	; 0x48
 81093d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81093da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81093dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81093de:	e841 2300 	strex	r3, r2, [r1]
 81093e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81093e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81093e6:	2b00      	cmp	r3, #0
 81093e8:	d1e5      	bne.n	81093b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81093ea:	68fb      	ldr	r3, [r7, #12]
 81093ec:	2220      	movs	r2, #32
 81093ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81093f2:	68fb      	ldr	r3, [r7, #12]
 81093f4:	2220      	movs	r2, #32
 81093f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81093fa:	68fb      	ldr	r3, [r7, #12]
 81093fc:	2200      	movs	r2, #0
 81093fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8109402:	2303      	movs	r3, #3
 8109404:	e069      	b.n	81094da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8109406:	68fb      	ldr	r3, [r7, #12]
 8109408:	681b      	ldr	r3, [r3, #0]
 810940a:	681b      	ldr	r3, [r3, #0]
 810940c:	f003 0304 	and.w	r3, r3, #4
 8109410:	2b00      	cmp	r3, #0
 8109412:	d051      	beq.n	81094b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8109414:	68fb      	ldr	r3, [r7, #12]
 8109416:	681b      	ldr	r3, [r3, #0]
 8109418:	69db      	ldr	r3, [r3, #28]
 810941a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810941e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109422:	d149      	bne.n	81094b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109424:	68fb      	ldr	r3, [r7, #12]
 8109426:	681b      	ldr	r3, [r3, #0]
 8109428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810942c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810942e:	68fb      	ldr	r3, [r7, #12]
 8109430:	681b      	ldr	r3, [r3, #0]
 8109432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109436:	e853 3f00 	ldrex	r3, [r3]
 810943a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810943e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8109442:	66fb      	str	r3, [r7, #108]	; 0x6c
 8109444:	68fb      	ldr	r3, [r7, #12]
 8109446:	681b      	ldr	r3, [r3, #0]
 8109448:	461a      	mov	r2, r3
 810944a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810944c:	637b      	str	r3, [r7, #52]	; 0x34
 810944e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8109452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109454:	e841 2300 	strex	r3, r2, [r1]
 8109458:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810945c:	2b00      	cmp	r3, #0
 810945e:	d1e6      	bne.n	810942e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109460:	68fb      	ldr	r3, [r7, #12]
 8109462:	681b      	ldr	r3, [r3, #0]
 8109464:	3308      	adds	r3, #8
 8109466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109468:	697b      	ldr	r3, [r7, #20]
 810946a:	e853 3f00 	ldrex	r3, [r3]
 810946e:	613b      	str	r3, [r7, #16]
   return(result);
 8109470:	693b      	ldr	r3, [r7, #16]
 8109472:	f023 0301 	bic.w	r3, r3, #1
 8109476:	66bb      	str	r3, [r7, #104]	; 0x68
 8109478:	68fb      	ldr	r3, [r7, #12]
 810947a:	681b      	ldr	r3, [r3, #0]
 810947c:	3308      	adds	r3, #8
 810947e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8109480:	623a      	str	r2, [r7, #32]
 8109482:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109484:	69f9      	ldr	r1, [r7, #28]
 8109486:	6a3a      	ldr	r2, [r7, #32]
 8109488:	e841 2300 	strex	r3, r2, [r1]
 810948c:	61bb      	str	r3, [r7, #24]
   return(result);
 810948e:	69bb      	ldr	r3, [r7, #24]
 8109490:	2b00      	cmp	r3, #0
 8109492:	d1e5      	bne.n	8109460 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8109494:	68fb      	ldr	r3, [r7, #12]
 8109496:	2220      	movs	r2, #32
 8109498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810949c:	68fb      	ldr	r3, [r7, #12]
 810949e:	2220      	movs	r2, #32
 81094a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81094a4:	68fb      	ldr	r3, [r7, #12]
 81094a6:	2220      	movs	r2, #32
 81094a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81094ac:	68fb      	ldr	r3, [r7, #12]
 81094ae:	2200      	movs	r2, #0
 81094b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 81094b4:	2303      	movs	r3, #3
 81094b6:	e010      	b.n	81094da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81094b8:	68fb      	ldr	r3, [r7, #12]
 81094ba:	681b      	ldr	r3, [r3, #0]
 81094bc:	69da      	ldr	r2, [r3, #28]
 81094be:	68bb      	ldr	r3, [r7, #8]
 81094c0:	4013      	ands	r3, r2
 81094c2:	68ba      	ldr	r2, [r7, #8]
 81094c4:	429a      	cmp	r2, r3
 81094c6:	bf0c      	ite	eq
 81094c8:	2301      	moveq	r3, #1
 81094ca:	2300      	movne	r3, #0
 81094cc:	b2db      	uxtb	r3, r3
 81094ce:	461a      	mov	r2, r3
 81094d0:	79fb      	ldrb	r3, [r7, #7]
 81094d2:	429a      	cmp	r2, r3
 81094d4:	f43f af46 	beq.w	8109364 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81094d8:	2300      	movs	r3, #0
}
 81094da:	4618      	mov	r0, r3
 81094dc:	3770      	adds	r7, #112	; 0x70
 81094de:	46bd      	mov	sp, r7
 81094e0:	bd80      	pop	{r7, pc}

081094e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81094e2:	b480      	push	{r7}
 81094e4:	b085      	sub	sp, #20
 81094e6:	af00      	add	r7, sp, #0
 81094e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81094f0:	2b01      	cmp	r3, #1
 81094f2:	d101      	bne.n	81094f8 <HAL_UARTEx_DisableFifoMode+0x16>
 81094f4:	2302      	movs	r3, #2
 81094f6:	e027      	b.n	8109548 <HAL_UARTEx_DisableFifoMode+0x66>
 81094f8:	687b      	ldr	r3, [r7, #4]
 81094fa:	2201      	movs	r2, #1
 81094fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109500:	687b      	ldr	r3, [r7, #4]
 8109502:	2224      	movs	r2, #36	; 0x24
 8109504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	681b      	ldr	r3, [r3, #0]
 810950c:	681b      	ldr	r3, [r3, #0]
 810950e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109510:	687b      	ldr	r3, [r7, #4]
 8109512:	681b      	ldr	r3, [r3, #0]
 8109514:	681a      	ldr	r2, [r3, #0]
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	681b      	ldr	r3, [r3, #0]
 810951a:	f022 0201 	bic.w	r2, r2, #1
 810951e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109520:	68fb      	ldr	r3, [r7, #12]
 8109522:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8109526:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	2200      	movs	r2, #0
 810952c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810952e:	687b      	ldr	r3, [r7, #4]
 8109530:	681b      	ldr	r3, [r3, #0]
 8109532:	68fa      	ldr	r2, [r7, #12]
 8109534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	2220      	movs	r2, #32
 810953a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	2200      	movs	r2, #0
 8109542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109546:	2300      	movs	r3, #0
}
 8109548:	4618      	mov	r0, r3
 810954a:	3714      	adds	r7, #20
 810954c:	46bd      	mov	sp, r7
 810954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109552:	4770      	bx	lr

08109554 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109554:	b580      	push	{r7, lr}
 8109556:	b084      	sub	sp, #16
 8109558:	af00      	add	r7, sp, #0
 810955a:	6078      	str	r0, [r7, #4]
 810955c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810955e:	687b      	ldr	r3, [r7, #4]
 8109560:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109564:	2b01      	cmp	r3, #1
 8109566:	d101      	bne.n	810956c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109568:	2302      	movs	r3, #2
 810956a:	e02d      	b.n	81095c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810956c:	687b      	ldr	r3, [r7, #4]
 810956e:	2201      	movs	r2, #1
 8109570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109574:	687b      	ldr	r3, [r7, #4]
 8109576:	2224      	movs	r2, #36	; 0x24
 8109578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810957c:	687b      	ldr	r3, [r7, #4]
 810957e:	681b      	ldr	r3, [r3, #0]
 8109580:	681b      	ldr	r3, [r3, #0]
 8109582:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	681b      	ldr	r3, [r3, #0]
 8109588:	681a      	ldr	r2, [r3, #0]
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	681b      	ldr	r3, [r3, #0]
 810958e:	f022 0201 	bic.w	r2, r2, #1
 8109592:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	681b      	ldr	r3, [r3, #0]
 8109598:	689b      	ldr	r3, [r3, #8]
 810959a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810959e:	687b      	ldr	r3, [r7, #4]
 81095a0:	681b      	ldr	r3, [r3, #0]
 81095a2:	683a      	ldr	r2, [r7, #0]
 81095a4:	430a      	orrs	r2, r1
 81095a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81095a8:	6878      	ldr	r0, [r7, #4]
 81095aa:	f000 f84f 	bl	810964c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	681b      	ldr	r3, [r3, #0]
 81095b2:	68fa      	ldr	r2, [r7, #12]
 81095b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81095b6:	687b      	ldr	r3, [r7, #4]
 81095b8:	2220      	movs	r2, #32
 81095ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	2200      	movs	r2, #0
 81095c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81095c6:	2300      	movs	r3, #0
}
 81095c8:	4618      	mov	r0, r3
 81095ca:	3710      	adds	r7, #16
 81095cc:	46bd      	mov	sp, r7
 81095ce:	bd80      	pop	{r7, pc}

081095d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81095d0:	b580      	push	{r7, lr}
 81095d2:	b084      	sub	sp, #16
 81095d4:	af00      	add	r7, sp, #0
 81095d6:	6078      	str	r0, [r7, #4]
 81095d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81095e0:	2b01      	cmp	r3, #1
 81095e2:	d101      	bne.n	81095e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81095e4:	2302      	movs	r3, #2
 81095e6:	e02d      	b.n	8109644 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	2201      	movs	r2, #1
 81095ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	2224      	movs	r2, #36	; 0x24
 81095f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81095f8:	687b      	ldr	r3, [r7, #4]
 81095fa:	681b      	ldr	r3, [r3, #0]
 81095fc:	681b      	ldr	r3, [r3, #0]
 81095fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	681b      	ldr	r3, [r3, #0]
 8109604:	681a      	ldr	r2, [r3, #0]
 8109606:	687b      	ldr	r3, [r7, #4]
 8109608:	681b      	ldr	r3, [r3, #0]
 810960a:	f022 0201 	bic.w	r2, r2, #1
 810960e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109610:	687b      	ldr	r3, [r7, #4]
 8109612:	681b      	ldr	r3, [r3, #0]
 8109614:	689b      	ldr	r3, [r3, #8]
 8109616:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810961a:	687b      	ldr	r3, [r7, #4]
 810961c:	681b      	ldr	r3, [r3, #0]
 810961e:	683a      	ldr	r2, [r7, #0]
 8109620:	430a      	orrs	r2, r1
 8109622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109624:	6878      	ldr	r0, [r7, #4]
 8109626:	f000 f811 	bl	810964c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810962a:	687b      	ldr	r3, [r7, #4]
 810962c:	681b      	ldr	r3, [r3, #0]
 810962e:	68fa      	ldr	r2, [r7, #12]
 8109630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109632:	687b      	ldr	r3, [r7, #4]
 8109634:	2220      	movs	r2, #32
 8109636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	2200      	movs	r2, #0
 810963e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109642:	2300      	movs	r3, #0
}
 8109644:	4618      	mov	r0, r3
 8109646:	3710      	adds	r7, #16
 8109648:	46bd      	mov	sp, r7
 810964a:	bd80      	pop	{r7, pc}

0810964c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810964c:	b480      	push	{r7}
 810964e:	b085      	sub	sp, #20
 8109650:	af00      	add	r7, sp, #0
 8109652:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109658:	2b00      	cmp	r3, #0
 810965a:	d108      	bne.n	810966e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810965c:	687b      	ldr	r3, [r7, #4]
 810965e:	2201      	movs	r2, #1
 8109660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	2201      	movs	r2, #1
 8109668:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810966c:	e031      	b.n	81096d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810966e:	2310      	movs	r3, #16
 8109670:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109672:	2310      	movs	r3, #16
 8109674:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	681b      	ldr	r3, [r3, #0]
 810967a:	689b      	ldr	r3, [r3, #8]
 810967c:	0e5b      	lsrs	r3, r3, #25
 810967e:	b2db      	uxtb	r3, r3
 8109680:	f003 0307 	and.w	r3, r3, #7
 8109684:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109686:	687b      	ldr	r3, [r7, #4]
 8109688:	681b      	ldr	r3, [r3, #0]
 810968a:	689b      	ldr	r3, [r3, #8]
 810968c:	0f5b      	lsrs	r3, r3, #29
 810968e:	b2db      	uxtb	r3, r3
 8109690:	f003 0307 	and.w	r3, r3, #7
 8109694:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109696:	7bbb      	ldrb	r3, [r7, #14]
 8109698:	7b3a      	ldrb	r2, [r7, #12]
 810969a:	4911      	ldr	r1, [pc, #68]	; (81096e0 <UARTEx_SetNbDataToProcess+0x94>)
 810969c:	5c8a      	ldrb	r2, [r1, r2]
 810969e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81096a2:	7b3a      	ldrb	r2, [r7, #12]
 81096a4:	490f      	ldr	r1, [pc, #60]	; (81096e4 <UARTEx_SetNbDataToProcess+0x98>)
 81096a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81096a8:	fb93 f3f2 	sdiv	r3, r3, r2
 81096ac:	b29a      	uxth	r2, r3
 81096ae:	687b      	ldr	r3, [r7, #4]
 81096b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81096b4:	7bfb      	ldrb	r3, [r7, #15]
 81096b6:	7b7a      	ldrb	r2, [r7, #13]
 81096b8:	4909      	ldr	r1, [pc, #36]	; (81096e0 <UARTEx_SetNbDataToProcess+0x94>)
 81096ba:	5c8a      	ldrb	r2, [r1, r2]
 81096bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81096c0:	7b7a      	ldrb	r2, [r7, #13]
 81096c2:	4908      	ldr	r1, [pc, #32]	; (81096e4 <UARTEx_SetNbDataToProcess+0x98>)
 81096c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81096c6:	fb93 f3f2 	sdiv	r3, r3, r2
 81096ca:	b29a      	uxth	r2, r3
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81096d2:	bf00      	nop
 81096d4:	3714      	adds	r7, #20
 81096d6:	46bd      	mov	sp, r7
 81096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096dc:	4770      	bx	lr
 81096de:	bf00      	nop
 81096e0:	0810a0a4 	.word	0x0810a0a4
 81096e4:	0810a0ac 	.word	0x0810a0ac

081096e8 <__libc_init_array>:
 81096e8:	b570      	push	{r4, r5, r6, lr}
 81096ea:	4d0d      	ldr	r5, [pc, #52]	; (8109720 <__libc_init_array+0x38>)
 81096ec:	4c0d      	ldr	r4, [pc, #52]	; (8109724 <__libc_init_array+0x3c>)
 81096ee:	1b64      	subs	r4, r4, r5
 81096f0:	10a4      	asrs	r4, r4, #2
 81096f2:	2600      	movs	r6, #0
 81096f4:	42a6      	cmp	r6, r4
 81096f6:	d109      	bne.n	810970c <__libc_init_array+0x24>
 81096f8:	4d0b      	ldr	r5, [pc, #44]	; (8109728 <__libc_init_array+0x40>)
 81096fa:	4c0c      	ldr	r4, [pc, #48]	; (810972c <__libc_init_array+0x44>)
 81096fc:	f000 fc9c 	bl	810a038 <_init>
 8109700:	1b64      	subs	r4, r4, r5
 8109702:	10a4      	asrs	r4, r4, #2
 8109704:	2600      	movs	r6, #0
 8109706:	42a6      	cmp	r6, r4
 8109708:	d105      	bne.n	8109716 <__libc_init_array+0x2e>
 810970a:	bd70      	pop	{r4, r5, r6, pc}
 810970c:	f855 3b04 	ldr.w	r3, [r5], #4
 8109710:	4798      	blx	r3
 8109712:	3601      	adds	r6, #1
 8109714:	e7ee      	b.n	81096f4 <__libc_init_array+0xc>
 8109716:	f855 3b04 	ldr.w	r3, [r5], #4
 810971a:	4798      	blx	r3
 810971c:	3601      	adds	r6, #1
 810971e:	e7f2      	b.n	8109706 <__libc_init_array+0x1e>
 8109720:	0810a0f0 	.word	0x0810a0f0
 8109724:	0810a0f0 	.word	0x0810a0f0
 8109728:	0810a0f0 	.word	0x0810a0f0
 810972c:	0810a0f4 	.word	0x0810a0f4

08109730 <memset>:
 8109730:	4402      	add	r2, r0
 8109732:	4603      	mov	r3, r0
 8109734:	4293      	cmp	r3, r2
 8109736:	d100      	bne.n	810973a <memset+0xa>
 8109738:	4770      	bx	lr
 810973a:	f803 1b01 	strb.w	r1, [r3], #1
 810973e:	e7f9      	b.n	8109734 <memset+0x4>

08109740 <siprintf>:
 8109740:	b40e      	push	{r1, r2, r3}
 8109742:	b500      	push	{lr}
 8109744:	b09c      	sub	sp, #112	; 0x70
 8109746:	ab1d      	add	r3, sp, #116	; 0x74
 8109748:	9002      	str	r0, [sp, #8]
 810974a:	9006      	str	r0, [sp, #24]
 810974c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109750:	4809      	ldr	r0, [pc, #36]	; (8109778 <siprintf+0x38>)
 8109752:	9107      	str	r1, [sp, #28]
 8109754:	9104      	str	r1, [sp, #16]
 8109756:	4909      	ldr	r1, [pc, #36]	; (810977c <siprintf+0x3c>)
 8109758:	f853 2b04 	ldr.w	r2, [r3], #4
 810975c:	9105      	str	r1, [sp, #20]
 810975e:	6800      	ldr	r0, [r0, #0]
 8109760:	9301      	str	r3, [sp, #4]
 8109762:	a902      	add	r1, sp, #8
 8109764:	f000 f868 	bl	8109838 <_svfiprintf_r>
 8109768:	9b02      	ldr	r3, [sp, #8]
 810976a:	2200      	movs	r2, #0
 810976c:	701a      	strb	r2, [r3, #0]
 810976e:	b01c      	add	sp, #112	; 0x70
 8109770:	f85d eb04 	ldr.w	lr, [sp], #4
 8109774:	b003      	add	sp, #12
 8109776:	4770      	bx	lr
 8109778:	10000014 	.word	0x10000014
 810977c:	ffff0208 	.word	0xffff0208

08109780 <__ssputs_r>:
 8109780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109784:	688e      	ldr	r6, [r1, #8]
 8109786:	429e      	cmp	r6, r3
 8109788:	4682      	mov	sl, r0
 810978a:	460c      	mov	r4, r1
 810978c:	4690      	mov	r8, r2
 810978e:	461f      	mov	r7, r3
 8109790:	d838      	bhi.n	8109804 <__ssputs_r+0x84>
 8109792:	898a      	ldrh	r2, [r1, #12]
 8109794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8109798:	d032      	beq.n	8109800 <__ssputs_r+0x80>
 810979a:	6825      	ldr	r5, [r4, #0]
 810979c:	6909      	ldr	r1, [r1, #16]
 810979e:	eba5 0901 	sub.w	r9, r5, r1
 81097a2:	6965      	ldr	r5, [r4, #20]
 81097a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81097a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81097ac:	3301      	adds	r3, #1
 81097ae:	444b      	add	r3, r9
 81097b0:	106d      	asrs	r5, r5, #1
 81097b2:	429d      	cmp	r5, r3
 81097b4:	bf38      	it	cc
 81097b6:	461d      	movcc	r5, r3
 81097b8:	0553      	lsls	r3, r2, #21
 81097ba:	d531      	bpl.n	8109820 <__ssputs_r+0xa0>
 81097bc:	4629      	mov	r1, r5
 81097be:	f000 fb63 	bl	8109e88 <_malloc_r>
 81097c2:	4606      	mov	r6, r0
 81097c4:	b950      	cbnz	r0, 81097dc <__ssputs_r+0x5c>
 81097c6:	230c      	movs	r3, #12
 81097c8:	f8ca 3000 	str.w	r3, [sl]
 81097cc:	89a3      	ldrh	r3, [r4, #12]
 81097ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81097d2:	81a3      	strh	r3, [r4, #12]
 81097d4:	f04f 30ff 	mov.w	r0, #4294967295
 81097d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81097dc:	6921      	ldr	r1, [r4, #16]
 81097de:	464a      	mov	r2, r9
 81097e0:	f000 fabe 	bl	8109d60 <memcpy>
 81097e4:	89a3      	ldrh	r3, [r4, #12]
 81097e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81097ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81097ee:	81a3      	strh	r3, [r4, #12]
 81097f0:	6126      	str	r6, [r4, #16]
 81097f2:	6165      	str	r5, [r4, #20]
 81097f4:	444e      	add	r6, r9
 81097f6:	eba5 0509 	sub.w	r5, r5, r9
 81097fa:	6026      	str	r6, [r4, #0]
 81097fc:	60a5      	str	r5, [r4, #8]
 81097fe:	463e      	mov	r6, r7
 8109800:	42be      	cmp	r6, r7
 8109802:	d900      	bls.n	8109806 <__ssputs_r+0x86>
 8109804:	463e      	mov	r6, r7
 8109806:	6820      	ldr	r0, [r4, #0]
 8109808:	4632      	mov	r2, r6
 810980a:	4641      	mov	r1, r8
 810980c:	f000 fab6 	bl	8109d7c <memmove>
 8109810:	68a3      	ldr	r3, [r4, #8]
 8109812:	1b9b      	subs	r3, r3, r6
 8109814:	60a3      	str	r3, [r4, #8]
 8109816:	6823      	ldr	r3, [r4, #0]
 8109818:	4433      	add	r3, r6
 810981a:	6023      	str	r3, [r4, #0]
 810981c:	2000      	movs	r0, #0
 810981e:	e7db      	b.n	81097d8 <__ssputs_r+0x58>
 8109820:	462a      	mov	r2, r5
 8109822:	f000 fba5 	bl	8109f70 <_realloc_r>
 8109826:	4606      	mov	r6, r0
 8109828:	2800      	cmp	r0, #0
 810982a:	d1e1      	bne.n	81097f0 <__ssputs_r+0x70>
 810982c:	6921      	ldr	r1, [r4, #16]
 810982e:	4650      	mov	r0, sl
 8109830:	f000 fabe 	bl	8109db0 <_free_r>
 8109834:	e7c7      	b.n	81097c6 <__ssputs_r+0x46>
	...

08109838 <_svfiprintf_r>:
 8109838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810983c:	4698      	mov	r8, r3
 810983e:	898b      	ldrh	r3, [r1, #12]
 8109840:	061b      	lsls	r3, r3, #24
 8109842:	b09d      	sub	sp, #116	; 0x74
 8109844:	4607      	mov	r7, r0
 8109846:	460d      	mov	r5, r1
 8109848:	4614      	mov	r4, r2
 810984a:	d50e      	bpl.n	810986a <_svfiprintf_r+0x32>
 810984c:	690b      	ldr	r3, [r1, #16]
 810984e:	b963      	cbnz	r3, 810986a <_svfiprintf_r+0x32>
 8109850:	2140      	movs	r1, #64	; 0x40
 8109852:	f000 fb19 	bl	8109e88 <_malloc_r>
 8109856:	6028      	str	r0, [r5, #0]
 8109858:	6128      	str	r0, [r5, #16]
 810985a:	b920      	cbnz	r0, 8109866 <_svfiprintf_r+0x2e>
 810985c:	230c      	movs	r3, #12
 810985e:	603b      	str	r3, [r7, #0]
 8109860:	f04f 30ff 	mov.w	r0, #4294967295
 8109864:	e0d1      	b.n	8109a0a <_svfiprintf_r+0x1d2>
 8109866:	2340      	movs	r3, #64	; 0x40
 8109868:	616b      	str	r3, [r5, #20]
 810986a:	2300      	movs	r3, #0
 810986c:	9309      	str	r3, [sp, #36]	; 0x24
 810986e:	2320      	movs	r3, #32
 8109870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8109874:	f8cd 800c 	str.w	r8, [sp, #12]
 8109878:	2330      	movs	r3, #48	; 0x30
 810987a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8109a24 <_svfiprintf_r+0x1ec>
 810987e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109882:	f04f 0901 	mov.w	r9, #1
 8109886:	4623      	mov	r3, r4
 8109888:	469a      	mov	sl, r3
 810988a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810988e:	b10a      	cbz	r2, 8109894 <_svfiprintf_r+0x5c>
 8109890:	2a25      	cmp	r2, #37	; 0x25
 8109892:	d1f9      	bne.n	8109888 <_svfiprintf_r+0x50>
 8109894:	ebba 0b04 	subs.w	fp, sl, r4
 8109898:	d00b      	beq.n	81098b2 <_svfiprintf_r+0x7a>
 810989a:	465b      	mov	r3, fp
 810989c:	4622      	mov	r2, r4
 810989e:	4629      	mov	r1, r5
 81098a0:	4638      	mov	r0, r7
 81098a2:	f7ff ff6d 	bl	8109780 <__ssputs_r>
 81098a6:	3001      	adds	r0, #1
 81098a8:	f000 80aa 	beq.w	8109a00 <_svfiprintf_r+0x1c8>
 81098ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81098ae:	445a      	add	r2, fp
 81098b0:	9209      	str	r2, [sp, #36]	; 0x24
 81098b2:	f89a 3000 	ldrb.w	r3, [sl]
 81098b6:	2b00      	cmp	r3, #0
 81098b8:	f000 80a2 	beq.w	8109a00 <_svfiprintf_r+0x1c8>
 81098bc:	2300      	movs	r3, #0
 81098be:	f04f 32ff 	mov.w	r2, #4294967295
 81098c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81098c6:	f10a 0a01 	add.w	sl, sl, #1
 81098ca:	9304      	str	r3, [sp, #16]
 81098cc:	9307      	str	r3, [sp, #28]
 81098ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81098d2:	931a      	str	r3, [sp, #104]	; 0x68
 81098d4:	4654      	mov	r4, sl
 81098d6:	2205      	movs	r2, #5
 81098d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81098dc:	4851      	ldr	r0, [pc, #324]	; (8109a24 <_svfiprintf_r+0x1ec>)
 81098de:	f7f6 fcff 	bl	81002e0 <memchr>
 81098e2:	9a04      	ldr	r2, [sp, #16]
 81098e4:	b9d8      	cbnz	r0, 810991e <_svfiprintf_r+0xe6>
 81098e6:	06d0      	lsls	r0, r2, #27
 81098e8:	bf44      	itt	mi
 81098ea:	2320      	movmi	r3, #32
 81098ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81098f0:	0711      	lsls	r1, r2, #28
 81098f2:	bf44      	itt	mi
 81098f4:	232b      	movmi	r3, #43	; 0x2b
 81098f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81098fa:	f89a 3000 	ldrb.w	r3, [sl]
 81098fe:	2b2a      	cmp	r3, #42	; 0x2a
 8109900:	d015      	beq.n	810992e <_svfiprintf_r+0xf6>
 8109902:	9a07      	ldr	r2, [sp, #28]
 8109904:	4654      	mov	r4, sl
 8109906:	2000      	movs	r0, #0
 8109908:	f04f 0c0a 	mov.w	ip, #10
 810990c:	4621      	mov	r1, r4
 810990e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109912:	3b30      	subs	r3, #48	; 0x30
 8109914:	2b09      	cmp	r3, #9
 8109916:	d94e      	bls.n	81099b6 <_svfiprintf_r+0x17e>
 8109918:	b1b0      	cbz	r0, 8109948 <_svfiprintf_r+0x110>
 810991a:	9207      	str	r2, [sp, #28]
 810991c:	e014      	b.n	8109948 <_svfiprintf_r+0x110>
 810991e:	eba0 0308 	sub.w	r3, r0, r8
 8109922:	fa09 f303 	lsl.w	r3, r9, r3
 8109926:	4313      	orrs	r3, r2
 8109928:	9304      	str	r3, [sp, #16]
 810992a:	46a2      	mov	sl, r4
 810992c:	e7d2      	b.n	81098d4 <_svfiprintf_r+0x9c>
 810992e:	9b03      	ldr	r3, [sp, #12]
 8109930:	1d19      	adds	r1, r3, #4
 8109932:	681b      	ldr	r3, [r3, #0]
 8109934:	9103      	str	r1, [sp, #12]
 8109936:	2b00      	cmp	r3, #0
 8109938:	bfbb      	ittet	lt
 810993a:	425b      	neglt	r3, r3
 810993c:	f042 0202 	orrlt.w	r2, r2, #2
 8109940:	9307      	strge	r3, [sp, #28]
 8109942:	9307      	strlt	r3, [sp, #28]
 8109944:	bfb8      	it	lt
 8109946:	9204      	strlt	r2, [sp, #16]
 8109948:	7823      	ldrb	r3, [r4, #0]
 810994a:	2b2e      	cmp	r3, #46	; 0x2e
 810994c:	d10c      	bne.n	8109968 <_svfiprintf_r+0x130>
 810994e:	7863      	ldrb	r3, [r4, #1]
 8109950:	2b2a      	cmp	r3, #42	; 0x2a
 8109952:	d135      	bne.n	81099c0 <_svfiprintf_r+0x188>
 8109954:	9b03      	ldr	r3, [sp, #12]
 8109956:	1d1a      	adds	r2, r3, #4
 8109958:	681b      	ldr	r3, [r3, #0]
 810995a:	9203      	str	r2, [sp, #12]
 810995c:	2b00      	cmp	r3, #0
 810995e:	bfb8      	it	lt
 8109960:	f04f 33ff 	movlt.w	r3, #4294967295
 8109964:	3402      	adds	r4, #2
 8109966:	9305      	str	r3, [sp, #20]
 8109968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8109a34 <_svfiprintf_r+0x1fc>
 810996c:	7821      	ldrb	r1, [r4, #0]
 810996e:	2203      	movs	r2, #3
 8109970:	4650      	mov	r0, sl
 8109972:	f7f6 fcb5 	bl	81002e0 <memchr>
 8109976:	b140      	cbz	r0, 810998a <_svfiprintf_r+0x152>
 8109978:	2340      	movs	r3, #64	; 0x40
 810997a:	eba0 000a 	sub.w	r0, r0, sl
 810997e:	fa03 f000 	lsl.w	r0, r3, r0
 8109982:	9b04      	ldr	r3, [sp, #16]
 8109984:	4303      	orrs	r3, r0
 8109986:	3401      	adds	r4, #1
 8109988:	9304      	str	r3, [sp, #16]
 810998a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810998e:	4826      	ldr	r0, [pc, #152]	; (8109a28 <_svfiprintf_r+0x1f0>)
 8109990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109994:	2206      	movs	r2, #6
 8109996:	f7f6 fca3 	bl	81002e0 <memchr>
 810999a:	2800      	cmp	r0, #0
 810999c:	d038      	beq.n	8109a10 <_svfiprintf_r+0x1d8>
 810999e:	4b23      	ldr	r3, [pc, #140]	; (8109a2c <_svfiprintf_r+0x1f4>)
 81099a0:	bb1b      	cbnz	r3, 81099ea <_svfiprintf_r+0x1b2>
 81099a2:	9b03      	ldr	r3, [sp, #12]
 81099a4:	3307      	adds	r3, #7
 81099a6:	f023 0307 	bic.w	r3, r3, #7
 81099aa:	3308      	adds	r3, #8
 81099ac:	9303      	str	r3, [sp, #12]
 81099ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81099b0:	4433      	add	r3, r6
 81099b2:	9309      	str	r3, [sp, #36]	; 0x24
 81099b4:	e767      	b.n	8109886 <_svfiprintf_r+0x4e>
 81099b6:	fb0c 3202 	mla	r2, ip, r2, r3
 81099ba:	460c      	mov	r4, r1
 81099bc:	2001      	movs	r0, #1
 81099be:	e7a5      	b.n	810990c <_svfiprintf_r+0xd4>
 81099c0:	2300      	movs	r3, #0
 81099c2:	3401      	adds	r4, #1
 81099c4:	9305      	str	r3, [sp, #20]
 81099c6:	4619      	mov	r1, r3
 81099c8:	f04f 0c0a 	mov.w	ip, #10
 81099cc:	4620      	mov	r0, r4
 81099ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 81099d2:	3a30      	subs	r2, #48	; 0x30
 81099d4:	2a09      	cmp	r2, #9
 81099d6:	d903      	bls.n	81099e0 <_svfiprintf_r+0x1a8>
 81099d8:	2b00      	cmp	r3, #0
 81099da:	d0c5      	beq.n	8109968 <_svfiprintf_r+0x130>
 81099dc:	9105      	str	r1, [sp, #20]
 81099de:	e7c3      	b.n	8109968 <_svfiprintf_r+0x130>
 81099e0:	fb0c 2101 	mla	r1, ip, r1, r2
 81099e4:	4604      	mov	r4, r0
 81099e6:	2301      	movs	r3, #1
 81099e8:	e7f0      	b.n	81099cc <_svfiprintf_r+0x194>
 81099ea:	ab03      	add	r3, sp, #12
 81099ec:	9300      	str	r3, [sp, #0]
 81099ee:	462a      	mov	r2, r5
 81099f0:	4b0f      	ldr	r3, [pc, #60]	; (8109a30 <_svfiprintf_r+0x1f8>)
 81099f2:	a904      	add	r1, sp, #16
 81099f4:	4638      	mov	r0, r7
 81099f6:	f3af 8000 	nop.w
 81099fa:	1c42      	adds	r2, r0, #1
 81099fc:	4606      	mov	r6, r0
 81099fe:	d1d6      	bne.n	81099ae <_svfiprintf_r+0x176>
 8109a00:	89ab      	ldrh	r3, [r5, #12]
 8109a02:	065b      	lsls	r3, r3, #25
 8109a04:	f53f af2c 	bmi.w	8109860 <_svfiprintf_r+0x28>
 8109a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8109a0a:	b01d      	add	sp, #116	; 0x74
 8109a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109a10:	ab03      	add	r3, sp, #12
 8109a12:	9300      	str	r3, [sp, #0]
 8109a14:	462a      	mov	r2, r5
 8109a16:	4b06      	ldr	r3, [pc, #24]	; (8109a30 <_svfiprintf_r+0x1f8>)
 8109a18:	a904      	add	r1, sp, #16
 8109a1a:	4638      	mov	r0, r7
 8109a1c:	f000 f87a 	bl	8109b14 <_printf_i>
 8109a20:	e7eb      	b.n	81099fa <_svfiprintf_r+0x1c2>
 8109a22:	bf00      	nop
 8109a24:	0810a0b4 	.word	0x0810a0b4
 8109a28:	0810a0be 	.word	0x0810a0be
 8109a2c:	00000000 	.word	0x00000000
 8109a30:	08109781 	.word	0x08109781
 8109a34:	0810a0ba 	.word	0x0810a0ba

08109a38 <_printf_common>:
 8109a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109a3c:	4616      	mov	r6, r2
 8109a3e:	4699      	mov	r9, r3
 8109a40:	688a      	ldr	r2, [r1, #8]
 8109a42:	690b      	ldr	r3, [r1, #16]
 8109a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109a48:	4293      	cmp	r3, r2
 8109a4a:	bfb8      	it	lt
 8109a4c:	4613      	movlt	r3, r2
 8109a4e:	6033      	str	r3, [r6, #0]
 8109a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109a54:	4607      	mov	r7, r0
 8109a56:	460c      	mov	r4, r1
 8109a58:	b10a      	cbz	r2, 8109a5e <_printf_common+0x26>
 8109a5a:	3301      	adds	r3, #1
 8109a5c:	6033      	str	r3, [r6, #0]
 8109a5e:	6823      	ldr	r3, [r4, #0]
 8109a60:	0699      	lsls	r1, r3, #26
 8109a62:	bf42      	ittt	mi
 8109a64:	6833      	ldrmi	r3, [r6, #0]
 8109a66:	3302      	addmi	r3, #2
 8109a68:	6033      	strmi	r3, [r6, #0]
 8109a6a:	6825      	ldr	r5, [r4, #0]
 8109a6c:	f015 0506 	ands.w	r5, r5, #6
 8109a70:	d106      	bne.n	8109a80 <_printf_common+0x48>
 8109a72:	f104 0a19 	add.w	sl, r4, #25
 8109a76:	68e3      	ldr	r3, [r4, #12]
 8109a78:	6832      	ldr	r2, [r6, #0]
 8109a7a:	1a9b      	subs	r3, r3, r2
 8109a7c:	42ab      	cmp	r3, r5
 8109a7e:	dc26      	bgt.n	8109ace <_printf_common+0x96>
 8109a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109a84:	1e13      	subs	r3, r2, #0
 8109a86:	6822      	ldr	r2, [r4, #0]
 8109a88:	bf18      	it	ne
 8109a8a:	2301      	movne	r3, #1
 8109a8c:	0692      	lsls	r2, r2, #26
 8109a8e:	d42b      	bmi.n	8109ae8 <_printf_common+0xb0>
 8109a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109a94:	4649      	mov	r1, r9
 8109a96:	4638      	mov	r0, r7
 8109a98:	47c0      	blx	r8
 8109a9a:	3001      	adds	r0, #1
 8109a9c:	d01e      	beq.n	8109adc <_printf_common+0xa4>
 8109a9e:	6823      	ldr	r3, [r4, #0]
 8109aa0:	68e5      	ldr	r5, [r4, #12]
 8109aa2:	6832      	ldr	r2, [r6, #0]
 8109aa4:	f003 0306 	and.w	r3, r3, #6
 8109aa8:	2b04      	cmp	r3, #4
 8109aaa:	bf08      	it	eq
 8109aac:	1aad      	subeq	r5, r5, r2
 8109aae:	68a3      	ldr	r3, [r4, #8]
 8109ab0:	6922      	ldr	r2, [r4, #16]
 8109ab2:	bf0c      	ite	eq
 8109ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109ab8:	2500      	movne	r5, #0
 8109aba:	4293      	cmp	r3, r2
 8109abc:	bfc4      	itt	gt
 8109abe:	1a9b      	subgt	r3, r3, r2
 8109ac0:	18ed      	addgt	r5, r5, r3
 8109ac2:	2600      	movs	r6, #0
 8109ac4:	341a      	adds	r4, #26
 8109ac6:	42b5      	cmp	r5, r6
 8109ac8:	d11a      	bne.n	8109b00 <_printf_common+0xc8>
 8109aca:	2000      	movs	r0, #0
 8109acc:	e008      	b.n	8109ae0 <_printf_common+0xa8>
 8109ace:	2301      	movs	r3, #1
 8109ad0:	4652      	mov	r2, sl
 8109ad2:	4649      	mov	r1, r9
 8109ad4:	4638      	mov	r0, r7
 8109ad6:	47c0      	blx	r8
 8109ad8:	3001      	adds	r0, #1
 8109ada:	d103      	bne.n	8109ae4 <_printf_common+0xac>
 8109adc:	f04f 30ff 	mov.w	r0, #4294967295
 8109ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109ae4:	3501      	adds	r5, #1
 8109ae6:	e7c6      	b.n	8109a76 <_printf_common+0x3e>
 8109ae8:	18e1      	adds	r1, r4, r3
 8109aea:	1c5a      	adds	r2, r3, #1
 8109aec:	2030      	movs	r0, #48	; 0x30
 8109aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109af2:	4422      	add	r2, r4
 8109af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109afc:	3302      	adds	r3, #2
 8109afe:	e7c7      	b.n	8109a90 <_printf_common+0x58>
 8109b00:	2301      	movs	r3, #1
 8109b02:	4622      	mov	r2, r4
 8109b04:	4649      	mov	r1, r9
 8109b06:	4638      	mov	r0, r7
 8109b08:	47c0      	blx	r8
 8109b0a:	3001      	adds	r0, #1
 8109b0c:	d0e6      	beq.n	8109adc <_printf_common+0xa4>
 8109b0e:	3601      	adds	r6, #1
 8109b10:	e7d9      	b.n	8109ac6 <_printf_common+0x8e>
	...

08109b14 <_printf_i>:
 8109b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109b18:	7e0f      	ldrb	r7, [r1, #24]
 8109b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109b1c:	2f78      	cmp	r7, #120	; 0x78
 8109b1e:	4691      	mov	r9, r2
 8109b20:	4680      	mov	r8, r0
 8109b22:	460c      	mov	r4, r1
 8109b24:	469a      	mov	sl, r3
 8109b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109b2a:	d807      	bhi.n	8109b3c <_printf_i+0x28>
 8109b2c:	2f62      	cmp	r7, #98	; 0x62
 8109b2e:	d80a      	bhi.n	8109b46 <_printf_i+0x32>
 8109b30:	2f00      	cmp	r7, #0
 8109b32:	f000 80d8 	beq.w	8109ce6 <_printf_i+0x1d2>
 8109b36:	2f58      	cmp	r7, #88	; 0x58
 8109b38:	f000 80a3 	beq.w	8109c82 <_printf_i+0x16e>
 8109b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109b44:	e03a      	b.n	8109bbc <_printf_i+0xa8>
 8109b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109b4a:	2b15      	cmp	r3, #21
 8109b4c:	d8f6      	bhi.n	8109b3c <_printf_i+0x28>
 8109b4e:	a101      	add	r1, pc, #4	; (adr r1, 8109b54 <_printf_i+0x40>)
 8109b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109b54:	08109bad 	.word	0x08109bad
 8109b58:	08109bc1 	.word	0x08109bc1
 8109b5c:	08109b3d 	.word	0x08109b3d
 8109b60:	08109b3d 	.word	0x08109b3d
 8109b64:	08109b3d 	.word	0x08109b3d
 8109b68:	08109b3d 	.word	0x08109b3d
 8109b6c:	08109bc1 	.word	0x08109bc1
 8109b70:	08109b3d 	.word	0x08109b3d
 8109b74:	08109b3d 	.word	0x08109b3d
 8109b78:	08109b3d 	.word	0x08109b3d
 8109b7c:	08109b3d 	.word	0x08109b3d
 8109b80:	08109ccd 	.word	0x08109ccd
 8109b84:	08109bf1 	.word	0x08109bf1
 8109b88:	08109caf 	.word	0x08109caf
 8109b8c:	08109b3d 	.word	0x08109b3d
 8109b90:	08109b3d 	.word	0x08109b3d
 8109b94:	08109cef 	.word	0x08109cef
 8109b98:	08109b3d 	.word	0x08109b3d
 8109b9c:	08109bf1 	.word	0x08109bf1
 8109ba0:	08109b3d 	.word	0x08109b3d
 8109ba4:	08109b3d 	.word	0x08109b3d
 8109ba8:	08109cb7 	.word	0x08109cb7
 8109bac:	682b      	ldr	r3, [r5, #0]
 8109bae:	1d1a      	adds	r2, r3, #4
 8109bb0:	681b      	ldr	r3, [r3, #0]
 8109bb2:	602a      	str	r2, [r5, #0]
 8109bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109bbc:	2301      	movs	r3, #1
 8109bbe:	e0a3      	b.n	8109d08 <_printf_i+0x1f4>
 8109bc0:	6820      	ldr	r0, [r4, #0]
 8109bc2:	6829      	ldr	r1, [r5, #0]
 8109bc4:	0606      	lsls	r6, r0, #24
 8109bc6:	f101 0304 	add.w	r3, r1, #4
 8109bca:	d50a      	bpl.n	8109be2 <_printf_i+0xce>
 8109bcc:	680e      	ldr	r6, [r1, #0]
 8109bce:	602b      	str	r3, [r5, #0]
 8109bd0:	2e00      	cmp	r6, #0
 8109bd2:	da03      	bge.n	8109bdc <_printf_i+0xc8>
 8109bd4:	232d      	movs	r3, #45	; 0x2d
 8109bd6:	4276      	negs	r6, r6
 8109bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109bdc:	485e      	ldr	r0, [pc, #376]	; (8109d58 <_printf_i+0x244>)
 8109bde:	230a      	movs	r3, #10
 8109be0:	e019      	b.n	8109c16 <_printf_i+0x102>
 8109be2:	680e      	ldr	r6, [r1, #0]
 8109be4:	602b      	str	r3, [r5, #0]
 8109be6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8109bea:	bf18      	it	ne
 8109bec:	b236      	sxthne	r6, r6
 8109bee:	e7ef      	b.n	8109bd0 <_printf_i+0xbc>
 8109bf0:	682b      	ldr	r3, [r5, #0]
 8109bf2:	6820      	ldr	r0, [r4, #0]
 8109bf4:	1d19      	adds	r1, r3, #4
 8109bf6:	6029      	str	r1, [r5, #0]
 8109bf8:	0601      	lsls	r1, r0, #24
 8109bfa:	d501      	bpl.n	8109c00 <_printf_i+0xec>
 8109bfc:	681e      	ldr	r6, [r3, #0]
 8109bfe:	e002      	b.n	8109c06 <_printf_i+0xf2>
 8109c00:	0646      	lsls	r6, r0, #25
 8109c02:	d5fb      	bpl.n	8109bfc <_printf_i+0xe8>
 8109c04:	881e      	ldrh	r6, [r3, #0]
 8109c06:	4854      	ldr	r0, [pc, #336]	; (8109d58 <_printf_i+0x244>)
 8109c08:	2f6f      	cmp	r7, #111	; 0x6f
 8109c0a:	bf0c      	ite	eq
 8109c0c:	2308      	moveq	r3, #8
 8109c0e:	230a      	movne	r3, #10
 8109c10:	2100      	movs	r1, #0
 8109c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109c16:	6865      	ldr	r5, [r4, #4]
 8109c18:	60a5      	str	r5, [r4, #8]
 8109c1a:	2d00      	cmp	r5, #0
 8109c1c:	bfa2      	ittt	ge
 8109c1e:	6821      	ldrge	r1, [r4, #0]
 8109c20:	f021 0104 	bicge.w	r1, r1, #4
 8109c24:	6021      	strge	r1, [r4, #0]
 8109c26:	b90e      	cbnz	r6, 8109c2c <_printf_i+0x118>
 8109c28:	2d00      	cmp	r5, #0
 8109c2a:	d04d      	beq.n	8109cc8 <_printf_i+0x1b4>
 8109c2c:	4615      	mov	r5, r2
 8109c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8109c32:	fb03 6711 	mls	r7, r3, r1, r6
 8109c36:	5dc7      	ldrb	r7, [r0, r7]
 8109c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109c3c:	4637      	mov	r7, r6
 8109c3e:	42bb      	cmp	r3, r7
 8109c40:	460e      	mov	r6, r1
 8109c42:	d9f4      	bls.n	8109c2e <_printf_i+0x11a>
 8109c44:	2b08      	cmp	r3, #8
 8109c46:	d10b      	bne.n	8109c60 <_printf_i+0x14c>
 8109c48:	6823      	ldr	r3, [r4, #0]
 8109c4a:	07de      	lsls	r6, r3, #31
 8109c4c:	d508      	bpl.n	8109c60 <_printf_i+0x14c>
 8109c4e:	6923      	ldr	r3, [r4, #16]
 8109c50:	6861      	ldr	r1, [r4, #4]
 8109c52:	4299      	cmp	r1, r3
 8109c54:	bfde      	ittt	le
 8109c56:	2330      	movle	r3, #48	; 0x30
 8109c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8109c5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8109c60:	1b52      	subs	r2, r2, r5
 8109c62:	6122      	str	r2, [r4, #16]
 8109c64:	f8cd a000 	str.w	sl, [sp]
 8109c68:	464b      	mov	r3, r9
 8109c6a:	aa03      	add	r2, sp, #12
 8109c6c:	4621      	mov	r1, r4
 8109c6e:	4640      	mov	r0, r8
 8109c70:	f7ff fee2 	bl	8109a38 <_printf_common>
 8109c74:	3001      	adds	r0, #1
 8109c76:	d14c      	bne.n	8109d12 <_printf_i+0x1fe>
 8109c78:	f04f 30ff 	mov.w	r0, #4294967295
 8109c7c:	b004      	add	sp, #16
 8109c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109c82:	4835      	ldr	r0, [pc, #212]	; (8109d58 <_printf_i+0x244>)
 8109c84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109c88:	6829      	ldr	r1, [r5, #0]
 8109c8a:	6823      	ldr	r3, [r4, #0]
 8109c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8109c90:	6029      	str	r1, [r5, #0]
 8109c92:	061d      	lsls	r5, r3, #24
 8109c94:	d514      	bpl.n	8109cc0 <_printf_i+0x1ac>
 8109c96:	07df      	lsls	r7, r3, #31
 8109c98:	bf44      	itt	mi
 8109c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8109c9e:	6023      	strmi	r3, [r4, #0]
 8109ca0:	b91e      	cbnz	r6, 8109caa <_printf_i+0x196>
 8109ca2:	6823      	ldr	r3, [r4, #0]
 8109ca4:	f023 0320 	bic.w	r3, r3, #32
 8109ca8:	6023      	str	r3, [r4, #0]
 8109caa:	2310      	movs	r3, #16
 8109cac:	e7b0      	b.n	8109c10 <_printf_i+0xfc>
 8109cae:	6823      	ldr	r3, [r4, #0]
 8109cb0:	f043 0320 	orr.w	r3, r3, #32
 8109cb4:	6023      	str	r3, [r4, #0]
 8109cb6:	2378      	movs	r3, #120	; 0x78
 8109cb8:	4828      	ldr	r0, [pc, #160]	; (8109d5c <_printf_i+0x248>)
 8109cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8109cbe:	e7e3      	b.n	8109c88 <_printf_i+0x174>
 8109cc0:	0659      	lsls	r1, r3, #25
 8109cc2:	bf48      	it	mi
 8109cc4:	b2b6      	uxthmi	r6, r6
 8109cc6:	e7e6      	b.n	8109c96 <_printf_i+0x182>
 8109cc8:	4615      	mov	r5, r2
 8109cca:	e7bb      	b.n	8109c44 <_printf_i+0x130>
 8109ccc:	682b      	ldr	r3, [r5, #0]
 8109cce:	6826      	ldr	r6, [r4, #0]
 8109cd0:	6961      	ldr	r1, [r4, #20]
 8109cd2:	1d18      	adds	r0, r3, #4
 8109cd4:	6028      	str	r0, [r5, #0]
 8109cd6:	0635      	lsls	r5, r6, #24
 8109cd8:	681b      	ldr	r3, [r3, #0]
 8109cda:	d501      	bpl.n	8109ce0 <_printf_i+0x1cc>
 8109cdc:	6019      	str	r1, [r3, #0]
 8109cde:	e002      	b.n	8109ce6 <_printf_i+0x1d2>
 8109ce0:	0670      	lsls	r0, r6, #25
 8109ce2:	d5fb      	bpl.n	8109cdc <_printf_i+0x1c8>
 8109ce4:	8019      	strh	r1, [r3, #0]
 8109ce6:	2300      	movs	r3, #0
 8109ce8:	6123      	str	r3, [r4, #16]
 8109cea:	4615      	mov	r5, r2
 8109cec:	e7ba      	b.n	8109c64 <_printf_i+0x150>
 8109cee:	682b      	ldr	r3, [r5, #0]
 8109cf0:	1d1a      	adds	r2, r3, #4
 8109cf2:	602a      	str	r2, [r5, #0]
 8109cf4:	681d      	ldr	r5, [r3, #0]
 8109cf6:	6862      	ldr	r2, [r4, #4]
 8109cf8:	2100      	movs	r1, #0
 8109cfa:	4628      	mov	r0, r5
 8109cfc:	f7f6 faf0 	bl	81002e0 <memchr>
 8109d00:	b108      	cbz	r0, 8109d06 <_printf_i+0x1f2>
 8109d02:	1b40      	subs	r0, r0, r5
 8109d04:	6060      	str	r0, [r4, #4]
 8109d06:	6863      	ldr	r3, [r4, #4]
 8109d08:	6123      	str	r3, [r4, #16]
 8109d0a:	2300      	movs	r3, #0
 8109d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109d10:	e7a8      	b.n	8109c64 <_printf_i+0x150>
 8109d12:	6923      	ldr	r3, [r4, #16]
 8109d14:	462a      	mov	r2, r5
 8109d16:	4649      	mov	r1, r9
 8109d18:	4640      	mov	r0, r8
 8109d1a:	47d0      	blx	sl
 8109d1c:	3001      	adds	r0, #1
 8109d1e:	d0ab      	beq.n	8109c78 <_printf_i+0x164>
 8109d20:	6823      	ldr	r3, [r4, #0]
 8109d22:	079b      	lsls	r3, r3, #30
 8109d24:	d413      	bmi.n	8109d4e <_printf_i+0x23a>
 8109d26:	68e0      	ldr	r0, [r4, #12]
 8109d28:	9b03      	ldr	r3, [sp, #12]
 8109d2a:	4298      	cmp	r0, r3
 8109d2c:	bfb8      	it	lt
 8109d2e:	4618      	movlt	r0, r3
 8109d30:	e7a4      	b.n	8109c7c <_printf_i+0x168>
 8109d32:	2301      	movs	r3, #1
 8109d34:	4632      	mov	r2, r6
 8109d36:	4649      	mov	r1, r9
 8109d38:	4640      	mov	r0, r8
 8109d3a:	47d0      	blx	sl
 8109d3c:	3001      	adds	r0, #1
 8109d3e:	d09b      	beq.n	8109c78 <_printf_i+0x164>
 8109d40:	3501      	adds	r5, #1
 8109d42:	68e3      	ldr	r3, [r4, #12]
 8109d44:	9903      	ldr	r1, [sp, #12]
 8109d46:	1a5b      	subs	r3, r3, r1
 8109d48:	42ab      	cmp	r3, r5
 8109d4a:	dcf2      	bgt.n	8109d32 <_printf_i+0x21e>
 8109d4c:	e7eb      	b.n	8109d26 <_printf_i+0x212>
 8109d4e:	2500      	movs	r5, #0
 8109d50:	f104 0619 	add.w	r6, r4, #25
 8109d54:	e7f5      	b.n	8109d42 <_printf_i+0x22e>
 8109d56:	bf00      	nop
 8109d58:	0810a0c5 	.word	0x0810a0c5
 8109d5c:	0810a0d6 	.word	0x0810a0d6

08109d60 <memcpy>:
 8109d60:	440a      	add	r2, r1
 8109d62:	4291      	cmp	r1, r2
 8109d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8109d68:	d100      	bne.n	8109d6c <memcpy+0xc>
 8109d6a:	4770      	bx	lr
 8109d6c:	b510      	push	{r4, lr}
 8109d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8109d76:	4291      	cmp	r1, r2
 8109d78:	d1f9      	bne.n	8109d6e <memcpy+0xe>
 8109d7a:	bd10      	pop	{r4, pc}

08109d7c <memmove>:
 8109d7c:	4288      	cmp	r0, r1
 8109d7e:	b510      	push	{r4, lr}
 8109d80:	eb01 0402 	add.w	r4, r1, r2
 8109d84:	d902      	bls.n	8109d8c <memmove+0x10>
 8109d86:	4284      	cmp	r4, r0
 8109d88:	4623      	mov	r3, r4
 8109d8a:	d807      	bhi.n	8109d9c <memmove+0x20>
 8109d8c:	1e43      	subs	r3, r0, #1
 8109d8e:	42a1      	cmp	r1, r4
 8109d90:	d008      	beq.n	8109da4 <memmove+0x28>
 8109d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8109d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8109d9a:	e7f8      	b.n	8109d8e <memmove+0x12>
 8109d9c:	4402      	add	r2, r0
 8109d9e:	4601      	mov	r1, r0
 8109da0:	428a      	cmp	r2, r1
 8109da2:	d100      	bne.n	8109da6 <memmove+0x2a>
 8109da4:	bd10      	pop	{r4, pc}
 8109da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8109daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8109dae:	e7f7      	b.n	8109da0 <memmove+0x24>

08109db0 <_free_r>:
 8109db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109db2:	2900      	cmp	r1, #0
 8109db4:	d044      	beq.n	8109e40 <_free_r+0x90>
 8109db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109dba:	9001      	str	r0, [sp, #4]
 8109dbc:	2b00      	cmp	r3, #0
 8109dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8109dc2:	bfb8      	it	lt
 8109dc4:	18e4      	addlt	r4, r4, r3
 8109dc6:	f000 f913 	bl	8109ff0 <__malloc_lock>
 8109dca:	4a1e      	ldr	r2, [pc, #120]	; (8109e44 <_free_r+0x94>)
 8109dcc:	9801      	ldr	r0, [sp, #4]
 8109dce:	6813      	ldr	r3, [r2, #0]
 8109dd0:	b933      	cbnz	r3, 8109de0 <_free_r+0x30>
 8109dd2:	6063      	str	r3, [r4, #4]
 8109dd4:	6014      	str	r4, [r2, #0]
 8109dd6:	b003      	add	sp, #12
 8109dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8109ddc:	f000 b90e 	b.w	8109ffc <__malloc_unlock>
 8109de0:	42a3      	cmp	r3, r4
 8109de2:	d908      	bls.n	8109df6 <_free_r+0x46>
 8109de4:	6825      	ldr	r5, [r4, #0]
 8109de6:	1961      	adds	r1, r4, r5
 8109de8:	428b      	cmp	r3, r1
 8109dea:	bf01      	itttt	eq
 8109dec:	6819      	ldreq	r1, [r3, #0]
 8109dee:	685b      	ldreq	r3, [r3, #4]
 8109df0:	1949      	addeq	r1, r1, r5
 8109df2:	6021      	streq	r1, [r4, #0]
 8109df4:	e7ed      	b.n	8109dd2 <_free_r+0x22>
 8109df6:	461a      	mov	r2, r3
 8109df8:	685b      	ldr	r3, [r3, #4]
 8109dfa:	b10b      	cbz	r3, 8109e00 <_free_r+0x50>
 8109dfc:	42a3      	cmp	r3, r4
 8109dfe:	d9fa      	bls.n	8109df6 <_free_r+0x46>
 8109e00:	6811      	ldr	r1, [r2, #0]
 8109e02:	1855      	adds	r5, r2, r1
 8109e04:	42a5      	cmp	r5, r4
 8109e06:	d10b      	bne.n	8109e20 <_free_r+0x70>
 8109e08:	6824      	ldr	r4, [r4, #0]
 8109e0a:	4421      	add	r1, r4
 8109e0c:	1854      	adds	r4, r2, r1
 8109e0e:	42a3      	cmp	r3, r4
 8109e10:	6011      	str	r1, [r2, #0]
 8109e12:	d1e0      	bne.n	8109dd6 <_free_r+0x26>
 8109e14:	681c      	ldr	r4, [r3, #0]
 8109e16:	685b      	ldr	r3, [r3, #4]
 8109e18:	6053      	str	r3, [r2, #4]
 8109e1a:	4421      	add	r1, r4
 8109e1c:	6011      	str	r1, [r2, #0]
 8109e1e:	e7da      	b.n	8109dd6 <_free_r+0x26>
 8109e20:	d902      	bls.n	8109e28 <_free_r+0x78>
 8109e22:	230c      	movs	r3, #12
 8109e24:	6003      	str	r3, [r0, #0]
 8109e26:	e7d6      	b.n	8109dd6 <_free_r+0x26>
 8109e28:	6825      	ldr	r5, [r4, #0]
 8109e2a:	1961      	adds	r1, r4, r5
 8109e2c:	428b      	cmp	r3, r1
 8109e2e:	bf04      	itt	eq
 8109e30:	6819      	ldreq	r1, [r3, #0]
 8109e32:	685b      	ldreq	r3, [r3, #4]
 8109e34:	6063      	str	r3, [r4, #4]
 8109e36:	bf04      	itt	eq
 8109e38:	1949      	addeq	r1, r1, r5
 8109e3a:	6021      	streq	r1, [r4, #0]
 8109e3c:	6054      	str	r4, [r2, #4]
 8109e3e:	e7ca      	b.n	8109dd6 <_free_r+0x26>
 8109e40:	b003      	add	sp, #12
 8109e42:	bd30      	pop	{r4, r5, pc}
 8109e44:	10000334 	.word	0x10000334

08109e48 <sbrk_aligned>:
 8109e48:	b570      	push	{r4, r5, r6, lr}
 8109e4a:	4e0e      	ldr	r6, [pc, #56]	; (8109e84 <sbrk_aligned+0x3c>)
 8109e4c:	460c      	mov	r4, r1
 8109e4e:	6831      	ldr	r1, [r6, #0]
 8109e50:	4605      	mov	r5, r0
 8109e52:	b911      	cbnz	r1, 8109e5a <sbrk_aligned+0x12>
 8109e54:	f000 f8bc 	bl	8109fd0 <_sbrk_r>
 8109e58:	6030      	str	r0, [r6, #0]
 8109e5a:	4621      	mov	r1, r4
 8109e5c:	4628      	mov	r0, r5
 8109e5e:	f000 f8b7 	bl	8109fd0 <_sbrk_r>
 8109e62:	1c43      	adds	r3, r0, #1
 8109e64:	d00a      	beq.n	8109e7c <sbrk_aligned+0x34>
 8109e66:	1cc4      	adds	r4, r0, #3
 8109e68:	f024 0403 	bic.w	r4, r4, #3
 8109e6c:	42a0      	cmp	r0, r4
 8109e6e:	d007      	beq.n	8109e80 <sbrk_aligned+0x38>
 8109e70:	1a21      	subs	r1, r4, r0
 8109e72:	4628      	mov	r0, r5
 8109e74:	f000 f8ac 	bl	8109fd0 <_sbrk_r>
 8109e78:	3001      	adds	r0, #1
 8109e7a:	d101      	bne.n	8109e80 <sbrk_aligned+0x38>
 8109e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8109e80:	4620      	mov	r0, r4
 8109e82:	bd70      	pop	{r4, r5, r6, pc}
 8109e84:	10000338 	.word	0x10000338

08109e88 <_malloc_r>:
 8109e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109e8c:	1ccd      	adds	r5, r1, #3
 8109e8e:	f025 0503 	bic.w	r5, r5, #3
 8109e92:	3508      	adds	r5, #8
 8109e94:	2d0c      	cmp	r5, #12
 8109e96:	bf38      	it	cc
 8109e98:	250c      	movcc	r5, #12
 8109e9a:	2d00      	cmp	r5, #0
 8109e9c:	4607      	mov	r7, r0
 8109e9e:	db01      	blt.n	8109ea4 <_malloc_r+0x1c>
 8109ea0:	42a9      	cmp	r1, r5
 8109ea2:	d905      	bls.n	8109eb0 <_malloc_r+0x28>
 8109ea4:	230c      	movs	r3, #12
 8109ea6:	603b      	str	r3, [r7, #0]
 8109ea8:	2600      	movs	r6, #0
 8109eaa:	4630      	mov	r0, r6
 8109eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109eb0:	4e2e      	ldr	r6, [pc, #184]	; (8109f6c <_malloc_r+0xe4>)
 8109eb2:	f000 f89d 	bl	8109ff0 <__malloc_lock>
 8109eb6:	6833      	ldr	r3, [r6, #0]
 8109eb8:	461c      	mov	r4, r3
 8109eba:	bb34      	cbnz	r4, 8109f0a <_malloc_r+0x82>
 8109ebc:	4629      	mov	r1, r5
 8109ebe:	4638      	mov	r0, r7
 8109ec0:	f7ff ffc2 	bl	8109e48 <sbrk_aligned>
 8109ec4:	1c43      	adds	r3, r0, #1
 8109ec6:	4604      	mov	r4, r0
 8109ec8:	d14d      	bne.n	8109f66 <_malloc_r+0xde>
 8109eca:	6834      	ldr	r4, [r6, #0]
 8109ecc:	4626      	mov	r6, r4
 8109ece:	2e00      	cmp	r6, #0
 8109ed0:	d140      	bne.n	8109f54 <_malloc_r+0xcc>
 8109ed2:	6823      	ldr	r3, [r4, #0]
 8109ed4:	4631      	mov	r1, r6
 8109ed6:	4638      	mov	r0, r7
 8109ed8:	eb04 0803 	add.w	r8, r4, r3
 8109edc:	f000 f878 	bl	8109fd0 <_sbrk_r>
 8109ee0:	4580      	cmp	r8, r0
 8109ee2:	d13a      	bne.n	8109f5a <_malloc_r+0xd2>
 8109ee4:	6821      	ldr	r1, [r4, #0]
 8109ee6:	3503      	adds	r5, #3
 8109ee8:	1a6d      	subs	r5, r5, r1
 8109eea:	f025 0503 	bic.w	r5, r5, #3
 8109eee:	3508      	adds	r5, #8
 8109ef0:	2d0c      	cmp	r5, #12
 8109ef2:	bf38      	it	cc
 8109ef4:	250c      	movcc	r5, #12
 8109ef6:	4629      	mov	r1, r5
 8109ef8:	4638      	mov	r0, r7
 8109efa:	f7ff ffa5 	bl	8109e48 <sbrk_aligned>
 8109efe:	3001      	adds	r0, #1
 8109f00:	d02b      	beq.n	8109f5a <_malloc_r+0xd2>
 8109f02:	6823      	ldr	r3, [r4, #0]
 8109f04:	442b      	add	r3, r5
 8109f06:	6023      	str	r3, [r4, #0]
 8109f08:	e00e      	b.n	8109f28 <_malloc_r+0xa0>
 8109f0a:	6822      	ldr	r2, [r4, #0]
 8109f0c:	1b52      	subs	r2, r2, r5
 8109f0e:	d41e      	bmi.n	8109f4e <_malloc_r+0xc6>
 8109f10:	2a0b      	cmp	r2, #11
 8109f12:	d916      	bls.n	8109f42 <_malloc_r+0xba>
 8109f14:	1961      	adds	r1, r4, r5
 8109f16:	42a3      	cmp	r3, r4
 8109f18:	6025      	str	r5, [r4, #0]
 8109f1a:	bf18      	it	ne
 8109f1c:	6059      	strne	r1, [r3, #4]
 8109f1e:	6863      	ldr	r3, [r4, #4]
 8109f20:	bf08      	it	eq
 8109f22:	6031      	streq	r1, [r6, #0]
 8109f24:	5162      	str	r2, [r4, r5]
 8109f26:	604b      	str	r3, [r1, #4]
 8109f28:	4638      	mov	r0, r7
 8109f2a:	f104 060b 	add.w	r6, r4, #11
 8109f2e:	f000 f865 	bl	8109ffc <__malloc_unlock>
 8109f32:	f026 0607 	bic.w	r6, r6, #7
 8109f36:	1d23      	adds	r3, r4, #4
 8109f38:	1af2      	subs	r2, r6, r3
 8109f3a:	d0b6      	beq.n	8109eaa <_malloc_r+0x22>
 8109f3c:	1b9b      	subs	r3, r3, r6
 8109f3e:	50a3      	str	r3, [r4, r2]
 8109f40:	e7b3      	b.n	8109eaa <_malloc_r+0x22>
 8109f42:	6862      	ldr	r2, [r4, #4]
 8109f44:	42a3      	cmp	r3, r4
 8109f46:	bf0c      	ite	eq
 8109f48:	6032      	streq	r2, [r6, #0]
 8109f4a:	605a      	strne	r2, [r3, #4]
 8109f4c:	e7ec      	b.n	8109f28 <_malloc_r+0xa0>
 8109f4e:	4623      	mov	r3, r4
 8109f50:	6864      	ldr	r4, [r4, #4]
 8109f52:	e7b2      	b.n	8109eba <_malloc_r+0x32>
 8109f54:	4634      	mov	r4, r6
 8109f56:	6876      	ldr	r6, [r6, #4]
 8109f58:	e7b9      	b.n	8109ece <_malloc_r+0x46>
 8109f5a:	230c      	movs	r3, #12
 8109f5c:	603b      	str	r3, [r7, #0]
 8109f5e:	4638      	mov	r0, r7
 8109f60:	f000 f84c 	bl	8109ffc <__malloc_unlock>
 8109f64:	e7a1      	b.n	8109eaa <_malloc_r+0x22>
 8109f66:	6025      	str	r5, [r4, #0]
 8109f68:	e7de      	b.n	8109f28 <_malloc_r+0xa0>
 8109f6a:	bf00      	nop
 8109f6c:	10000334 	.word	0x10000334

08109f70 <_realloc_r>:
 8109f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109f74:	4680      	mov	r8, r0
 8109f76:	4614      	mov	r4, r2
 8109f78:	460e      	mov	r6, r1
 8109f7a:	b921      	cbnz	r1, 8109f86 <_realloc_r+0x16>
 8109f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8109f80:	4611      	mov	r1, r2
 8109f82:	f7ff bf81 	b.w	8109e88 <_malloc_r>
 8109f86:	b92a      	cbnz	r2, 8109f94 <_realloc_r+0x24>
 8109f88:	f7ff ff12 	bl	8109db0 <_free_r>
 8109f8c:	4625      	mov	r5, r4
 8109f8e:	4628      	mov	r0, r5
 8109f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109f94:	f000 f838 	bl	810a008 <_malloc_usable_size_r>
 8109f98:	4284      	cmp	r4, r0
 8109f9a:	4607      	mov	r7, r0
 8109f9c:	d802      	bhi.n	8109fa4 <_realloc_r+0x34>
 8109f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8109fa2:	d812      	bhi.n	8109fca <_realloc_r+0x5a>
 8109fa4:	4621      	mov	r1, r4
 8109fa6:	4640      	mov	r0, r8
 8109fa8:	f7ff ff6e 	bl	8109e88 <_malloc_r>
 8109fac:	4605      	mov	r5, r0
 8109fae:	2800      	cmp	r0, #0
 8109fb0:	d0ed      	beq.n	8109f8e <_realloc_r+0x1e>
 8109fb2:	42bc      	cmp	r4, r7
 8109fb4:	4622      	mov	r2, r4
 8109fb6:	4631      	mov	r1, r6
 8109fb8:	bf28      	it	cs
 8109fba:	463a      	movcs	r2, r7
 8109fbc:	f7ff fed0 	bl	8109d60 <memcpy>
 8109fc0:	4631      	mov	r1, r6
 8109fc2:	4640      	mov	r0, r8
 8109fc4:	f7ff fef4 	bl	8109db0 <_free_r>
 8109fc8:	e7e1      	b.n	8109f8e <_realloc_r+0x1e>
 8109fca:	4635      	mov	r5, r6
 8109fcc:	e7df      	b.n	8109f8e <_realloc_r+0x1e>
	...

08109fd0 <_sbrk_r>:
 8109fd0:	b538      	push	{r3, r4, r5, lr}
 8109fd2:	4d06      	ldr	r5, [pc, #24]	; (8109fec <_sbrk_r+0x1c>)
 8109fd4:	2300      	movs	r3, #0
 8109fd6:	4604      	mov	r4, r0
 8109fd8:	4608      	mov	r0, r1
 8109fda:	602b      	str	r3, [r5, #0]
 8109fdc:	f000 f81e 	bl	810a01c <_sbrk>
 8109fe0:	1c43      	adds	r3, r0, #1
 8109fe2:	d102      	bne.n	8109fea <_sbrk_r+0x1a>
 8109fe4:	682b      	ldr	r3, [r5, #0]
 8109fe6:	b103      	cbz	r3, 8109fea <_sbrk_r+0x1a>
 8109fe8:	6023      	str	r3, [r4, #0]
 8109fea:	bd38      	pop	{r3, r4, r5, pc}
 8109fec:	1000033c 	.word	0x1000033c

08109ff0 <__malloc_lock>:
 8109ff0:	4801      	ldr	r0, [pc, #4]	; (8109ff8 <__malloc_lock+0x8>)
 8109ff2:	f000 b811 	b.w	810a018 <__retarget_lock_acquire_recursive>
 8109ff6:	bf00      	nop
 8109ff8:	10000340 	.word	0x10000340

08109ffc <__malloc_unlock>:
 8109ffc:	4801      	ldr	r0, [pc, #4]	; (810a004 <__malloc_unlock+0x8>)
 8109ffe:	f000 b80c 	b.w	810a01a <__retarget_lock_release_recursive>
 810a002:	bf00      	nop
 810a004:	10000340 	.word	0x10000340

0810a008 <_malloc_usable_size_r>:
 810a008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a00c:	1f18      	subs	r0, r3, #4
 810a00e:	2b00      	cmp	r3, #0
 810a010:	bfbc      	itt	lt
 810a012:	580b      	ldrlt	r3, [r1, r0]
 810a014:	18c0      	addlt	r0, r0, r3
 810a016:	4770      	bx	lr

0810a018 <__retarget_lock_acquire_recursive>:
 810a018:	4770      	bx	lr

0810a01a <__retarget_lock_release_recursive>:
 810a01a:	4770      	bx	lr

0810a01c <_sbrk>:
 810a01c:	4a04      	ldr	r2, [pc, #16]	; (810a030 <_sbrk+0x14>)
 810a01e:	6811      	ldr	r1, [r2, #0]
 810a020:	4603      	mov	r3, r0
 810a022:	b909      	cbnz	r1, 810a028 <_sbrk+0xc>
 810a024:	4903      	ldr	r1, [pc, #12]	; (810a034 <_sbrk+0x18>)
 810a026:	6011      	str	r1, [r2, #0]
 810a028:	6810      	ldr	r0, [r2, #0]
 810a02a:	4403      	add	r3, r0
 810a02c:	6013      	str	r3, [r2, #0]
 810a02e:	4770      	bx	lr
 810a030:	10000344 	.word	0x10000344
 810a034:	10000348 	.word	0x10000348

0810a038 <_init>:
 810a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a03a:	bf00      	nop
 810a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a03e:	bc08      	pop	{r3}
 810a040:	469e      	mov	lr, r3
 810a042:	4770      	bx	lr

0810a044 <_fini>:
 810a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a046:	bf00      	nop
 810a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a04a:	bc08      	pop	{r3}
 810a04c:	469e      	mov	lr, r3
 810a04e:	4770      	bx	lr
